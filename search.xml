<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>golang 统计代码行数</title>
    <url>/post/ea2c7bad.html</url>
    <content><![CDATA[<h1 id="golang-统计代码行数"><a href="#golang-统计代码行数" class="headerlink" title="golang 统计代码行数"></a>golang 统计代码行数</h1><h2 id="使用gocloc工具进行统计"><a href="#使用gocloc工具进行统计" class="headerlink" title="使用gocloc工具进行统计"></a>使用gocloc工具进行统计</h2><p>获取gocloc工具：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go get -u github.com/hhatto/gocloc/cmd/gocloc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>使用gocloc命令 gocloc[目录路径或文件路径] 进行统计</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gocloc <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><code>gocloc</code>会按类别统计路径下有多少文件，文件中的空行数，注释行数以及实际代码行数。如果目录下某类文件不需要统计，可以使用参数<code>--exclue-ext=[文件后缀]</code></p>
<p>例如：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gocloc --exclue-ext<span class="token operator">=</span>txt <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>CSRF安全漏洞</title>
    <url>/post/43961134.html</url>
    <content><![CDATA[<h1 id="CSRF安全漏洞"><a href="#CSRF安全漏洞" class="headerlink" title="CSRF安全漏洞"></a>CSRF安全漏洞</h1><h2 id="跨站请求伪造（CSRF）是一种网络安全漏洞，它允许攻击者利用已通过身份验证的用户的权限来执行未经授权的操作。攻击者通过欺骗用户使其在受信任的网站上执行恶意操作，从而触发已登录用户的请求。以下是有关CSRF攻击的一些基本信息和防范方法"><a href="#跨站请求伪造（CSRF）是一种网络安全漏洞，它允许攻击者利用已通过身份验证的用户的权限来执行未经授权的操作。攻击者通过欺骗用户使其在受信任的网站上执行恶意操作，从而触发已登录用户的请求。以下是有关CSRF攻击的一些基本信息和防范方法" class="headerlink" title="跨站请求伪造（CSRF）是一种网络安全漏洞，它允许攻击者利用已通过身份验证的用户的权限来执行未经授权的操作。攻击者通过欺骗用户使其在受信任的网站上执行恶意操作，从而触发已登录用户的请求。以下是有关CSRF攻击的一些基本信息和防范方法"></a>跨站请求伪造（CSRF）是一种网络安全漏洞，它允许攻击者利用已通过身份验证的用户的权限来执行未经授权的操作。攻击者通过欺骗用户使其在受信任的网站上执行恶意操作，从而触发已登录用户的请求。以下是有关CSRF攻击的一些基本信息和防范方法</h2><h3 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h3><ol>
<li><strong>用户已登录：</strong> 攻击者利用用户已登录到目标网站的事实。</li>
<li><strong>恶意请求：</strong> 攻击者构造一个包含恶意操作的请求，例如改变用户密码、发起转账等。</li>
<li><strong>伪装请求：</strong> 攻击者将构造的请求嵌入到欺骗性的页面或社交工程攻击中，引导用户在不知情的情况下执行操作。</li>
<li><strong>自动执行：</strong> 用户在未察觉的情况下，浏览器会自动发送已登录用户的凭证（cookie等），触发恶意请求。</li>
</ol>
<p>假设有一个在线银行网站，用户在登录后可以执行转账操作。以下是一个简化的CSRF攻击的例子：</p>
<ol>
<li><p><strong>用户登录银行账户：</strong></p>
<ul>
<li>用户A在银行网站登录，服务器会颁发一个包含用户身份验证信息的Cookie。</li>
</ul>
</li>
<li><p><strong>攻击者构造恶意页面：</strong></p>
<ul>
<li>攻击者创建了一个恶意网站，并在该网站上放置了一个恶意的HTML表单，其中包含了银行网站的转账请求，但是用户并不知晓。</li>
</ul>
 <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://bank.com/transfer<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>toAccount<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>attackerAccount<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>amount<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1000000<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token comment">&lt;!-- CSRF攻击的关键：攻击者欺骗用户在不知情的情况下提交该表单 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>点击这里获取免费游戏<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p><strong>用户被欺骗执行操作：</strong></p>
<ul>
<li>攻击者通过社交工程或其他手段诱导用户A访问他们的网站，用户A在不知情的情况下点击了表单中的按钮。</li>
</ul>
</li>
<li><p><strong>恶意请求被发送：</strong></p>
<ul>
<li>由于用户A已在银行网站登录，浏览器会自动发送包含用户身份验证信息的Cookie的POST请求，执行转账操作。</li>
</ul>
</li>
<li><p><strong>攻击成功：</strong></p>
<ul>
<li>用户A的银行账户从银行网站上被悄无声息地转账了一笔金额到攻击者指定的账户。</li>
</ul>
</li>
</ol>
<p>这个例子展示了CSRF攻击的基本原理，即攻击者利用用户已登录的状态，通过欺骗用户使其执行未经授权的操作。通过实施CSRF令牌等防范措施，可以有效地减轻这类攻击的影响。</p>
<h3 id="防范方法"><a href="#防范方法" class="headerlink" title="防范方法"></a>防范方法</h3><ol>
<li><p><strong>同源策略：</strong> 保持网站的同源策略，限制页面只能加载来自相同域的资源，减少恶意站点的能力。<br> 同源策略主要由浏览器通过比较页面的来源（Origin）来判断。具体来说，同源策略检查的字段是页面的来源信息，即包含协议、域名和端口号的组合。</p>
<p> 在浏览器中，<code>Origin</code>头字段用于表示请求的来源。<code>Origin</code>头的值包含协议、域名和端口号。例如，一个<code>Origin</code>头可能是：</p>
 <pre class="line-numbers language-code" data-language="code"><code class="language-code">https:&#x2F;&#x2F;www.example.com:443<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p> 同源策略比较两个页面的<code>Origin</code>头，只有当它们的协议、域名和端口号完全相同时，这两个页面才被认为是同源的。</p>
<p> 如果页面之间的<code>Origin</code>头不同，浏览器会根据同源策略阻止一些敏感操作，如使用JavaScript在一个页面中访问另一个页面的DOM、Cookie或发起跨域的XMLHttpRequest请求。</p>
<p> 这种限制有助于减少跨站点攻击，如跨站请求伪造（CSRF）和跨站脚本攻击（XSS），提高了用户的安全性和隐私保护。如果需要实现跨域操作，可以使用CORS（Cross-Origin Resource Sharing）等机制进行授权和访问控制。</p>
</li>
<li><p><strong>CSRF令牌：</strong> 在用户与服务器之间引入CSRF令牌，确保每个请求都包含一个仅服务器能够验证的唯一标识符。</p>
</li>
<li><p><strong>双重提交Cookie：</strong> 在用户的cookie中设置一个随机的令牌，并将该令牌作为表单字段和cookie的一部分一同提交。</p>
</li>
<li><p><strong>Referer检查：</strong> 服务器可以检查请求的Referer头部，确保请求是从合法的网站发起的。</p>
</li>
<li><p><strong>自定义Header：</strong> 在请求中使用自定义的HTTP头部，只有合法的请求才会包含这个头部。</p>
</li>
<li><p><strong>限制敏感操作：</strong> 敏感操作（如修改密码、转账等）应该要求用户重新验证身份，例如输入密码。</p>
</li>
<li><p><strong>使用SameSite Cookie属性：</strong> 将Cookie的SameSite属性设置为Strict或Lax，以限制Cookie的发送，防止跨站请求。</p>
</li>
<li><p><strong>定期更改令牌：</strong> 如果令牌长时间有效，攻击者有更多机会截获和滥用。因此，定期更改令牌可以增加安全性。</p>
</li>
</ol>
<p>这些防范方法通常结合使用，以提高对CSRF攻击的抵抗力。网站开发者应当审查其应用程序的安全性，并在可能的情况下实施这些防范措施。</p>
]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>CSRF</tag>
      </tags>
  </entry>
  <entry>
    <title>GPG入门教程</title>
    <url>/post/961344b2.html</url>
    <content><![CDATA[<p>原文链接：<a href="http://www.ruanyifeng.com/blog/2013/07/gpg.html">http://www.ruanyifeng.com/blog/2013/07/gpg.html</a></p>
]]></content>
      <categories>
        <category>开发者手册</category>
      </categories>
      <tags>
        <tag>gpg</tag>
        <tag>rsa</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB 备份(mongodump)与恢复(mongorestore)</title>
    <url>/post/fd031881.html</url>
    <content><![CDATA[<h1 id="MongoDB-备份-mongodump-与恢复-mongorestore"><a href="#MongoDB-备份-mongodump-与恢复-mongorestore" class="headerlink" title="MongoDB 备份(mongodump)与恢复(mongorestore)"></a>MongoDB 备份(mongodump)与恢复(mongorestore)</h1><hr>
<h2 id="MongoDB数据备份"><a href="#MongoDB数据备份" class="headerlink" title="MongoDB数据备份"></a>MongoDB数据备份</h2><p>在Mongodb中我们使用mongodump命令来备份MongoDB数据。该命令可以导出所有数据到指定目录中。</p>
<p>mongodump命令可以通过参数指定导出的数据量级转存的服务器。</p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>mongodump命令脚本语法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token operator">></span>mongodump <span class="token operator">-</span>h dbhost <span class="token operator">-</span>d dbname <span class="token operator">-</span>o dbdirectory<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li><p>-h：</p>
<p>MongDB所在服务器地址，例如：127.0.0.1，当然也可以指定端口号：127.0.0.1:27017</p>
</li>
<li><p>-d：</p>
<p>需要备份的数据库实例，例如：test</p>
</li>
<li><p>-o：</p>
<p>备份的数据存放位置，例如：c:\data\dump，当然该目录需要提前建立，在备份完成后，系统自动在dump目录下建立一个test目录，这个目录里面存放该数据库实例的备份数据。</p>
</li>
</ul>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>在本地使用 27017 启动你的mongod服务。打开命令提示符窗口，进入MongoDB安装目录的bin目录输入命令mongodump:</p>
<pre class="line-numbers language-mongo" data-language="mongo"><code class="language-mongo">&gt;mongodump<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>执行以上命令后，客户端会连接到ip为 127.0.0.1 端口号为 27017 的MongoDB服务上，并备份所有数据到 bin&#x2F;dump&#x2F; 目录中。命令输出结果如下：</p>
<p>mongodump 命令可选参数列表如下所示：</p>
<table>
<thead>
<tr>
<th>语法</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td>mongodump –host HOST_NAME –port PORT_NUMBER</td>
<td>该命令将备份所有MongoDB数据</td>
<td>mongodump –host runoob.com –port 27017</td>
</tr>
<tr>
<td>mongodump –dbpath DB_PATH –out BACKUP_DIRECTORY</td>
<td></td>
<td>mongodump –dbpath &#x2F;data&#x2F;db&#x2F; –out &#x2F;data&#x2F;backup&#x2F;</td>
</tr>
<tr>
<td>mongodump –collection COLLECTION –db DB_NAME</td>
<td>该命令将备份指定数据库的集合。</td>
<td>mongodump –collection mycol –db test</td>
</tr>
</tbody></table>
<hr>
<h2 id="MongoDB数据恢复"><a href="#MongoDB数据恢复" class="headerlink" title="MongoDB数据恢复"></a>MongoDB数据恢复</h2><p>mongodb使用 mongorestore 命令来恢复备份的数据</p>
<h3 id="mongorestore命令脚本语法如下"><a href="#mongorestore命令脚本语法如下" class="headerlink" title="mongorestore命令脚本语法如下"></a>mongorestore命令脚本语法如下</h3><pre class="line-numbers language-mongo" data-language="mongo"><code class="language-mongo">&gt;mongorestore -h &lt;hostname&gt;&lt;:port&gt; -d dbname &lt;path&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li><p>–host &lt;:port&gt;, -h &lt;:port&gt;：</p>
<p>MongoDB所在服务器地址，默认为： localhost:27017</p>
</li>
<li><p>–db , -d ：</p>
<p>需要恢复的数据库实例，例如：test，当然这个名称也可以和备份时候的不一样，比如test2</p>
</li>
<li><p>–drop：</p>
<p>恢复的时候，先删除当前数据，然后恢复备份的数据。就是说，恢复后，备份后添加修改的数据都会被删除，慎用哦！</p>
</li>
<li><p><code>&lt;path&gt;</code>：</p>
<p>mongorestore 最后的一个参数，设置备份数据所在位置，例如：c:\data\dump\test。</p>
<p>你不能同时指定 <code>&lt;path&gt;</code> 和 –dir 选项，–dir也可以设置备份目录。</p>
</li>
<li><p>–dir：</p>
<p>指定备份的目录</p>
<p>你不能同时指定 <code>&lt;path&gt;</code> 和 –dir 选项。</p>
</li>
</ul>
<p>接下来我们执行以下命令:</p>
<pre class="line-numbers language-mongo" data-language="mongo"><code class="language-mongo">&gt;mongorestore<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>执行以上命令输出结果如下：</p>
]]></content>
      <categories>
        <category>mongodb</category>
      </categories>
      <tags>
        <tag>备份</tag>
        <tag>恢复</tag>
      </tags>
  </entry>
  <entry>
    <title>channel的死锁和panic总结</title>
    <url>/post/2d9efd01.html</url>
    <content><![CDATA[<h1 id="channel的死锁和panic总结"><a href="#channel的死锁和panic总结" class="headerlink" title="channel的死锁和panic总结"></a>channel的死锁和panic总结</h1><h2 id="1-channel的容量为0时"><a href="#1-channel的容量为0时" class="headerlink" title="1.channel的容量为0时"></a>1.channel的容量为0时</h2><h3 id="第一种情况"><a href="#第一种情况" class="headerlink" title="第一种情况"></a>第一种情况</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	c <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
     <span class="token comment">//一直接收不到消息发生阻塞，死锁</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">&lt;-</span>c<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="第二种情况"><a href="#第二种情况" class="headerlink" title="第二种情况"></a>第二种情况</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	c <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token comment">//发送消息的时候无人接收</span>
	c <span class="token operator">&lt;-</span> <span class="token number">1</span>
    <span class="token comment">//接收消息 的时候无人发送 死锁</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">&lt;-</span>c<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这是因为channel size为0，之前把1传进c中，但是没有接收方，等到&lt;-c时，已经接收不到数据传入channel，所以死锁</p>
<h3 id="第三种情况"><a href="#第三种情况" class="headerlink" title="第三种情况"></a>第三种情况</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   <span class="token comment">//没有初始化</span>
	<span class="token keyword">var</span> ch <span class="token keyword">chan</span> <span class="token builtin">int</span>
	<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		ch <span class="token operator">&lt;-</span> <span class="token number">1</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">&lt;-</span>ch<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="第四种情况"><a href="#第四种情况" class="headerlink" title="第四种情况"></a>第四种情况</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go">
<span class="token keyword">func</span> <span class="token function">demo5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> c <span class="token keyword">chan</span> <span class="token builtin">int</span> <span class="token comment">//定义类型</span>
    c <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span> <span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">//初始化</span>
    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
            c <span class="token operator">&lt;-</span> i <span class="token comment">//传入channel数据</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span>  v <span class="token operator">:=</span> <span class="token keyword">range</span> c<span class="token punctuation">&#123;</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>结果是死锁，应该将数据传进channel后，并没有关闭channel，for循环接收channel一直在监听，死锁</p>
<p>数据传进channel后，输入方主动关闭channel</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">demo5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> c <span class="token keyword">chan</span> <span class="token builtin">int</span>
    c <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span> <span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
            c <span class="token operator">&lt;-</span> i
        <span class="token punctuation">&#125;</span>
        <span class="token function">close</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token comment">//或者defer close(c)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span>  v <span class="token operator">:=</span> <span class="token keyword">range</span> c<span class="token punctuation">&#123;</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="当channel-关闭且缓冲区为0时"><a href="#当channel-关闭且缓冲区为0时" class="headerlink" title="当channel 关闭且缓冲区为0时"></a>当channel 关闭且缓冲区为0时</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">demo6</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    c <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token function">close</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">&lt;-</span>c<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//输出为0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="关闭未初始化的channel，会panic"><a href="#关闭未初始化的channel，会panic" class="headerlink" title="关闭未初始化的channel，会panic"></a>关闭未初始化的channel，会panic</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">demo6</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> c <span class="token keyword">chan</span> <span class="token builtin">int</span>
    <span class="token function">close</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="特殊情况"><a href="#特殊情况" class="headerlink" title="特殊情况"></a>特殊情况</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> ch <span class="token keyword">chan</span> <span class="token builtin">int</span>
    <span class="token comment">//func1</span>
    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        ch <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
        ch <span class="token operator">&lt;-</span> <span class="token number">1</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">//func2</span>
    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span>ch <span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
        <span class="token operator">&lt;-</span>ch
    <span class="token punctuation">&#125;</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span>
    c <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Tick</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
    <span class="token keyword">for</span> <span class="token keyword">range</span> c <span class="token punctuation">&#123;</span>
        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"#goroutines: %d\n"</span><span class="token punctuation">,</span> runtime<span class="token punctuation">.</span><span class="token function">NumGoroutine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//一段时间后输出结果为#goroutines: 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>结果中的goroutines分别为fun2 和 main函数，因为fun2没有初始化ch 所以会一直阻塞（func1中的初始化只在其所在的闭包函数中有效)</p>
<h3 id="注意点："><a href="#注意点：" class="headerlink" title="注意点："></a>注意点：</h3><ol>
<li>channel关闭后，再向channel中写入数据会panic</li>
<li>channel关闭后，再次关闭channel，会panic</li>
<li>关闭未初始化的channel，会panic</li>
<li>channel关闭后，可以继续从channel中接收数据</li>
<li>当channel 关闭且缓冲区为0时，继续从channel接收数据会接收到一个channel定义类型的零值</li>
<li>channel先进先出</li>
</ol>
<p>作者：coldwarm7<br>链接：<a href="https://www.jianshu.com/p/f25cdd72efce">https://www.jianshu.com/p/f25cdd72efce</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>clickhouse安装使用笔记</title>
    <url>/post/bca9151e.html</url>
    <content><![CDATA[<h1 id="clickhouse"><a href="#clickhouse" class="headerlink" title="clickhouse"></a>clickhouse</h1><h2 id="clickhouse入门"><a href="#clickhouse入门" class="headerlink" title="clickhouse入门"></a>clickhouse入门</h2><p>clickhouse 的特点：</p>
<ul>
<li><p>列式存储</p>
</li>
<li><p>DBMS的功能</p>
</li>
<li><p>多样化引擎 （merge_tree)</p>
</li>
<li><p>高吞吐写入能力</p>
</li>
<li><p>数据分区与线程级并行</p>
</li>
<li><p>性能-不适合用join查询</p>
</li>
</ul>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><strong>ClickHouse安装准备</strong></p>
<ul>
<li><p>确定防火墙关闭</p>
</li>
<li><p>Centos取消打开文件限制-&gt;用户可用文件数、用户可用最大进程数</p>
</li>
<li><p>安装依赖</p>
</li>
<li><p>CentOS取消SELINUX</p>
</li>
<li><p>查看selinux状态</p>
</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">getenforce<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>修改&#x2F;etc&#x2F;selinux&#x2F;config中的SELINUX&#x3D;disabled</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vim</span> /etc/selinux/config
<span class="token assign-left variable">SELINUX</span><span class="token operator">=</span>disabled<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>重启生效</p>
<p>如果不想关闭机器，临时生效，如果是关闭状态必须重启机器</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">setenforce <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p> 执行同步操作</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> /home/user/bin/xsync/etc/selinux/config<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><strong>下载安装包</strong></p>
<ul>
<li>client  </li>
<li>common-static </li>
<li>common-static-dbg</li>
<li>server</li>
</ul>
<p><strong>版本差异</strong></p>
<ul>
<li>20.5 支持多线程</li>
<li>20.6.3+ explain(执行计划)</li>
<li>20.8 -&gt; 实时同步mysql新引擎</li>
</ul>
<p><strong>安装命令</strong></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> clickhouse
<span class="token builtin class-name">cd</span> clickhouse
<span class="token function">sudo</span> <span class="token function">rpm</span> -ivh *.rpm
<span class="token comment">#输入密码</span>
enter password <span class="token keyword">for</span> default user:******
<span class="token comment">#确认安装状态</span>
<span class="token function">rpm</span> -qa<span class="token operator">|</span><span class="token function">grep</span> clickhouse
<span class="token comment">#显示有四个安装包则成功</span>
clickhouse-server.noarch
click-client.noarch
click-common-static-dbg
click-common-static<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="clickhouse操作"><a href="#clickhouse操作" class="headerlink" title="clickhouse操作"></a>clickhouse操作</h2><p>查看目录</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#bin目录</span>
<span class="token builtin class-name">cd</span> /usr/bin/
<span class="token comment">#conf目录</span>
<span class="token builtin class-name">cd</span> /etc/clickhouse-server/
<span class="token comment">#lib目录</span>
<span class="token builtin class-name">cd</span> /var/lib/clickhouse
<span class="token comment">#log目录</span>
<span class="token builtin class-name">cd</span> /var/log/clickhouse<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>查看配置</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#进入clickhouse文件夹</span>
<span class="token builtin class-name">cd</span> /etc/click-server/
<span class="token function">ls</span>
<span class="token comment">#config.xml 通用服务端配置，可以修改数据路径和日志路径</span>
config.d config.xml
<span class="token comment">#users.xml 用户一些参数配置</span>
users.d users.xml
 
<span class="token function">vim</span> config.xml 
查找listen,去掉注释，不对ip做限制
<span class="token operator">&lt;</span>lisetn_host<span class="token operator">></span>::<span class="token operator">&lt;</span>/listen_host<span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>clickhouse服务相关命令</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#启动server</span>
<span class="token comment">#linux 查看状态</span>
<span class="token function">sudo</span> systemctl status clickhouse-server
<span class="token comment">#clickhouse 自带命令查看状态</span>
<span class="token function">sudo</span> clickhouse status
<span class="token comment">#重启</span>
<span class="token function">sudo</span> clickhouse restart
<span class="token comment">#clickhouse-client 命令</span>
clickhouse-client -help
-m 分号换行
-h 链接远程
--query <span class="token string">"加上查询语句"</span> clickhouse-client --query <span class="token string">"show databases"</span>
-p 端口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>clickhouse数据库操作命令</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#链接clickhouse</span>
clickhouse -m
<span class="token comment">#查看库</span>
show databases<span class="token punctuation">;</span>
<span class="token comment"># 使用库</span>
use system<span class="token punctuation">;</span>
<span class="token comment">#查看表</span>
show tables<span class="token punctuation">;</span>
<span class="token comment">#查询</span>
<span class="token keyword">select</span> * from <span class="token function">users</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>clickhouse</category>
      </categories>
      <tags>
        <tag>clickhouse</tag>
      </tags>
  </entry>
  <entry>
    <title>clickhouse常用高阶函数操作</title>
    <url>/post/clickhouse%E5%B8%B8%E7%94%A8%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0%E6%93%8D%E4%BD%9C.html</url>
    <content><![CDATA[<p>原文地址<a href="https://www.cnblogs.com/weijiqian/p/14852999.html">点击跳转</a></p>
]]></content>
      <categories>
        <category>clickhouse</category>
      </categories>
      <tags>
        <tag>clickhouse</tag>
      </tags>
  </entry>
  <entry>
    <title>clickhouse数组函数操作</title>
    <url>/post/6fa57dd2.html</url>
    <content><![CDATA[<p>原文地址：<a href="https://www.cnblogs.com/traditional/p/15226704.html">点击跳转</a></p>
]]></content>
      <categories>
        <category>clickhouse</category>
      </categories>
      <tags>
        <tag>clickhouse</tag>
      </tags>
  </entry>
  <entry>
    <title>docker-compose 执行模板文件构建镜像</title>
    <url>/post/88a0a7e9.html</url>
    <content><![CDATA[<h1 id="docker-compose"><a href="#docker-compose" class="headerlink" title="docker-compose"></a>docker-compose</h1><p>执行模板文件构建镜像</p>
<pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker-compose -f docker-compose.build.yml build --no-cache<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker-compose</tag>
      </tags>
  </entry>
  <entry>
    <title>docker 保存镜像到本地和加载镜像</title>
    <url>/post/a1015970.html</url>
    <content><![CDATA[<h1 id="docker-保存镜像到本地和加载镜像"><a href="#docker-保存镜像到本地和加载镜像" class="headerlink" title="docker 保存镜像到本地和加载镜像"></a>docker 保存镜像到本地和加载镜像</h1><h2 id="导出docker镜像，到linux本地"><a href="#导出docker镜像，到linux本地" class="headerlink" title="导出docker镜像，到linux本地"></a>导出docker镜像，到linux本地</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> save -o   指定地址和文件名   镜像名 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>例子：<br>把名字为test，版本为4.0的docker镜像，保存到&#x2F;data&#x2F;export目录下，保存名字和格式为test.tar<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> save -o /data/export/test.tar test:4.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ul>
<h2 id="加载镜像文件"><a href="#加载镜像文件" class="headerlink" title="加载镜像文件"></a>加载镜像文件</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> load <span class="token operator">&lt;</span> 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>docker 拉取指定平台架构的镜像</title>
    <url>/post/bd1646ec.html</url>
    <content><![CDATA[<h1 id="docker-拉取指定平台架构的镜像"><a href="#docker-拉取指定平台架构的镜像" class="headerlink" title="docker 拉取指定平台架构的镜像"></a>docker 拉取指定平台架构的镜像</h1><p>有时候我们需要拉取指定平台架构的镜像但是我们又没有对应架构的服务器和硬件的时候：<br>比如我们需要拉取一个arm64的node镜像，首先进入docker hub 搜索node镜像<br><img src="/upload/2022/03/image-f8364fe234a64afe9a6c1d20ee65a75e.png" alt="image.png"><br>复制digest<br><img src="/upload/2022/03/image-38e509972a8f4187982b3a5922ff0072.png" alt="image.png"><br>拉取对应版本和对应架构的镜像</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> pull nginx:latest@sha256:3df2ee4220cd7ce126d98cad124c93ed81ea58ee050400ec3c3bca3b553d5448<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>在DOCKERFILE文件里面</p>
<pre class="line-numbers language-docker" data-language="docker"><code class="language-docker"><span class="token instruction"><span class="token keyword">FROM</span> nginx:latest@sha256:3df2ee4220cd7ce126d98cad124c93ed81ea58ee050400ec3c3bca3b553d5448</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>成功拉取</p>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>docker 设置镜像源</title>
    <url>/post/e7ddd621.html</url>
    <content><![CDATA[<h2 id="配置镜像源"><a href="#配置镜像源" class="headerlink" title="配置镜像源"></a>配置镜像源</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> /etc/docker/daemon.json

<span class="token comment"># 内容如下：</span>
<span class="token punctuation">&#123;</span>
  <span class="token string">"registry-mirrors"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>
    <span class="token string">"https://xx4bwyg2.mirror.aliyuncs.com"</span>,
    <span class="token string">"http://f1361db2.m.daocloud.io"</span>,
    <span class="token string">"https://registry.docker-cn.com"</span>,
    <span class="token string">"http://hub-mirror.c.163.com"</span>,
    <span class="token string">"https://docker.mirrors.ustc.edu.cn"</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

<span class="token comment"># 退出并保存</span>
:wq

<span class="token comment"># 使配置生效</span>
systemctl daemon-reload

<span class="token comment"># 重启Docker</span>
systemctl restart <span class="token function">docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>git add 暂存</title>
    <url>/post/e204e3f8.html</url>
    <content><![CDATA[<h1 id="add命令"><a href="#add命令" class="headerlink" title="add命令"></a>add命令</h1><h2 id="git-add-命令可将该文件添加到暂存区。"><a href="#git-add-命令可将该文件添加到暂存区。" class="headerlink" title="git add 命令可将该文件添加到暂存区。"></a>git add 命令可将该文件添加到暂存区。</h2><p>添加一个或多个文件到暂存区：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">add</span> <span class="token punctuation">[</span>fle1<span class="token punctuation">]</span> <span class="token punctuation">[</span>file2<span class="token punctuation">]</span> <span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>添加指定目录到暂存区，包括子目录：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">add</span> <span class="token punctuation">[</span>dir<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>添加当前目录下的所有文件到暂存区：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>add</tag>
      </tags>
  </entry>
  <entry>
    <title>git 标签</title>
    <url>/post/9cbf95f7.html</url>
    <content><![CDATA[<h1 id="git-tag"><a href="#git-tag" class="headerlink" title="git tag"></a>git tag</h1><h2 id="打标签"><a href="#打标签" class="headerlink" title="打标签"></a>打标签</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> tag -a v1.2.0 -m <span class="token string">"new version"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="显示标签以及备注"><a href="#显示标签以及备注" class="headerlink" title="显示标签以及备注"></a>显示标签以及备注</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> tag -n<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="实现标签以及备注，按照打标签的时间排序"><a href="#实现标签以及备注，按照打标签的时间排序" class="headerlink" title="实现标签以及备注，按照打标签的时间排序"></a>实现标签以及备注，按照打标签的时间排序</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> tag -n --sort<span class="token operator">=</span>taggerdate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>–sort&#x3D;key</p>
<p>关于key的值可以参考 <a href="https://git-scm.com/docs/git-for-each-ref">https://git-scm.com/docs/git-for-each-ref</a></p>
<h2 id="同时有时间、tag、备注使用以下命令"><a href="#同时有时间、tag、备注使用以下命令" class="headerlink" title="同时有时间、tag、备注使用以下命令"></a>同时有时间、tag、备注使用以下命令</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> for-each-ref --sort<span class="token operator">=</span>taggerdate --format <span class="token string">'%(refname:short) %(taggerdate:short) %(subject)'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="对某个版本进行补打标签，commitId-只要填入前7位即可"><a href="#对某个版本进行补打标签，commitId-只要填入前7位即可" class="headerlink" title="对某个版本进行补打标签，commitId 只要填入前7位即可"></a>对某个版本进行补打标签，commitId 只要填入前7位即可</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> tag -a v1.2 423445a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="删除标签，并不会删除版本，只是删除标签"><a href="#删除标签，并不会删除版本，只是删除标签" class="headerlink" title="删除标签，并不会删除版本，只是删除标签"></a>删除标签，并不会删除版本，只是删除标签</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> tag -d v1.2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="推送标签"><a href="#推送标签" class="headerlink" title="推送标签"></a>推送标签</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> push origin master --tags<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>tag</tag>
        <tag>标签</tag>
      </tags>
  </entry>
  <entry>
    <title>git 报错refusing to merge unrelated histories，强制提交</title>
    <url>/post/a5058aec.html</url>
    <content><![CDATA[<p>拉取代码或者推送代码报错</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">refusing to merge unrelated histories<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>解决：<br>方法一: 允许不相关历史提交，并强制合并</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> pull origin master --allow-unrelated-histories<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>方法二： 强制提交</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> push --force origin master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git 文件状态 、status</title>
    <url>/post/56d54cc1.html</url>
    <content><![CDATA[<h1 id="git-status命令"><a href="#git-status命令" class="headerlink" title="git status命令"></a>git status命令</h1><p>查看文件更改状态</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> status<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>带文件状态码查看</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> status -s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li><p><strong>A</strong>: 你本地新增的文件（服务器上没有）.</p>
</li>
<li><p><strong>C</strong>: 文件的一个新拷贝.</p>
</li>
<li><p><strong>D</strong>: 你本地删除的文件（服务器上还在）.</p>
</li>
<li><p><strong>M</strong>: 文件的内容或者mode被修改了.</p>
</li>
<li><p><strong>R</strong>: 文件名被修改了。</p>
</li>
<li><p><strong>T</strong>: 文件的类型被修改了。</p>
</li>
<li><p><strong>U</strong>: 文件没有被合并(你需要完成合并才能进行提交)。</p>
</li>
<li><p><strong>X</strong>: 未知状态(很可能是遇到git的bug了，你可以向git提交bug report)</p>
</li>
<li><p>**?**：未被git进行管理，可以使用git add file1把file1添加进git能被git所进行管理</p>
</li>
</ul>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>文件</tag>
        <tag>status</tag>
      </tags>
  </entry>
  <entry>
    <title>git 查看提交历史记录</title>
    <url>/post/b85e5b1d.html</url>
    <content><![CDATA[<h1 id="查看历史"><a href="#查看历史" class="headerlink" title="查看历史"></a>查看历史</h1><h2 id="查看所有提交历史记录"><a href="#查看所有提交历史记录" class="headerlink" title="查看所有提交历史记录"></a>查看所有提交历史记录</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>–oneline 查看历史记录简洁版本</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> log --oneline<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="查看指定文件的修改记录"><a href="#查看指定文件的修改记录" class="headerlink" title="查看指定文件的修改记录"></a>查看指定文件的修改记录</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> blame <span class="token operator">&lt;</span>file<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>history</tag>
        <tag>log</tag>
      </tags>
  </entry>
  <entry>
    <title>git 设置ssh 代理</title>
    <url>/post/a8f1a3f0.html</url>
    <content><![CDATA[<p>配置文件，如果不存在则自行创建一个</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> ~<span class="token punctuation">\</span>.ssh<span class="token punctuation">\</span>config<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>增加内容,端口号设置socks端口号</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ProxyCommand connect -S <span class="token number">127.0</span>.0.1:10808 -a none %h %p

Host github.com
  User <span class="token function">git</span>
  Port <span class="token number">22</span>
  Hostname github.com
  <span class="token comment"># 注意修改路径为你的路径</span>
  IdentityFile <span class="token string">"~\.ssh\id_rsa"</span>
  TCPKeepAlive <span class="token function">yes</span>

Host ssh.github.com
  User <span class="token function">git</span>
  Port <span class="token number">443</span>
  Hostname ssh.github.com
  <span class="token comment"># 注意修改路径为你的路径</span>
  IdentityFile <span class="token string">"~\.ssh\id_rsa"</span>
  TCPKeepAlive <span class="token function">yes</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>代理</tag>
      </tags>
  </entry>
  <entry>
    <title>git 配置http代理</title>
    <url>/post/34f1116b.html</url>
    <content><![CDATA[<p>设置代理</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --global https.proxy http://127.0.0.1:1080  
<span class="token function">git</span> config --global https.proxy https://127.0.0.1:1080<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>取消代理</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --global --unset http.proxy
<span class="token function">git</span> config --global --unset https.proxy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>代理</tag>
      </tags>
  </entry>
  <entry>
    <title>git 配置用户名邮箱</title>
    <url>/post/98c9ab4f.html</url>
    <content><![CDATA[<h2 id="git全局用户名邮箱配置"><a href="#git全局用户名邮箱配置" class="headerlink" title="git全局用户名邮箱配置"></a>git全局用户名邮箱配置</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --global user.name  <span class="token string">"username"</span>  
<span class="token function">git</span> config --global user.email  <span class="token string">"email"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h2 id="git局部用户名邮箱配置"><a href="#git局部用户名邮箱配置" class="headerlink" title="git局部用户名邮箱配置"></a>git局部用户名邮箱配置</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config  user.name  <span class="token string">"username"</span>  
<span class="token function">git</span> config  user.email  <span class="token string">"email"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h2 id="修改已有配置信息"><a href="#修改已有配置信息" class="headerlink" title="修改已有配置信息"></a>修改已有配置信息</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --replace-all user.name <span class="token string">"name"</span>

<span class="token function">git</span> config --replace-all user.email <span class="token string">"123@qq.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="注意：局部变量覆盖全局变量！！！"><a href="#注意：局部变量覆盖全局变量！！！" class="headerlink" title="注意：局部变量覆盖全局变量！！！"></a>注意：局部变量覆盖全局变量！！！</h3>]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>go mod tidy 报错timeout</title>
    <url>/post/394fab29.html</url>
    <content><![CDATA[<h1 id="go-mod-tidy-报错timeout"><a href="#go-mod-tidy-报错timeout" class="headerlink" title="go mod tidy 报错timeout"></a>go mod tidy 报错timeout</h1><p>当我们设置了GOPROXY代理之后</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go <span class="token function">env</span> -w <span class="token assign-left variable">GOPROXY</span><span class="token operator">=</span>https://goproxy.io,direct<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>或者</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go <span class="token function">env</span> -w <span class="token assign-left variable">GOPROXY</span><span class="token operator">=</span>https://goproxy.cn,direct<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>执行 go mod tidy 命令报错</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go mod tidy
github.com/spf13/viper: github.com/spf13/viper@v1.11.0: verifying module: github.com/spf13/viper@v1.11.0: Get <span class="token string">"https://sum.golang.org/lookup/github.com/spf13/viper@v1.11.0"</span><span class="token builtin class-name">:</span> dial tcp <span class="token number">142.251</span>.42.241:443: i/o <span class="token function">timeout</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>报错是因为更改了GOPROXY 导致校验不通过<br>解决办法<br>1.关闭GOSUMDB 校验</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go <span class="token function">env</span> -w <span class="token assign-left variable">GOSUMDB</span><span class="token operator">=</span>off<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>2.设置另一个国内可用的sum验证服务</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go <span class="token function">env</span> -w <span class="token assign-left variable">GOSUMDB</span><span class="token operator">=</span><span class="token string">"sum.golang.google.cn"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>golang AES算法 CBC加密</title>
    <url>/post/3c90a07d.html</url>
    <content><![CDATA[<pre class="line-numbers language-golang" data-language="golang"><code class="language-golang">package aes

import (
	&quot;bytes&quot;
	&quot;crypto&#x2F;aes&quot;
	&quot;crypto&#x2F;cipher&quot;
	&quot;encoding&#x2F;base64&quot;
	&quot;errors&quot;
)

&#x2F;&#x2F;pkcs7Padding 填充
func pkcs7Padding(data []byte, blockSize int) []byte &#123;
	&#x2F;&#x2F;判断缺少几位长度。最少1，最多 blockSize
	padding :&#x3D; blockSize - len(data)%blockSize
	&#x2F;&#x2F;补足位数。把切片[]byte&#123;byte(padding)&#125;复制padding个
	padText :&#x3D; bytes.Repeat([]byte&#123;byte(padding)&#125;, padding)
	return append(data, padText...)
&#125;

&#x2F;&#x2F;pkcs7UnPadding 填充的反向操作
func pkcs7UnPadding(data []byte) ([]byte, error) &#123;
	length :&#x3D; len(data)
	if length &#x3D;&#x3D; 0 &#123;
		return nil, errors.New(&quot;加密字符串错误！&quot;)
	&#125;
	&#x2F;&#x2F;获取填充的个数
	unPadding :&#x3D; int(data[length-1])
	return data[:(length - unPadding)], nil
&#125;

&#x2F;&#x2F;AesEncrypt 加密
func AesEncrypt(data []byte, key []byte) ([]byte, error) &#123;
	&#x2F;&#x2F;创建加密实例
	block, err :&#x3D; aes.NewCipher(key)
	if err !&#x3D; nil &#123;
		return nil, err
	&#125;
	&#x2F;&#x2F;判断加密快的大小
	blockSize :&#x3D; block.BlockSize()
	&#x2F;&#x2F;填充
	encryptBytes :&#x3D; pkcs7Padding(data, blockSize)
	&#x2F;&#x2F;初始化加密数据接收切片
	crypted :&#x3D; make([]byte, len(encryptBytes))
	&#x2F;&#x2F;使用cbc加密模式
	blockMode :&#x3D; cipher.NewCBCEncrypter(block, key[:blockSize])
	&#x2F;&#x2F;执行加密
	blockMode.CryptBlocks(crypted, encryptBytes)
	return crypted, nil
&#125;

&#x2F;&#x2F;AesDecrypt 解密
func AesDecrypt(data []byte, key []byte) ([]byte, error) &#123;
	&#x2F;&#x2F;创建实例
	block, err :&#x3D; aes.NewCipher(key)
	if err !&#x3D; nil &#123;
		return nil, err
	&#125;
	&#x2F;&#x2F;获取块的大小
	blockSize :&#x3D; block.BlockSize()
	&#x2F;&#x2F;使用cbc
	blockMode :&#x3D; cipher.NewCBCDecrypter(block, key[:blockSize])
	&#x2F;&#x2F;初始化解密数据接收切片
	crypted :&#x3D; make([]byte, len(data))
	&#x2F;&#x2F;执行解密
	blockMode.CryptBlocks(crypted, data)
	&#x2F;&#x2F;去除填充
	crypted, err &#x3D; pkcs7UnPadding(crypted)
	if err !&#x3D; nil &#123;
		return nil, err
	&#125;
	return crypted, nil
&#125;

&#x2F;&#x2F;EncryptByAes Aes加密 后 base64 再加
func EncryptByAes(data, key []byte) (string, error) &#123;
	res, err :&#x3D; AesEncrypt(data, key)
	if err !&#x3D; nil &#123;
		return &quot;&quot;, err
	&#125;
	return base64.StdEncoding.EncodeToString(res), nil
&#125;

&#x2F;&#x2F;DecryptByAes Aes 解密
func DecryptByAes(data, key string) ([]byte, error) &#123;
	dataByte, err :&#x3D; base64.StdEncoding.DecodeString(data)
	if err !&#x3D; nil &#123;
		return nil, err
	&#125;
	return AesDecrypt(dataByte, []byte(key))
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>golang</tag>
        <tag>aes</tag>
        <tag>cbc</tag>
      </tags>
  </entry>
  <entry>
    <title>golang AES算法 ECB模式加密</title>
    <url>/post/d7d262c7.html</url>
    <content><![CDATA[<pre class="line-numbers language-golang" data-language="golang"><code class="language-golang">package aes

import (
	&quot;bytes&quot;
	&quot;crypto&#x2F;aes&quot;
)

func EcbDecrypt(data, key []byte) ([]byte, error) &#123;
	block, err :&#x3D; aes.NewCipher(key)
	if err !&#x3D; nil &#123;
		return nil, err
	&#125;
	decrypted :&#x3D; make([]byte, len(data))
	size :&#x3D; block.BlockSize()

	for bs, be :&#x3D; 0, size; bs &lt; len(data); bs, be &#x3D; bs+size, be+size &#123;
		block.Decrypt(decrypted[bs:be], data[bs:be])
	&#125;

	return PKCS5UnPadding(decrypted), nil
&#125;

func EcbEncrypt(data, key []byte) ([]byte, error) &#123;
	block, err :&#x3D; aes.NewCipher(key)
	if err !&#x3D; nil &#123;
		return nil, err
	&#125;
	data &#x3D; PKCS5Padding(data, block.BlockSize())
	decrypted :&#x3D; make([]byte, len(data))
	size :&#x3D; block.BlockSize()

	for bs, be :&#x3D; 0, size; bs &lt; len(data); bs, be &#x3D; bs+size, be+size &#123;
		block.Encrypt(decrypted[bs:be], data[bs:be])
	&#125;
	return decrypted, nil
&#125;
func PKCS5Padding(ciphertext []byte, blockSize int) []byte &#123;
	padding :&#x3D; blockSize - len(ciphertext)%blockSize
	padtext :&#x3D; bytes.Repeat([]byte&#123;byte(padding)&#125;, padding)
	return append(ciphertext, padtext...)
&#125;

func PKCS5UnPadding(origData []byte) []byte &#123;
	length :&#x3D; len(origData)
	&#x2F;&#x2F; 去掉最后一个字节 unpadding 次
	unpadding :&#x3D; int(origData[length-1])
	return origData[:(length - unpadding)]
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>golang</tag>
        <tag>aes</tag>
        <tag>ecb</tag>
      </tags>
  </entry>
  <entry>
    <title>golang 查看依赖树</title>
    <url>/post/2ce534a5.html</url>
    <content><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go get -u github.com/PaulXu-cn/go-mod-graph-chart/gmchart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>检查安装情况</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gmchart --help

Usage of ~<span class="token punctuation">\</span>go<span class="token punctuation">\</span>bin<span class="token punctuation">\</span>gmchart:
  -debug int
        is debug model
  -keep int
        start http server not <span class="token builtin class-name">exit</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>进入项目，执行命令</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go mod graph <span class="token operator">|</span> gmchart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>golang 获取系统相关信息</title>
    <url>/post/46454e21.html</url>
    <content><![CDATA[<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">"os"</span>
    <span class="token string">"runtime"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">`系统类型：`</span><span class="token punctuation">,</span> runtime<span class="token punctuation">.</span>GOOS<span class="token punctuation">)</span>

    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">`系统架构：`</span><span class="token punctuation">,</span> runtime<span class="token punctuation">.</span>GOARCH<span class="token punctuation">)</span>

    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">`CPU 核数：`</span><span class="token punctuation">,</span> runtime<span class="token punctuation">.</span><span class="token function">GOMAXPROCS</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    name<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Hostname</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
        <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">`电脑名称：`</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>golang 使用pprof 进行性能分析</title>
    <url>/post/afd7e5bb.html</url>
    <content><![CDATA[<h1 id="golang-性能分析"><a href="#golang-性能分析" class="headerlink" title="golang 性能分析"></a>golang 性能分析</h1><h2 id="性能分析web地址"><a href="#性能分析web地址" class="headerlink" title="性能分析web地址"></a>性能分析web地址</h2><p><a href="http://ip:port/debug/pprof/">http://ip:port/debug/pprof/</a></p>
<span id="more"></span>
<h2 id="go-tool-命令"><a href="#go-tool-命令" class="headerlink" title="go tool 命令"></a>go tool 命令</h2><p>top 排序</p>
<p>list 列出调用栈</p>
<h2 id="内存分析"><a href="#内存分析" class="headerlink" title="内存分析"></a>内存分析</h2><ul>
<li>-insue_space 生成当前程序内存占用图</li>
<li>–alloc_space 生成历史内存占用图</li>
</ul>
<h3 id="命令行生成svg图片分析"><a href="#命令行生成svg图片分析" class="headerlink" title="命令行生成svg图片分析"></a>命令行生成svg图片分析</h3><ul>
<li>go tool pprof -inuse_space -cum -svg <a href="http://ip:port/debug/pprof/heap">http://ip:port/debug/pprof/heap</a> &gt; heap_inuse1.svg</li>
</ul>
<h2 id="cpu占用分析"><a href="#cpu占用分析" class="headerlink" title="cpu占用分析"></a>cpu占用分析</h2><h3 id="命令行分析"><a href="#命令行分析" class="headerlink" title="命令行分析"></a>命令行分析</h3><ul>
<li>go tool pprof im_gate cpu.prof # im_gate 是程序名字</li>
</ul>
<h3 id="生成图片分析"><a href="#生成图片分析" class="headerlink" title="生成图片分析"></a>生成图片分析</h3><ul>
<li>go tool pprof -png <a href="http://127.0.0.1:8888/debug/pprof/profile">http://127.0.0.1:8888/debug/pprof/profile</a> &gt; cpu.png</li>
</ul>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>golang</tag>
        <tag>pprof</tag>
      </tags>
  </entry>
  <entry>
    <title>golang单元测试</title>
    <url>/post/30d557c5.html</url>
    <content><![CDATA[<h1 id="golang单元测试"><a href="#golang单元测试" class="headerlink" title="golang单元测试"></a>golang单元测试</h1><p>golang单元测试文件以_test.go 结尾</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">go</span><span class="token operator">/</span>
 <span class="token operator">-</span>user_test<span class="token punctuation">.</span><span class="token keyword">go</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ul>
<li>测试用例名称一般命名为Test加上待测试的方法名</li>
<li>测试的参数有且只有一个，一般是 t *testing.T</li>
<li>基准测试的参数是 *testing.B  TestMain的参数是 *testing.M类型</li>
</ul>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">TestUser_FindByName</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">//initDB()</span>
	<span class="token comment">//u := User&#123;&#125;</span>
	t<span class="token punctuation">.</span><span class="token function">Logf</span><span class="token punctuation">(</span><span class="token string">"sdkfjsdkfjds"</span><span class="token punctuation">)</span>
	<span class="token comment">//u.FindByName(DB, "sdk").Find()</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">TestUser_CalculateAge</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">initDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token function">CreateUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">var</span> users <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
		ID     <span class="token builtin">uint</span>   <span class="token string">`json:"id"`</span>
		Name   <span class="token builtin">string</span> <span class="token string">`json:"name"`</span>
		AgeNow <span class="token builtin">int</span>    <span class="token string">`json:"age_now"`</span>
	<span class="token punctuation">&#125;</span>
	err <span class="token operator">:=</span> DB<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>User<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span><span class="token string">"id,name,CalculateAge() as age_now"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>users<span class="token punctuation">)</span><span class="token punctuation">.</span>Error
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		t<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>运行测试，该package目录下的所有测试用例都会运行</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go <span class="token builtin class-name">test</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>-v 显示每个参数的测试结果</li>
<li>-cover 显示覆盖结果</li>
</ul>
<p>如果只想运行其中一个用例</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go <span class="token builtin class-name">test</span> -v -run TestUser_FindByName<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>golang 字符串、json、map之间转换</title>
    <url>/post/9fdcaa40.html</url>
    <content><![CDATA[<h1 id="golang-字符串、json、map之间的转换"><a href="#golang-字符串、json、map之间的转换" class="headerlink" title="golang 字符串、json、map之间的转换"></a>golang 字符串、json、map之间的转换</h1><span id="more"></span>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">import</span> <span class="token punctuation">(</span>
<span class="token string">"encoding/json"</span>
<span class="token string">"fmt"</span>
<span class="token string">"os"</span>
<span class="token punctuation">)</span>

<span class="token keyword">type</span> ConfigStruct <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
   Host              <span class="token builtin">string</span>   <span class="token string">`json:"host"`</span>
   Port              <span class="token builtin">int</span>      <span class="token string">`json:"port"`</span>
   AnalyticsFile     <span class="token builtin">string</span>   <span class="token string">`json:"analytics_file"`</span>
   StaticFileVersion <span class="token builtin">int</span>      <span class="token string">`json:"static_file_version"`</span>
   StaticDir         <span class="token builtin">string</span>   <span class="token string">`json:"static_dir"`</span>
   TemplatesDir      <span class="token builtin">string</span>   <span class="token string">`json:"templates_dir"`</span>
   SerTcpSocketHost  <span class="token builtin">string</span>   <span class="token string">`json:"serTcpSocketHost"`</span>
   SerTcpSocketPort  <span class="token builtin">int</span>      <span class="token string">`json:"serTcpSocketPort"`</span>
   Fruits            <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token string">`json:"fruits"`</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">type</span> Other <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
   SerTcpSocketHost <span class="token builtin">string</span>   <span class="token string">`json:"serTcpSocketHost"`</span>
   SerTcpSocketPort <span class="token builtin">int</span>      <span class="token string">`json:"serTcpSocketPort"`</span>
   Fruits           <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token string">`json:"fruits"`</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   jsonStr <span class="token operator">:=</span> <span class="token string">`&#123;"host": "http://localhost:9090","port": 9090,"analytics_file": "","static_file_version": 1,"static_dir": "E:/Project/goTest/src/","templates_dir": "E:/Project/goTest/src/templates/","serTcpSocketHost": ":12340","serTcpSocketPort": 12340,"fruits": ["apple", "peach"]&#125;`</span>

   <span class="token comment">//json str 转map</span>
   <span class="token keyword">var</span> dat <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
   <span class="token keyword">if</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>jsonStr<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>dat<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"==============json str 转map======================="</span><span class="token punctuation">)</span>
      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>dat<span class="token punctuation">)</span>
      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>dat<span class="token punctuation">[</span><span class="token string">"host"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
   <span class="token punctuation">&#125;</span>

   <span class="token comment">//json str 转struct</span>
   <span class="token keyword">var</span> config ConfigStruct
   <span class="token keyword">if</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>jsonStr<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"================json str 转struct=="</span><span class="token punctuation">)</span>
      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>
      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>Host<span class="token punctuation">)</span>
   <span class="token punctuation">&#125;</span>

   <span class="token comment">//json str 转struct(部份字段)</span>
   <span class="token keyword">var</span> part Other
   <span class="token keyword">if</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>jsonStr<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>part<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"================json str 转struct=="</span><span class="token punctuation">)</span>
      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>part<span class="token punctuation">)</span>
      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>part<span class="token punctuation">.</span>SerTcpSocketPort<span class="token punctuation">)</span>
   <span class="token punctuation">&#125;</span>

   <span class="token comment">//struct 到json str</span>
   <span class="token keyword">if</span> b<span class="token punctuation">,</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"================struct 到json str=="</span><span class="token punctuation">)</span>
      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>
   <span class="token punctuation">&#125;</span>

   <span class="token comment">//map 到json str</span>
   fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"================map 到json str====================="</span><span class="token punctuation">)</span>
   enc <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">NewEncoder</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stdout<span class="token punctuation">)</span>
   enc<span class="token punctuation">.</span><span class="token function">Encode</span><span class="token punctuation">(</span>dat<span class="token punctuation">)</span>

   <span class="token comment">//array 到 json str</span>
   arr <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"python"</span><span class="token punctuation">,</span> <span class="token string">"golang"</span><span class="token punctuation">,</span> <span class="token string">"base"</span><span class="token punctuation">,</span> <span class="token string">"peach"</span><span class="token punctuation">,</span> <span class="token string">"pear"</span><span class="token punctuation">&#125;</span>
   lang<span class="token punctuation">,</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>
   <span class="token keyword">if</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"================array 到 json str=="</span><span class="token punctuation">)</span>
      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>lang<span class="token punctuation">)</span><span class="token punctuation">)</span>
   <span class="token punctuation">&#125;</span>

   <span class="token comment">//json 到 []string</span>
   <span class="token keyword">var</span> wo <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>
   <span class="token keyword">if</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span>lang<span class="token punctuation">,</span> <span class="token operator">&amp;</span>wo<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"================json 到 []string=="</span><span class="token punctuation">)</span>
      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>wo<span class="token punctuation">)</span>
   <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>字符串</tag>
        <tag>json</tag>
        <tag>map</tag>
      </tags>
  </entry>
  <entry>
    <title>golang cmd命令执行</title>
    <url>/post/48709b05.html</url>
    <content><![CDATA[<p>1.golang cmd命令执行<br>（１．）执行命令并获取执行结果</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"fmt"</span>
	<span class="token string">"os/exec"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">// 通过exec.Command函数执行命令或者shell</span>
	<span class="token comment">// 第一个参数是命令路径，当然如果PATH路径可以搜索到命令，可以不用输入完整的路径</span>
	<span class="token comment">// 第二到第N个参数是命令的参数</span>
	<span class="token comment">// 下面语句等价于执行命令: ls -l /var/</span>
	cmd <span class="token operator">:=</span> exec<span class="token punctuation">.</span><span class="token function">Command</span><span class="token punctuation">(</span><span class="token string">"/bin/ls"</span><span class="token punctuation">,</span> <span class="token string">"-l"</span><span class="token punctuation">,</span> <span class="token string">"/var/"</span><span class="token punctuation">)</span>
	<span class="token comment">// 执行命令，并返回结果</span>
	output<span class="token punctuation">,</span>err <span class="token operator">:=</span> cmd<span class="token punctuation">.</span><span class="token function">Output</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	<span class="token comment">// 因为结果是字节数组，需要转换成string</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>（２．）执行命令不返回结果</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"os/exec"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	cmd <span class="token operator">:=</span> exec<span class="token punctuation">.</span><span class="token function">Command</span><span class="token punctuation">(</span><span class="token string">"/bin/ls"</span><span class="token punctuation">,</span> <span class="token string">"-l"</span><span class="token punctuation">,</span> <span class="token string">"/var/"</span><span class="token punctuation">)</span>
	<span class="token comment">// 执行命令，返回命令是否执行成功</span>
	err <span class="token operator">:=</span> cmd<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token comment">// 命令执行失败</span>
		<span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>golang</tag>
        <tag>cmd</tag>
      </tags>
  </entry>
  <entry>
    <title>golang 换行读写</title>
    <url>/post/f906baad.html</url>
    <content><![CDATA[<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> utils

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"bufio"</span>
	<span class="token string">"bytes"</span>
	<span class="token string">"fmt"</span>
	<span class="token string">"io"</span>
	<span class="token string">"os"</span>
	<span class="token string">"strings"</span>
<span class="token punctuation">)</span>
<span class="token keyword">func</span> <span class="token function">ReadLines</span><span class="token punctuation">(</span>path <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>lines <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">var</span> <span class="token punctuation">(</span>
		file   <span class="token operator">*</span>os<span class="token punctuation">.</span>File
		part   <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span>
		prefix <span class="token builtin">bool</span>
	<span class="token punctuation">)</span>

	<span class="token keyword">if</span> file<span class="token punctuation">,</span> err <span class="token operator">=</span> os<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">&#125;</span>

	reader <span class="token operator">:=</span> bufio<span class="token punctuation">.</span><span class="token function">NewReader</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>
	buffer <span class="token operator">:=</span> bytes<span class="token punctuation">.</span><span class="token function">NewBuffer</span><span class="token punctuation">(</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

	<span class="token keyword">for</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> part<span class="token punctuation">,</span> prefix<span class="token punctuation">,</span> err <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">break</span>
		<span class="token punctuation">&#125;</span>
		buffer<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>part<span class="token punctuation">)</span>
		<span class="token keyword">if</span> <span class="token operator">!</span>prefix <span class="token punctuation">&#123;</span>
			lines <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>lines<span class="token punctuation">,</span> buffer<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
			buffer<span class="token punctuation">.</span><span class="token function">Reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span> err <span class="token operator">==</span> io<span class="token punctuation">.</span>EOF <span class="token punctuation">&#123;</span>
		err <span class="token operator">=</span> <span class="token boolean">nil</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">WriteLines</span><span class="token punctuation">(</span>lines <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> path <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">var</span> file <span class="token operator">*</span>os<span class="token punctuation">.</span>File

	<span class="token keyword">if</span> file<span class="token punctuation">,</span> err <span class="token operator">=</span> os<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">defer</span> file<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> elem <span class="token operator">:=</span> <span class="token keyword">range</span> lines <span class="token punctuation">&#123;</span>
		<span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> file<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span><span class="token function">TrimSpace</span><span class="token punctuation">(</span>elem<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
			<span class="token keyword">break</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>golang 操作redis</title>
    <url>/post/7e553d6e.html</url>
    <content><![CDATA[<p>golang操作redis库</p>
<span id="more"></span>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"context"</span>
	<span class="token string">"fmt"</span>
	<span class="token string">"github.com/go-redis/redis/v8"</span>
	<span class="token string">"log"</span>
<span class="token punctuation">)</span>

<span class="token keyword">var</span> rdb <span class="token operator">*</span>redis<span class="token punctuation">.</span>Client

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">OpenDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token function">SetKeyValue</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">,</span> <span class="token string">"value"</span><span class="token punctuation">)</span>
	v1<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">GetValueByValue</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"v1:"</span><span class="token punctuation">,</span> v1<span class="token punctuation">)</span>

	v2<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">GetValueByValue</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"v2:"</span><span class="token punctuation">,</span> v2<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">OpenDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	rdb <span class="token operator">=</span> redis<span class="token punctuation">.</span><span class="token function">NewClient</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>redis<span class="token punctuation">.</span>Options<span class="token punctuation">&#123;</span>
		Addr<span class="token punctuation">:</span>     <span class="token string">"localhost:6379"</span><span class="token punctuation">,</span>
		Password<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token comment">// no password set</span>
		DB<span class="token punctuation">:</span>       <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token comment">// use default DB</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">SetKeyValue</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	err <span class="token operator">:=</span> rdb<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">GetValueByValue</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	v<span class="token punctuation">,</span> err <span class="token operator">:=</span> rdb<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">,</span> err
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> v<span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span>

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>golang</tag>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>golang模板语法</title>
    <url>/post/51623379.html</url>
    <content><![CDATA[<h1 id="golang模板语法"><a href="#golang模板语法" class="headerlink" title="golang模板语法"></a>golang模板语法</h1><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"bytes"</span>
	<span class="token string">"encoding/json"</span>
	<span class="token string">"log"</span>
	<span class="token string">"text/template"</span>
<span class="token punctuation">)</span>

<span class="token keyword">type</span> UserInfo <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	Name  <span class="token builtin">string</span> <span class="token string">`json:"name"`</span>
	Age   <span class="token builtin">int</span>    <span class="token string">`json:"age"`</span>
	Class <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
		Name <span class="token builtin">string</span> <span class="token string">`json:"name"`</span>
	<span class="token punctuation">&#125;</span> <span class="token string">`json:"class"`</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">//通过对象获取变量值</span>
	a <span class="token operator">:=</span> <span class="token string">"my name is &#123;&#123;.Name&#125;&#125;"</span>
	user <span class="token operator">:=</span> UserInfo<span class="token punctuation">&#123;</span>
		Name<span class="token punctuation">:</span> <span class="token string">"li lei"</span><span class="token punctuation">,</span>
		Age<span class="token punctuation">:</span>  <span class="token number">18</span><span class="token punctuation">&#125;</span>
	tmpl<span class="token punctuation">,</span> err <span class="token operator">:=</span> template<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"log"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">&#125;</span>
	writer <span class="token operator">:=</span> <span class="token operator">&amp;</span>bytes<span class="token punctuation">.</span>Buffer<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
	<span class="token comment">//获取对象的变量值</span>
	err <span class="token operator">=</span> tmpl<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span>writer<span class="token punctuation">,</span> user<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">&#125;</span>
	<span class="token comment">//获取map里面的变量值</span>
	a <span class="token operator">=</span> <span class="token string">", age is &#123;&#123;.age&#125;&#125;"</span>
	tmpl<span class="token punctuation">,</span> err <span class="token operator">=</span> tmpl<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">var</span> m <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>any
	bs<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span>
	json<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span>bs<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span>
	err <span class="token operator">=</span> tmpl<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span>writer<span class="token punctuation">,</span> m<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">&#125;</span>
	<span class="token comment">//注册函数进去</span>
	funcs <span class="token operator">:=</span> template<span class="token punctuation">.</span>FuncMap<span class="token punctuation">&#123;</span>
		<span class="token string">"userinfo"</span><span class="token punctuation">:</span> <span class="token function">GetUserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#125;</span>
	a <span class="token operator">=</span> <span class="token string">", class is &#123;&#123;userinfo.Class.Name&#125;&#125;"</span>
	tmpl<span class="token punctuation">,</span> err <span class="token operator">=</span> tmpl<span class="token punctuation">.</span><span class="token function">Funcs</span><span class="token punctuation">(</span>funcs<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">&#125;</span>
	err <span class="token operator">=</span> tmpl<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span>writer<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">&#125;</span>
	log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span>writer<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">GetUserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>UserInfo <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>UserInfo <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token operator">&amp;</span>UserInfo<span class="token punctuation">&#123;</span>
			Name<span class="token punctuation">:</span> <span class="token string">"li lei"</span><span class="token punctuation">,</span>
			Age<span class="token punctuation">:</span>  <span class="token number">18</span><span class="token punctuation">,</span>
			Class<span class="token punctuation">:</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
				Name <span class="token builtin">string</span> <span class="token string">`json:"name"`</span>
			<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>Name<span class="token punctuation">:</span> <span class="token string">"五年级二班"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>输出：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">my name is li lei, age is <span class="token number">18</span>, class is 五年级二班<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>golang</tag>
        <tag>template</tag>
      </tags>
  </entry>
  <entry>
    <title>golang 用两个栈实现队列</title>
    <url>/post/26cc78f7.html</url>
    <content><![CDATA[<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main


<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"container/list"</span>
	<span class="token string">"fmt"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	c <span class="token operator">:=</span> <span class="token function">Constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	c<span class="token punctuation">.</span><span class="token function">AppendTail</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
	e <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">DeleteHead</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
	e <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">DeleteHead</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
	e <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">DeleteHead</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">type</span> CQueue <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	stack1<span class="token punctuation">,</span> stack2 <span class="token operator">*</span>list<span class="token punctuation">.</span>List
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">Constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> CQueue <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> CQueue<span class="token punctuation">&#123;</span>
		stack1<span class="token punctuation">:</span> list<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		stack2<span class="token punctuation">:</span> list<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>this <span class="token operator">*</span>CQueue<span class="token punctuation">)</span> <span class="token function">AppendTail</span><span class="token punctuation">(</span>value <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	this<span class="token punctuation">.</span>stack1<span class="token punctuation">.</span><span class="token function">PushBack</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>this <span class="token operator">*</span>CQueue<span class="token punctuation">)</span> <span class="token function">DeleteHead</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> this<span class="token punctuation">.</span>stack2<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">for</span> this<span class="token punctuation">.</span>stack1<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
			this<span class="token punctuation">.</span>stack2<span class="token punctuation">.</span><span class="token function">PushBack</span><span class="token punctuation">(</span>this<span class="token punctuation">.</span>stack1<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>this<span class="token punctuation">.</span>stack1<span class="token punctuation">.</span><span class="token function">Back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span> this<span class="token punctuation">.</span>stack2<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> this<span class="token punctuation">.</span>stack2<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>this<span class="token punctuation">.</span>stack2<span class="token punctuation">.</span><span class="token function">Back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/**
* Your CQueue object will be instantiated and called as such:
* obj := Constructor();
* obj.AppendTail(value);
* param_2 := obj.DeleteHead();
*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>golang私有仓库配置</title>
    <url>/post/3098b0d8.html</url>
    <content><![CDATA[<p>golang设置</p>
<pre class="line-numbers language-golang" data-language="golang"><code class="language-golang">go env -w GOPRIVATE&#x3D;&quot;gitlab.xxx.com&#x2F;xxxx&#x2F;*&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>git设置</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --global url.<span class="token string">"git@gitlab.xxxx.com:"</span>.insteadOf <span class="token string">"http://gitlab.xxxx.com/"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>golang远程调试</title>
    <url>/post/6a5d58b5.html</url>
    <content><![CDATA[<h1 id="golang远程调试"><a href="#golang远程调试" class="headerlink" title="golang远程调试"></a>golang远程调试</h1><h2 id="第一步：安装go"><a href="#第一步：安装go" class="headerlink" title="第一步：安装go"></a>第一步：安装go</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#下载go</span>
<span class="token function">wget</span> https://dl.google.com/go/go1.20.3.linux-amd64.tar.gz
<span class="token comment">#解压</span>
<span class="token function">tar</span> -xzf go1.20.3.linux-amd64.tar.gz
<span class="token comment">#移动解压的目录到/usr/local/src目录下</span>
<span class="token function">mv</span> go /usr/local/src
<span class="token comment">#配置环境变量</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span>:/usr/local/src/go/bin
<span class="token comment">#使profile配置立即生效</span>
<span class="token builtin class-name">source</span> /etc/profile
<span class="token comment">#查看go版本</span>
go version
<span class="token comment">#若显示 go version go1.20.3 linux/amd64 则成功</span>
<span class="token comment"># 查看环境变量</span>
go <span class="token function">env</span> 
<span class="token comment">#设置 goproxy</span>
go <span class="token function">env</span> -w <span class="token assign-left variable">GOPROXY</span><span class="token operator">=</span>https://goproxy.io,direct<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="第二步：安装dlv"><a href="#第二步：安装dlv" class="headerlink" title="第二步：安装dlv"></a>第二步：安装dlv</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go <span class="token function">install</span> github.com/go-delve/delve/cmd/dlv@latest
<span class="token comment">#移动dlv工具到bin目录下</span>
<span class="token function">mv</span> dlv /usr/local/src/go/bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h2 id="第三步-启动dlv-实例"><a href="#第三步-启动dlv-实例" class="headerlink" title="第三步 启动dlv 实例"></a>第三步 启动dlv 实例</h2><h3 id="1、编译运行程序"><a href="#1、编译运行程序" class="headerlink" title="1、编译运行程序"></a>1、编译运行程序</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#编译运行文件</span>
go build -gcflags<span class="token operator">=</span><span class="token string">'all -N -l'</span> main.go<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ul>
<li>-N:禁止编译器优化</li>
<li>-l:关闭内联结</li>
</ul>
<h3 id="2、dlv-attach"><a href="#2、dlv-attach" class="headerlink" title="2、dlv attach"></a>2、dlv attach</h3><p>这个相当于gdb -p 或者 gdb attach ，即跟踪一个正在运行的程序。这中用法也是很常见，对于一个后台程序，它已经运行很久了，此时你需要查看程序内部的一些状态，只能借助attach.</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dlv attach --headless --listen <span class="token string">":2345"</span> --log --api-version <span class="token number">2</span>  <span class="token number">4977</span> <span class="token comment">## 后面的进程的ID</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="3、dlv直接运行"><a href="#3、dlv直接运行" class="headerlink" title="3、dlv直接运行"></a>3、dlv直接运行</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dlv --listen<span class="token operator">=</span>:2345 --headless<span class="token operator">=</span>true --api-version<span class="token operator">=</span><span class="token number">2</span> --accept-multiclient <span class="token builtin class-name">exec</span> ./main<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="goland-远程调试"><a href="#goland-远程调试" class="headerlink" title="goland 远程调试"></a>goland 远程调试</h2><p>打开goland配置 选择go remote 填写服务器地址和端口</p>
<p><img src="http://img.carrotvegeta.icu/blog/2023-4-04a0eafad3b9f3430e02fd50cf4afb26.jpg" alt="http://img.carrotvegeta.icu/blog/2023-4-04a0eafad3b9f3430e02fd50cf4afb26.jpg"></p>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>go 中context的使用</title>
    <url>/post/38c2d99.html</url>
    <content><![CDATA[<h1 id="go中context的使用"><a href="#go中context的使用" class="headerlink" title="go中context的使用"></a>go中context的使用</h1><p>版权声明：本文为CSDN博主「Word哥」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/finghting321/article/details/106012673/">https://blog.csdn.net/finghting321/article/details/106012673/</a><br>————————————————</p>
<h2 id="1-为什么需要context"><a href="#1-为什么需要context" class="headerlink" title="1. 为什么需要context"></a>1. 为什么需要context</h2><p>在并发程序中，由于超时、取消操作或者一些异常情况，往往需要进行抢占操作或者中断后续操作。</p>
<p>举个例子：在 Go http包的Server中，每一个请求在都有一个对应的 goroutine 去处理。请求处理函数通常会启动额外的 goroutine 用来访问后端服务，比如数据库和RPC服务，用来处理一个请求的 goroutine 通常需要访问一些与请求特定的数据，比如终端用户的身份认证信息、验证相关的token、请求的截止时间。 当一个请求被取消或超时时，所有用来处理该请求的 goroutine 都应该迅速中断退出，然后系统才能释放这些 goroutine 占用的资源。context深入理解可参考</p>
<span id="more"></span>
<p>context常用的使用场景：</p>
<ol>
<li>一个请求对应多个goroutine之间的数据交互</li>
<li>超时控制</li>
<li>上下文控制</li>
</ol>
<h2 id="2-context包简介"><a href="#2-context包简介" class="headerlink" title="2. context包简介"></a>2. context包简介</h2><p>context.Context接口：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Context <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 返回Context的超时时间（超时返回场景）</span>
    <span class="token function">Deadline</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>deadline time<span class="token punctuation">.</span>Time<span class="token punctuation">,</span> ok <span class="token builtin">bool</span><span class="token punctuation">)</span>
 
    <span class="token comment">// 在Context超时或取消时（即结束了）返回一个关闭的channel</span>
    <span class="token comment">// 即如果当前Context超时或取消时，Done方法会返回一个channel，然后其他地方就可以通过判断Done方法是否有返回（channel），如果有则说明Context已结束</span>
    <span class="token comment">// 故其可以作为广播通知其他相关方本Context已结束，请做相关处理。</span>
    <span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
 
    <span class="token comment">// 返回Context取消的原因</span>
    <span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span>
    
    <span class="token comment">// 返回Context相关数据</span>
    <span class="token function">Value</span><span class="token punctuation">(</span>key <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>继承的Context，BackGound是所有Context的root，不能够被cancel。context包提供了三种context，分别是是普通context，超时context以及带值的context：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 普通context，通常这样调用： ctx, cancel := context.WithCancel(context.Background())</span>
<span class="token keyword">func</span> <span class="token function">WithCancel</span><span class="token punctuation">(</span>parent Context<span class="token punctuation">)</span> <span class="token punctuation">(</span>ctx Context<span class="token punctuation">,</span> cancel CancelFunc<span class="token punctuation">)</span>
 
<span class="token comment">// 带超时的context，超时之后会自动close对象的Done，与调用CancelFunc的效果一样</span>
<span class="token comment">// WithDeadline 明确地设置一个d指定的系统时钟时间，如果超过就触发超时</span>
<span class="token comment">// WithTimeout 设置一个相对的超时时间，也就是deadline设为timeout加上当前的系统时间</span>
<span class="token comment">// 因为两者事实上都依赖于系统时钟，所以可能存在微小的误差，所以官方不推荐把超时间隔设置得太小</span>
<span class="token comment">// 通常这样调用：ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)</span>
<span class="token keyword">func</span> <span class="token function">WithDeadline</span><span class="token punctuation">(</span>parent Context<span class="token punctuation">,</span> d time<span class="token punctuation">.</span>Time<span class="token punctuation">)</span> <span class="token punctuation">(</span>Context<span class="token punctuation">,</span> CancelFunc<span class="token punctuation">)</span>
<span class="token keyword">func</span> <span class="token function">WithTimeout</span><span class="token punctuation">(</span>parent Context<span class="token punctuation">,</span> timeout time<span class="token punctuation">.</span>Duration<span class="token punctuation">)</span> <span class="token punctuation">(</span>Context<span class="token punctuation">,</span> CancelFunc<span class="token punctuation">)</span>
 
<span class="token comment">// 带有值的context，没有CancelFunc，所以它只用于值的多goroutine传递和共享</span>
<span class="token comment">// 通常这样调用：ctx := context.WithValue(context.Background(), "key", myValue)</span>
<span class="token keyword">func</span> <span class="token function">WithValue</span><span class="token punctuation">(</span>parent Context<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> Context<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="3-场景举例—等待组"><a href="#3-场景举例—等待组" class="headerlink" title="3. 场景举例—等待组"></a>3. 场景举例—等待组</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main
 
<span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">"fmt"</span>
    <span class="token string">"sync"</span>
    <span class="token string">"time"</span>
<span class="token punctuation">)</span>
 
<span class="token comment">//数据接收服务主协程同子协程同步变量</span>
<span class="token keyword">var</span> wg sync<span class="token punctuation">.</span>WaitGroup
 
<span class="token keyword">func</span> <span class="token function">run</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"start 任务ID："</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>
    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">)</span>
    wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 每个goroutine运行完毕后就释放等待组的计数器</span>
<span class="token punctuation">&#125;</span>
 
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    countThread <span class="token operator">:=</span> <span class="token number">2</span> <span class="token comment">//runtime.NumCPU()</span>
    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> countThread<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">go</span> <span class="token function">run</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>countThread<span class="token punctuation">)</span> <span class="token comment">// 需要开启的goroutine等待组的计数器</span>
 
    <span class="token comment">//等待所有的任务都释放</span>
    wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"任务全部结束,退出"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>运行结果：</strong> </p>
<img align="left" src="http://rd7bcspti.hn-bkt.clouddn.com/02.png">  

<p><strong>分析：</strong>  对于等待组控制多并发的情况，只有所有的goroutine都结束了才算结束，只要有一个goroutine没有结束， 那么就会一直等，这显然对资源的释放是缓慢的；<br><strong>优点：</strong> 使用等待组的并发控制模型，适用于好多个goroutine协同做一件事情，因为每个goroutine做的都是这件事情的一部分，只有当全部的goroutine都完成，这件事情才算完成；<br><strong>缺点：</strong> 需要主动的通知某一个 goroutine 结束。<br><strong>疑问：</strong> 如果开启一个后台 goroutine 一直做事情，现在不需要了，那么就需要通知这个goroutine 结束，否则它会一直跑。</p>
<h2 id="4-场景举例—通道-select"><a href="#4-场景举例—通道-select" class="headerlink" title="4. 场景举例—通道+select"></a>4. 场景举例—通道+select</h2><p>针对等待组场景遗留的问题，解决办法：</p>
<blockquote>
<ol>
<li>设置全局变量，在通知goroutine要停止时，为全局变量赋值，但是这样必须保证线程安全，不可避免的必须为全局变量加锁，显得有失便利；</li>
<li>使用chan + select多路复用的方式，就会优雅许多；</li>
</ol>
</blockquote>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main
 
<span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">"fmt"</span>
    <span class="token string">"time"</span>
<span class="token punctuation">)</span>
 
<span class="token keyword">func</span> <span class="token function">run</span><span class="token punctuation">(</span>stop <span class="token keyword">chan</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">select</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">case</span> <span class="token operator">&lt;-</span>stop<span class="token punctuation">:</span>
            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"任务1结束退出"</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span>
        <span class="token keyword">default</span><span class="token punctuation">:</span>
            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"任务1正在运行中"</span><span class="token punctuation">)</span>
            time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
 
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    stop <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">bool</span><span class="token punctuation">)</span>
    <span class="token keyword">go</span> <span class="token function">run</span><span class="token punctuation">(</span>stop<span class="token punctuation">)</span> <span class="token comment">// 开启goroutine</span>
 
    <span class="token comment">// 运行一段时间后停止</span>
    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"停止任务1。。。"</span><span class="token punctuation">)</span>
    stop <span class="token operator">&lt;-</span> <span class="token boolean">true</span>
    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>运行结果：</strong><br><img src="/upload/2022/05/image-1651908425418.png" alt="image-1651908425418"><br><strong>优点：</strong> 优雅、简单<br><strong>不足：</strong> 如果有很多 goroutine 都需要控制结束，并且这些 goroutine 又开启其它更多的goroutine ？</p>
<h2 id="5-场景举例—普通context"><a href="#5-场景举例—普通context" class="headerlink" title="5. 场景举例—普通context"></a>5. 场景举例—普通context</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main
 
<span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">"context"</span>
    <span class="token string">"fmt"</span>
    <span class="token string">"time"</span>
<span class="token punctuation">)</span>
 
<span class="token keyword">func</span> <span class="token function">run</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> id <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">select</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">case</span> <span class="token operator">&lt;-</span>ctx<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"任务%v结束退出\n"</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span>
            <span class="token keyword">return</span>
        <span class="token keyword">default</span><span class="token punctuation">:</span>
            fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"任务%v正在运行中\n"</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span>
            time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
 
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">//管理启动的协程</span>
    ctx<span class="token punctuation">,</span> cancel <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">WithCancel</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment">// 开启多个goroutine，传入ctx</span>
    <span class="token keyword">go</span> <span class="token function">run</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">go</span> <span class="token function">run</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token comment">// 运行一段时间后停止</span>
    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"停止任务1"</span><span class="token punctuation">)</span>
    <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 使用context的cancel函数停止goroutine</span>
    <span class="token comment">// 为了检测监控过是否停止，如果没有监控输出，表示停止</span>
    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>说明：</strong> context.Background() 返回一个空的 Context，这个空的 Context 一般用于整个 Context 树的根节点。然后使用 context.WithCancel(parent) 函数，创建一个可取消的子 Context，然后当作参数传给 goroutine 使用，这样就可以使用这个子 Context 跟踪这个 goroutine。</p>
<p><strong>运行结果：</strong><br><img src="/upload/2022/05/image-1651908618179.png" alt="image-1651908618179"></p>
<h2 id="6-场景举例—Context超时"><a href="#6-场景举例—Context超时" class="headerlink" title="6. 场景举例—Context超时"></a>6. 场景举例—Context超时</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main
 
<span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">"context"</span>
    <span class="token string">"fmt"</span>
    <span class="token string">"sync"</span>
    <span class="token string">"time"</span>
<span class="token punctuation">)</span>
 
<span class="token keyword">func</span> <span class="token function">coroutine</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> duration time<span class="token punctuation">.</span>Duration<span class="token punctuation">,</span> id <span class="token builtin">int</span><span class="token punctuation">,</span> wg <span class="token operator">*</span>sync<span class="token punctuation">.</span>WaitGroup<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">select</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">case</span> <span class="token operator">&lt;-</span>ctx<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"协程 %d 退出\n"</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span>
            wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span>
        <span class="token keyword">case</span> <span class="token operator">&lt;-</span>time<span class="token punctuation">.</span><span class="token function">After</span><span class="token punctuation">(</span>duration<span class="token punctuation">)</span><span class="token punctuation">:</span>
            fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"消息来自协程 %d\n"</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
 
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">//使用WaitGroup等待所有的goroutine执行完毕，在收到&lt;-ctx.Done()的终止信号后使wg中需要等待的goroutine数量减一。</span>
    <span class="token comment">// 因为context只负责取消goroutine，不负责等待goroutine运行，所以需要配合一点辅助手段</span>
    <span class="token comment">//管理启动的协程</span>
    wg <span class="token operator">:=</span> <span class="token operator">&amp;</span>sync<span class="token punctuation">.</span>WaitGroup<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
    ctx<span class="token punctuation">,</span> cancel <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">WithTimeout</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
    <span class="token keyword">defer</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
        wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token keyword">go</span> <span class="token function">coroutine</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span> i<span class="token punctuation">,</span> wg<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
 <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>说明：</strong> 代码中使用WaitGroup等待所有的goroutine执行完毕，在收到&lt;-ctx.Done()的终止信号后使wg中需要等待的goroutine数量减一， 因为context只负责取消goroutine，不负责等待goroutine运行，需要配合一点辅助手段<br><strong>运行结果：</strong> </p>
<p><img src="/upload/2022/05/image-1651908781361.png" alt="image-1651908781361"></p>
<h2 id="7-场景举例—Context传递元数据"><a href="#7-场景举例—Context传递元数据" class="headerlink" title="7. 场景举例—Context传递元数据"></a>7. 场景举例—Context传递元数据</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main
 
<span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">"context"</span>
    <span class="token string">"fmt"</span>
    <span class="token string">"time"</span>
<span class="token punctuation">)</span>
 
<span class="token keyword">var</span> key <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"name"</span>
 
<span class="token keyword">func</span> <span class="token function">run</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">select</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">case</span> <span class="token operator">&lt;-</span>ctx<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"任务%v结束退出\n"</span><span class="token punctuation">,</span> ctx<span class="token punctuation">.</span><span class="token function">Value</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span>
        <span class="token keyword">default</span><span class="token punctuation">:</span>
            fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"任务%v正在运行中\n"</span><span class="token punctuation">,</span> ctx<span class="token punctuation">.</span><span class="token function">Value</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span>
            time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
 
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">//管理启动的协程</span>
    ctx<span class="token punctuation">,</span> cancel <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">WithCancel</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment">// 给ctx绑定键值，传递给goroutine</span>
    valuectx <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">WithValue</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token string">"【监控1】"</span><span class="token punctuation">)</span>
    <span class="token comment">// 开启goroutine，传入ctx</span>
    <span class="token keyword">go</span> <span class="token function">run</span><span class="token punctuation">(</span>valuectx<span class="token punctuation">)</span>
    <span class="token comment">// 运行一段时间后停止</span>
    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"停止任务"</span><span class="token punctuation">)</span>
    <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 使用context的cancel函数停止goroutine</span>
    <span class="token comment">// 为了检测监控过是否停止，如果没有监控输出，表示停止</span>
    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>运行结果：</strong><br><img src="/upload/2022/05/image-1651908878817.png" alt="image-1651908878817"></p>
<h2 id="8-context总结"><a href="#8-context总结" class="headerlink" title="8. context总结"></a>8. context总结</h2><blockquote>
<ol>
<li>不要把 Context 放在结构体中，要以参数的方式传递</li>
<li>以 Context 作为参数的函数方法，应该把 Context 作为第一个参数，放在第一位</li>
<li>给一个函数方法传递 Context 的时候，不要传递 nil，如果不知道传递什么，就使用 context.TODO</li>
<li>Context 的 Value 相关方法应该传递必须的数据，不要什么数据都使用这个传递</li>
<li>Context 是线程安全的，可以放心的在多个 goroutine 中传递</li>
</ol>
</blockquote>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>go 中 new和make的区别</title>
    <url>/post/34454ed8.html</url>
    <content><![CDATA[<h1 id="go中new和make的区别"><a href="#go中new和make的区别" class="headerlink" title="go中new和make的区别"></a>go中new和make的区别</h1><p>new和make是用于go中分配内存的，简单来说，new只分配内存，make用于初始化slice、map以及channel。</p>
<p>Go语言中的 new 和 make 主要区别如下：<br>make 只能用来分配及初始化类型为 slice、map、chan 的数据。new 可以分配任意类型的数据；<br>new 分配返回的是指针，即类型 *Type。make 返回引用，即 Type；<br>new 分配的空间被清零。make 分配空间后，会进行初始化；</p>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>linux 命令行配置代理</title>
    <url>/post/10aadca5.html</url>
    <content><![CDATA[<h1 id="命令行配置代理"><a href="#命令行配置代理" class="headerlink" title="命令行配置代理"></a>命令行配置代理</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">http_proxy</span><span class="token operator">=</span>http://127.0.0.1:1087

<span class="token builtin class-name">export</span> <span class="token assign-left variable">https_proxy</span><span class="token operator">=</span><span class="token variable">$http_proxy</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h2 id="此处的IP和端口需要根据具体你代理的实际信息填写，可查看VPN客户端的config-json"><a href="#此处的IP和端口需要根据具体你代理的实际信息填写，可查看VPN客户端的config-json" class="headerlink" title="此处的IP和端口需要根据具体你代理的实际信息填写，可查看VPN客户端的config.json"></a>此处的IP和端口需要根据具体你代理的实际信息填写，可查看VPN客户端的config.json</h2><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"inbounds"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
 <span class="token punctuation">&#123;</span>
 <span class="token property">"listen"</span><span class="token operator">:</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span>
 <span class="token property">"protocol"</span><span class="token operator">:</span> <span class="token string">"socks"</span><span class="token punctuation">,</span>
 <span class="token property">"settings"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
 <span class="token property">"udp"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
 <span class="token property">"auth"</span><span class="token operator">:</span> <span class="token string">"noauth"</span>
 <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
 <span class="token property">"port"</span><span class="token operator">:</span> <span class="token string">"1080"</span>
 <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
 <span class="token punctuation">&#123;</span>
 <span class="token property">"listen"</span><span class="token operator">:</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span>
 <span class="token property">"protocol"</span><span class="token operator">:</span> <span class="token string">"http"</span><span class="token punctuation">,</span>
 <span class="token property">"settings"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
 <span class="token property">"timeout"</span><span class="token operator">:</span> <span class="token number">360</span>
 <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
 <span class="token property">"port"</span><span class="token operator">:</span> <span class="token string">"1087"</span>
 <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>检查命令行配置是否完成</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> -i www.google.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>收到200响应表示成功</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>代理</tag>
        <tag>linux</tag>
        <tag>bash</tag>
      </tags>
  </entry>
  <entry>
    <title>linux_目录结构详解</title>
    <url>/post/linux_%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84%E8%AF%A6%E8%A7%A3.html</url>
    <content><![CDATA[<h2 id="具体的目录结构"><a href="#具体的目录结构" class="headerlink" title="具体的目录结构"></a>具体的目录结构</h2><ul>
<li>&#x2F;bin （&#x2F;usr&#x2F;bin、&#x2F;usr&#x2F;local&#x2F;bin）<br>是Binary的缩写，这个目录存放着最经常使用的命令</li>
<li>&#x2F;sbin (&#x2F;usr&#x2F;sbin、&#x2F;usr&#x2F;local&#x2F;sbin)<br>s就是super user的意思，这里存放的是系统管理员使用的系统管理程序</li>
<li>&#x2F;home<br>存放普通用户的主目录，在linux中每个用户都有一个自己的目录，一般用该目录名是以用户的账号命名</li>
<li>&#x2F;root<br>该目录为系统管理员，也称作超级权限者的用户主目录</li>
<li>&#x2F;lib<br>系统开机所需要的动态连接共享库，其作用类似于windows里的DLL文件</li>
<li>&#x2F;lost+found<br>当系统非法关机后，这里就存放了一些文件</li>
<li>&#x2F;etc<br>所有的系统管理所需要的配置文件和子目录，比如安装mysql数据库 my.conf</li>
<li>&#x2F;usr<br>用户的很多应用程序和文件都放这个目录下，类似windows下的program files目录</li>
<li>&#x2F;boot<br>存放的是启动linux时使用的一些核心文件，包括一些连接文件以及镜像文件</li>
<li>&#x2F;tmp<br>这个目录是用来存放一些临时文件的</li>
<li>&#x2F;dev<br>类似于windows的设备管理器，把所有的硬件用文件的形式存储</li>
<li>&#x2F;media<br>linux系统会自动识别一些设备，例如u盘、光驱等等，当识别后，linux会把识别的设备挂载到这个目录下</li>
<li>&#x2F;mnt<br>系统提供该目录是为了挂载别的文件系统的，</li>
<li>&#x2F;opt<br>这是给主机额外安装软件存放的目录</li>
<li>&#x2F;usr&#x2F;local<br>这是另一个给主机额外安装软件所安装的目录，一般是通过编译源码方式安装的程序</li>
<li>&#x2F;var<br>这个目录中存放着在不断扩充的东西，习惯将经常被修改的目录放在这个目录下，包括各种日志文件</li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>linux查看进程</title>
    <url>/post/56d93994.html</url>
    <content><![CDATA[<h1 id="linux查看进程"><a href="#linux查看进程" class="headerlink" title="linux查看进程"></a>linux查看进程</h1><p>ps [-e -f]</p>
<ul>
<li>选项：-e 显示全部进程</li>
<li>选项：-f 以完全格式化的形式展示信息</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span> -ef<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="http://img.carrotvegeta.icu/blog/2023-4-4ff8e84007b23ff6f5a8e52f059f10c5.png" alt="http://img.carrotvegeta.icu/blog/2023-4-4ff8e84007b23ff6f5a8e52f059f10c5.png"></p>
<ul>
<li>UID:进程所属的用户ID</li>
<li>PID:进程的进程号ID</li>
<li>PPID:进程所属的父ID（启动此进程的其他进程）</li>
<li>C:此进程的CPU占用率（百分比）</li>
<li>STIME:进程的启动时间</li>
<li>TTY:启动此进程的终端序号，如果显示？ 则表示不是由终端启动</li>
<li>TIME:进程所占用的cpu时间</li>
<li>CMD:启动此进程的命令或启动路径</li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>linux端口号查看</title>
    <url>/post/adb7f6d5.html</url>
    <content><![CDATA[<h1 id="linux端口号查看"><a href="#linux端口号查看" class="headerlink" title="linux端口号查看"></a>linux端口号查看</h1><ol>
<li><p>nmap用于查看服务器对外开放的端口</p>
<p>安装</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum -y <span class="token function">install</span> nmap<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>查看本机对外端口</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token number">127.0</span>.0.1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>netstat命令 用于查看本机端口号占用</p>
<p>安装</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum -y <span class="token function">install</span> net-tools<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>查看端口占用</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">netstat</span> -anp<span class="token operator">|</span><span class="token function">grep</span> <span class="token number">3306</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ol>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql 命令行备份数据</title>
    <url>/post/d01613b0.html</url>
    <content><![CDATA[<p><a href="https://www.cnblogs.com/gcixx/">桄椿</a></p>
<h2 id="mysql命令行备份方法"><a href="#mysql命令行备份方法" class="headerlink" title="mysql命令行备份方法"></a><a href="https://www.cnblogs.com/gcixx/p/11145473.html">mysql命令行备份方法</a></h2><p>一、mysql备份</p>
<p>1、备份命令</p>
<p>格式：mysqldump -h主机IP -P端口 -u用户名 -p密码 –database 数据库名 &gt; 文件名.sql</p>
<pre class="line-numbers language-none"><code class="language-none"># 本地备份可以不添加端口和主机IP，username、passward是数据库用户名和密码
mysqldump -h *.*.*.* -p 3306 -u username -p password --database mysql &gt; &#x2F;data&#x2F;backup&#x2F;mysql.sql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>2、备份压缩</p>
<p>格式：mysqldump -h主机IP -P端口 -u用户名 -p密码 –database 数据库名 | gzip &gt; 文件名.sql.gz</p>
<pre class="line-numbers language-none"><code class="language-none"># 导出的数据有可能比较大，不好备份到远程，这时候就需要进行压缩
mysqldump -h *.*.*.* -p 3306 -u username -p password --database mysql | gzip &gt; &#x2F;data&#x2F;backup&#x2F;mysql.sql.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>3、备份同个库多个表</p>
<p>格式：mysqldump -h主机IP -P端口 -u用户名 -p密码 –database 数据库名 表1 表2 …. &gt; 文件名.sql</p>
<pre class="line-numbers language-none"><code class="language-none">mysqldump -h *.*.*.* -p 3306 -u username -p password mysql1 mysql2 mysql3&gt; &#x2F;data&#x2F;backup&#x2F;mysql_db.sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>4、同时备份多个库</p>
<p>格式：mysqldump -h主机IP -P端口 -u用户名 -p密码 –databases 数据库名1 数据库名2 数据库名3 &gt; 文件名.sql</p>
<pre class="line-numbers language-none"><code class="language-none">mysqldump -h *.*.*.* -p 3306 -u username -p password --databases mysql1 mysql2 mysql3 &gt; &#x2F;data&#x2F;backup&#x2F;mysql_db.sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>5、备份实例上所有的数据库</p>
<p>格式：mysqldump -h主机IP -P端口 -u用户名 -p密码 –all-databases &gt; 文件名.sql</p>
<pre class="line-numbers language-none"><code class="language-none">mysqldump -h *.*.*.* -p 3306 -u username -p password --all-databases &gt; &#x2F;data&#x2F;backup&#x2F;mysql_db.sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>6、备份数据出带删除数据库或者表的sql备份</p>
<p>格式：mysqldump -h主机IP -P端口 -u用户名 -p密码 –add-drop-table –add-drop-database 数据库名 &gt; 文件名.sql</p>
<pre class="line-numbers language-none"><code class="language-none">mysqldump -h *.*.*.* -p 3306 -u username -p password --add-drop-table --add-drop-database mysql &gt; &#x2F;data&#x2F;backup&#x2F;mysql_db.sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>7、备份数据库结构，不备份数据</p>
<p>格式：mysqldump -h主机IP -P端口 -u用户名 -p密码 –no-data 数据库名1 数据库名2 数据库名3 &gt; 文件名.sql</p>
<pre class="line-numbers language-none"><code class="language-none">mysqldump -h *.*.*.* -p 3306 -u username -p password --no-data –databases mysql1 mysql2 mysql3 &gt; &#x2F;data&#x2F;backup&#x2F;structure_db.sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>8、还原MySQL数据库的命令</p>
<pre class="line-numbers language-none"><code class="language-none"># database为数据库名
mysql -h *.*.*.* -u username -p password database &lt; backupfile.sql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>9、还原压缩的MySQL数据库</p>
<pre class="line-numbers language-none"><code class="language-none"># database为数据库名
gunzip &lt; backupfile.sql.gz | mysql -u username -p password database<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>10、将数据库转移到新服务器</p>
<pre class="line-numbers language-none"><code class="language-none"># database为数据库名
mysqldump -u username -p password database | mysql –host&#x3D;*.*.*.* -C database<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>11、–master-data 和–single-transaction</p>
<p> 在mysqldump中使用–master-data&#x3D;2，会记录binlog文件和position的信息 。</p>
<p> –single-transaction会将隔离级别设置成repeatable-commited。</p>
<p>12、导入数据库</p>
<p> 常用source命令，用use进入到某个数据库，mysql&gt;source d:\test.sql，后面的参数为脚本文件。</p>
<p>13、查看binlog日志</p>
<p> 查看binlog日志可用命令 mysqlbinlog binlog日志名称|more</p>
<p>14、general_log</p>
<p> General_log记录数据库的任何操作，查看general_log 的状态和位置可以用命令show variables like “general_log%” ,开启general_log可以用命令set global general_log&#x3D;on</p>
<p>二、增量备份</p>
<p>1、首先做一次完整备份：</p>
<pre class="line-numbers language-none"><code class="language-none"># 这时候就会得到一个全备文件test.sql
mysqldump -h *.*.*.* -u username -p passward  -p 3310 --single-transaction  --master-data&#x3D;2  test&gt;test.sql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>在sql文件中我们会看到：</p>
<pre class="line-numbers language-none"><code class="language-none">-- 是指备份后所有的更改将会保存到bin-log.000002二进制文件中。
CHANGE MASTER TO MASTER_LOG_FILE&#x3D;&#39;bin-log.000002&#39;, MASTER_LOG_POS&#x3D;107;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>2、在test库的t_student表中增加两条记录，然后执行flush logs命令。</p>
<p> 这时将会产生一个新的二进制日志文件bin-log.000003，bin-log.000002则保存了全备过后的所有更改，既增加记录的操作也保存在了bin-log.00002中。</p>
<p>3、再在test库中的a表中增加两条记录，然后误删除t_student表和a表。</p>
<p> a中增加记录的操作和删除表a和t_student的操作都记录在bin-log.000003中。</p>
<h2 id="三、恢复"><a href="#三、恢复" class="headerlink" title="三、恢复"></a>三、恢复</h2><p>1、首先导入全备数据</p>
<pre class="line-numbers language-none"><code class="language-none"># 也可以直接在mysql命令行下面用source导入
mysql -h *.*.*.* -u username -p passward  -p 3310 &lt; test.sql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>2、恢复bin-log.000002</p>
<pre class="line-numbers language-none"><code class="language-none">mysqlbinlog bin-log.000002 |mysql -h *.*.*.* -u username -p passward -p 3310<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>3、恢复部分 bin-log.000003</p>
<p>在general_log中找到误删除的时间点，然后更加对应的时间点到bin-log.000003中找到相应的position点，需要恢复到误删除的前面一个position点。</p>
<p>可以用如下参数来控制binlog的区间</p>
<p>–start-position 开始点 –stop-position 结束点</p>
<p>–start-date 开始时间 –stop-date 结束时间</p>
<p>找到恢复点后，既可以开始恢复。</p>
<pre class="line-numbers language-none"><code class="language-none">mysqlbinlog mysql-bin.000003 --stop-position&#x3D;208 |mysql -h *.*.*.* -u username -p passward -p 3310 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>备份</tag>
        <tag>恢复</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx 启动停止命令</title>
    <url>/post/8a666a62.html</url>
    <content><![CDATA[<h1 id="服务管理"><a href="#服务管理" class="headerlink" title="服务管理"></a>服务管理</h1><p>启动服务：systemctl start nginx</p>
<p>关闭服务： systemctl stop nginx</p>
<p>重载配置：systemctl reload nginx</p>
<p>重启服务：systemctl restart nginx</p>
]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx 基本命令</title>
    <url>/post/6426f6ef.html</url>
    <content><![CDATA[<h1 id="nginx基本命令"><a href="#nginx基本命令" class="headerlink" title="nginx基本命令"></a>nginx基本命令</h1><p>1、启动：<br>使用默认nginx.conf来启动</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">start nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>如果要指定配置文件来启动则使用以下命令即可：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nginx -c ./conf/jason.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>2、关闭：</p>
<p>快速关闭nginx服务。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nginx -s stop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>优雅的关闭,优雅是指当一个请求被处理完成之后才被关闭。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nginx -s quit<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>3、配置语法检查：可进行配置文件的语法检测。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nginx -c ./conf/jason.conf -t<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>4、查看nginx版本信息：-v和-V，一个小写v，一个大写V，两个的含义有些不同。</p>
<p>nginx -v:只是显示nginx的当前版本,如下图</p>
<p><img src="/upload/2022/03/image-649783c8200a4d018e2558a7976cc38d.png" alt="image.png"></p>
<p>nginx -V：显示nginx版本、编译器版本和配置参数信息，如下图</p>
<p><img src="/upload/2022/03/image-61236735bba34682926b603790610f4c.png" alt="image.png"></p>
<p>5、重新加载配置文件，nginx是支持热部署的，意思就是可以在不停止服务的情况下进行更新部署。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nginx -s reload <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>6、linux命令重启<br>查找当前nginx进程号</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span> -ef<span class="token operator">|</span><span class="token function">grep</span> nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>然后输入命令：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">kill</span> -HUP 进程号<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>实现重启nginx服务</p>
<p>7、重新打开日志文件。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nginx -s reopen<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx 配置多个域名对应不同端口</title>
    <url>/post/121f24e9.html</url>
    <content><![CDATA[<h1 id="nginx-多个域名不同端口"><a href="#nginx-多个域名不同端口" class="headerlink" title="nginx 多个域名不同端口"></a>nginx 多个域名不同端口</h1><h2 id="首先准备三个域名和端口"><a href="#首先准备三个域名和端口" class="headerlink" title="首先准备三个域名和端口"></a>首先准备三个域名和端口</h2><ul>
<li>carrotvegeta.icu  80</li>
<li>blog.carrotvegeta.icu 8090</li>
<li>email.carrotvegeta.icu 8080<span id="more"></span>
<h2 id="1、写在一个配置文件里面（nginx-conf）："><a href="#1、写在一个配置文件里面（nginx-conf）：" class="headerlink" title="1、写在一个配置文件里面（nginx.conf）："></a>1、写在一个配置文件里面（nginx.conf）：</h2></li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">server<span class="token punctuation">&#123;</span>
    listen <span class="token number">80</span><span class="token punctuation">;</span>
    server_name carrotvegeta.icu<span class="token punctuation">;</span>
    location / <span class="token punctuation">&#123;</span>
        <span class="token comment">#....</span>
        proxy_pass http://localhost:80<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">##### other directive</span>
<span class="token punctuation">&#125;</span>

server<span class="token punctuation">&#123;</span>
    listen <span class="token number">80</span><span class="token punctuation">;</span>
    server_name blog.carrotvegeta.icu<span class="token punctuation">;</span>
    location / <span class="token punctuation">&#123;</span>
        <span class="token comment">#....</span>
        proxy_pass http://localhost:8090<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">##### other directive</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>如果要再继续增加就再增加一个server</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">server<span class="token punctuation">&#123;</span>
    listen <span class="token number">80</span><span class="token punctuation">;</span>
    server_name carrotvegeta.icu<span class="token punctuation">;</span>
    location / <span class="token punctuation">&#123;</span>
        <span class="token comment">#....</span>
        proxy_pass http://localhost:80<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">##### other directive</span>
<span class="token punctuation">&#125;</span>

server<span class="token punctuation">&#123;</span>
    listen <span class="token number">80</span><span class="token punctuation">;</span>
    server_name blog.carrotvegeta.icu<span class="token punctuation">;</span>
    location / <span class="token punctuation">&#123;</span>
        <span class="token comment">#....</span>
        proxy_pass http://localhost:8090<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">##### other directive</span>
<span class="token punctuation">&#125;</span>
server<span class="token punctuation">&#123;</span>
    listen <span class="token number">80</span><span class="token punctuation">;</span>
    server_name email.carrotvegeta.icu<span class="token punctuation">;</span>
    location / <span class="token punctuation">&#123;</span>
        <span class="token comment">#....</span>
        proxy_pass http://localhost:8080<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">##### other directive</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="2、写在多个配置文件里面"><a href="#2、写在多个配置文件里面" class="headerlink" title="2、写在多个配置文件里面"></a>2、写在多个配置文件里面</h2><p>  当我们的域名变的非常多的时候，就需要一直不断的在一个配置文件里面增加server，这样就会变得越来越多导致不太好管理。<br>  nginx支持引入文件的方法，这时我们可以在其他地方新建好我们所需要的配置文件:</p>
<p>blog.conf：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">server<span class="token punctuation">&#123;</span>
    listen <span class="token number">80</span><span class="token punctuation">;</span>
    server_name blog.carrotvegeta.icu<span class="token punctuation">;</span>
    location / <span class="token punctuation">&#123;</span>
        <span class="token comment">#....</span>
        proxy_pass http://localhost:8090<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">##### other directive</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>email.conf</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">server<span class="token punctuation">&#123;</span>
    listen <span class="token number">80</span><span class="token punctuation">;</span>
    server_name email.carrotvegeta.icu<span class="token punctuation">;</span>
    location / <span class="token punctuation">&#123;</span>
        <span class="token comment">#....</span>
        proxy_pass http://localhost:8080<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">##### other directive</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>把两个文件都放在&#x2F;data&#x2F;nginx&#x2F;conf&#x2F;vhost目录下。</p>
<p>然后在nginx.conf中使用引入命令：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">include  /data/nginx/conf/vhost/*.conf<span class="token punctuation">;</span>即可。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>需要注意的是这句命令应该放在：http{}  的花括号内。因为include的命令引入相当于被引入的所有代码写在nginx.conf中一样。</p>
<p>配置nginx.conf文件：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">http<span class="token punctuation">&#123;</span>

  <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>

  include /data/nginx/conf/vhost/*.conf<span class="token punctuation">;</span>

  server<span class="token punctuation">&#123;</span>
    listen <span class="token number">80</span><span class="token punctuation">;</span>
    server_name carrotvegeta.icu<span class="token punctuation">;</span>
    location / <span class="token punctuation">&#123;</span>
        <span class="token comment">#....</span>
        proxy_pass http://localhost:80<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">##### other directive</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>然后重启ngxin:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nginx -s reload<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>原文地址：<a href="https://www.cnblogs.com/goloving/p/9363490.html">https://www.cnblogs.com/goloving/p/9363490.html</a></p>
]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>ssh隧道-能ssh就能http和tcp，通过ssh就能访问内网web页面和数据库</title>
    <url>/post/ff48a6a3.html</url>
    <content><![CDATA[<p>出于安全考虑，一般云主机都只能通过堡垒机两级ssh才能连通，即先ssh堡垒机，再ssh连到内网目标云主机上执行命令。<br>(堡垒机俗称跳板机，一般只开放一个ssh端口。有些堡垒机没有公网IP，必须先登录vpn能才能连)</p>
<p>怎么传文件呢？<br>先传到跳板机再传到目标机？传2次？太麻烦，浪费时间还浪费磁盘空间。<br>有人说配置config，可以直接ssh目标机，也可以直接scp文件到目标机。没错是这样（文中有配置示例）。</p>
<p>那云主机上有web页面能直接访问么？</p>
<ul>
<li>内网数据库能直接连么？<br>当然可以的，能连ssh，就能访问内网的网页和数据库。只要能手动多级ssh访问到，就能通过配置ssh后在本地直接访问到。<span id="more"></span>
轻松实现<br>假设网络条件如下：（受安全组或网络策略影响，只能通过10.20.20.20访问192.168.88.8:8888）</li>
</ul>
<blockquote>
<p>本机（登录VPN 公网IP:8444） –&gt; 10.10.10.10:22 –&gt; 10.20.20.20:22 –&gt;<br>192.168.88.8:8888</p>
</blockquote>
<p>只需3步：</p>
<ol>
<li>本机配置ssh跳板。保证本机能直接ssh 10.20.20.20。因为跳板机10不能访问目标8888端口</li>
<li>在命令行中（推荐GitBash）执行如下命令，输入20的账号密码<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> -f -N -L localhost:12345:192.168.88.8:8888 user@10.20.20.20 -p22<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>在本机浏览器中输入localhost:12345，出来的就是目标机8888端口的内容。<h2 id="配置ssh跳板"><a href="#配置ssh跳板" class="headerlink" title="配置ssh跳板"></a>配置ssh跳板</h2>配置本机直接ssh 10.20.20.20。配置示例：<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> <span class="token environment constant">$HOME</span>/.ssh/config<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Host jumper
  <span class="token function">hostname</span> <span class="token number">10.10</span>.10.10 <span class="token comment">#跳板机要装有ncat，否则连接时会报错</span>
Host sub2020
  <span class="token function">hostname</span> <span class="token number">10.20</span>.20.*
  ProxyCommand <span class="token function">ssh</span> -q -A jumper <span class="token function">nc</span> %h %p<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
<ul>
<li>当然如果8888是数据库端口，也是直接在数据库客户中配置地址为localhost:12345。</li>
<li>当然10.10.10.10，10.20.20.20也可以配置免密登录，不用再输密码<h2 id="再引申一下，还想让其他ip通过本机直连内网页面"><a href="#再引申一下，还想让其他ip通过本机直连内网页面" class="headerlink" title="再引申一下，还想让其他ip通过本机直连内网页面"></a>再引申一下，还想让其他ip通过本机直连内网页面</h2><blockquote>
<p>其他IP –&gt; 本机IP:12345（登录VPN 公网IP:8444） –&gt; 10.10.10.10:22 –&gt;<br>192.168.88.8:8888</p>
</blockquote>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> -f -N -L 本机IP:12345:192.168.88.8:8888 user@10.10.10.10 -p22<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>或者</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> -f -N -L :12345:192.168.88.8:8888 user@10.10.10.10 -p22<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>注意前提是要保证本机的防火墙已放通12345端口，这样别人才能连通本机的12345端口<br>再简单一点，目标服务就在跳板机上，但是端口未放开（只放开22）</li>
</ul>
<blockquote>
<p>本机 –&gt; 10.10.10.10:22 –&gt; 10.10.10.10:8888</p>
</blockquote>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> -f -N -L :12345:10.10.10.10:8888 user@10.10.10.10 -p22<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><a href="https://blog.csdn.net/liliwang90/article/details/123153893">原文地址</a></p>
]]></content>
      <categories>
        <category>ssh</category>
      </categories>
      <tags>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>tar解压缩命令</title>
    <url>/post/tar%E8%A7%A3%E5%8E%8B%E7%BC%A9%E5%91%BD%E4%BB%A4.html</url>
    <content><![CDATA[<h1 id="tar解压缩命令"><a href="#tar解压缩命令" class="headerlink" title="tar解压缩命令"></a>tar解压缩命令</h1><p><strong>语法:</strong> tar [-c -v -x -f -z -C] 参数1 参数2 ….参数N</p>
<ul>
<li>-c,创建压缩文件</li>
<li>-v,显示压缩，解压过程，查看进度</li>
<li>-x,解压文件</li>
<li>-f,要创建的文件，或要解压的文件，-f选项必须在所有选项中位置处于最后一个</li>
<li>-z,gzip模式，不使用-z就是普通的tarball格式，最后压缩文件后缀可为tar.gz&#x2F;gz 一定以gz结尾</li>
<li>-C，选择解压的目的地，用于解压模式</li>
</ul>
<p><strong>注意:</strong></p>
<ul>
<li>-f:选项组合体的最后一位</li>
<li>-z:一般放在开头位置</li>
<li>-C 选项单独使用，和解压所需的其他参数分开  tar -zxvf test.tar.gz -C &#x2F;home&#x2F;test</li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
        <category>日常命令</category>
      </categories>
      <tags>
        <tag>tar</tag>
      </tags>
  </entry>
  <entry>
    <title>user-agent爬虫识别</title>
    <url>/post/eae6b649.html</url>
    <content><![CDATA[<h1 id="user-agent爬虫识别"><a href="#user-agent爬虫识别" class="headerlink" title="user-agent爬虫识别"></a>user-agent爬虫识别</h1><p>用户代理 （User Agent，简称 UA），是一个<a href="https://baike.baidu.com/item/%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6/112715?fromModule=lemma_inlink">特殊字符</a>串头，使得服务器能够识别客户使用的操作系统及版本、<a href="https://baike.baidu.com/item/CPU/120556?fromModule=lemma_inlink">CPU</a> 类型、浏览器及版本、浏览器<a href="https://baike.baidu.com/item/%E6%B8%B2%E6%9F%93%E5%BC%95%E6%93%8E/10982158?fromModule=lemma_inlink">渲染引擎</a>、浏览器语言、<a href="https://baike.baidu.com/item/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8F%92%E4%BB%B6/8330255?fromModule=lemma_inlink">浏览器插件</a>等。</p>
<p>浏览器User-Agent通常由浏览器标识、渲染引擎标识、版本信息这三部分来构成。我们可以在这个位置来查看我们的User-Agent请求头值。</p>
<p>当我们需要做反爬虫时就可以拿这个字段来判断该请求是否是否来自真正的浏览器，当然这个是可以绕过的，很多爬虫程序会通过修改这个请求头来骗过我们的识别，所以我们可以在该情况下做一些加强的限制。</p>
<p>1、增加访问频率限制，当某个同样的User-Agent在单位时间内访问频率过高，加入黑名单，限制其访问.</p>
<p>2、通过修改nginx配置文件直接返回403不让其访问</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$http_user_agent</span> ~* <span class="token string">'curl|baidu|111111'</span><span class="token punctuation">)</span>   <span class="token comment">#~为匹配 ~*为忽略大小写匹配</span>

<span class="token punctuation">&#123;</span>

    <span class="token builtin class-name">return</span> <span class="token number">403</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>http</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
        <tag>ua</tag>
      </tags>
  </entry>
  <entry>
    <title>vim操作命令</title>
    <url>/post/535001ed.html</url>
    <content><![CDATA[<h2 id="删除行"><a href="#删除行" class="headerlink" title="删除行"></a>删除行</h2><pre class="line-numbers language-none"><code class="language-none">dd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="跳转到文件头部"><a href="#跳转到文件头部" class="headerlink" title="跳转到文件头部"></a>跳转到文件头部</h2><pre class="line-numbers language-none"><code class="language-none">gg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="跳转到文件尾部"><a href="#跳转到文件尾部" class="headerlink" title="跳转到文件尾部"></a>跳转到文件尾部</h2><pre class="line-numbers language-none"><code class="language-none">shift+G<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="指定要删除的行范围"><a href="#指定要删除的行范围" class="headerlink" title="指定要删除的行范围"></a><strong>指定要删除的行范围</strong></h2><p>无需指定从当前行到底部要删除多少行，您只需告诉 Vim 它应该从哪一行开始删除，一直到哪一行。</p>
<p>以下是删除一系列行的语法：</p>
<pre class="line-numbers language-none"><code class="language-none">:[begin],[end]d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>让我们分解一下这个语法…</p>
<ul>
<li>:（冒号）表示它是一个 Vim 命令。</li>
<li>begin告诉 Vim 从哪一行开始</li>
<li>end告诉 Vim 要删除的最后一行是什么</li>
<li>dVim 中的删除命令</li>
</ul>
<p>此外，以下是用于指定范围的字符（用于“开始”和“结束”）：</p>
<ul>
<li>.（当前行）</li>
<li>$（文件中的最后一行）</li>
<li>%（所有行）</li>
</ul>
<p>为了从几个例子中学习，让我们来看看它们。</p>
<ul>
<li>:10,45d- 从第 10 行删除到第 45 行</li>
<li>:.,$d- 从当前行删除到最后一行</li>
<li>:.,1d- 从当前行删除到文件开头</li>
<li>:dgg- 从当前行删除到文件开头</li>
</ul>
<h2 id="显示行号"><a href="#显示行号" class="headerlink" title="显示行号"></a>显示行号</h2><pre class="line-numbers language-none"><code class="language-none">:set number<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>zip解压缩命令</title>
    <url>/post/ec18e381.html</url>
    <content><![CDATA[<h1 id="zip解压缩命令"><a href="#zip解压缩命令" class="headerlink" title="zip解压缩命令"></a>zip解压缩命令</h1><p><strong>zip语法:</strong></p>
<p>zip [-r] 参数1 参数2 …参数N</p>
<ul>
<li>-r,被压缩的包含文件夹的时候，需要使用-r选项，和rm、cp等命令的-r效果一致</li>
</ul>
<p>示例：</p>
<ul>
<li>zip text.zip a.txt b.txt c.txt</li>
</ul>
<p>将a.txt b.txt c.txt压缩到text.zip文件夹内</p>
<ul>
<li>zip -r text.zip test a.txt</li>
</ul>
<p>将test a.txt压缩到test.zip文件夹内</p>
<p><strong>unzip语法:</strong></p>
<p>unzip [-d] 参数</p>
<ul>
<li>-d,指定要解压的位置</li>
<li>参数，被解压的zip压缩包文件</li>
</ul>
<p>示例:</p>
<ul>
<li>unzip text.zip,将text.zip解压到当前目录</li>
<li>unzip text.zip -d &#x2F;home&#x2F;text,将text解压到&#x2F;home&#x2F;text</li>
</ul>
]]></content>
      <categories>
        <category>日常命令</category>
      </categories>
      <tags>
        <tag>zip</tag>
      </tags>
  </entry>
  <entry>
    <title>不需要运行进入docker 容器</title>
    <url>/post/fe28043d.html</url>
    <content><![CDATA[<h1 id="不需要运行进入docker-容器"><a href="#不需要运行进入docker-容器" class="headerlink" title="不需要运行进入docker 容器"></a>不需要运行进入docker 容器</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run -it 镜像id /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>使用rsync命令</title>
    <url>/post/645ded65.html</url>
    <content><![CDATA[<h1 id="本地上传至远程"><a href="#本地上传至远程" class="headerlink" title="本地上传至远程"></a>本地上传至远程</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rsync</span> -av localPath username@ip:remotepath<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li><p>–progress 参数 可显示进度条</p>
</li>
<li><p>-azvrtopg 增量更新</p>
</li>
<li><p>–exclude&#x3D;’path’ 忽略文件夹或某个文件</p>
</li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>rsync</tag>
      </tags>
  </entry>
  <entry>
    <title>使用scp命令传输文件到服务器</title>
    <url>/post/6fb886e2.html</url>
    <content><![CDATA[<h1 id="使用scp命令"><a href="#使用scp命令" class="headerlink" title="使用scp命令"></a>使用scp命令</h1><p>上传本地文件到服务器：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">scp</span> /path/filename username@servername:/path/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>从服务器上下载文件：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">scp</span> username@servername:/path/filename /var/www/local_dir（本地目录）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>从服务器下载整个目录：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">scp</span> -r username@servername:/var/www/remote_dir/（远程目录） /var/www/local_dir（本地目录）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>上传目录到服务器：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">scp</span> -r local_dir username@servername:remote_dir<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>文件</tag>
        <tag>scp</tag>
      </tags>
  </entry>
  <entry>
    <title>单纯启动docker容器不启动服务</title>
    <url>/post/c24217a1.html</url>
    <content><![CDATA[<pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker run -itd --name spp 镜像名:标签 bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>响应头隐藏nginx版本信息</title>
    <url>/post/42c17650.html</url>
    <content><![CDATA[<h2 id="隐藏nginx版本号"><a href="#隐藏nginx版本号" class="headerlink" title="隐藏nginx版本号"></a>隐藏nginx版本号</h2><p>打开nginx.conf</p>
<p>在http块中增加</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#server_tokens off;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>重启</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl reload nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="隐藏nginx名称"><a href="#隐藏nginx名称" class="headerlink" title="隐藏nginx名称"></a>隐藏nginx名称</h2><p>修改源码并重新编译</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> http://nginx.org/download/nginx-1.24.0.tar.gz 
<span class="token function">tar</span> -zxvf nginx-1.24.0.tar.gz
<span class="token builtin class-name">cd</span> nginx-1.24.0/src/http
<span class="token function">vim</span> ngx_http_header_filter_module.c <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>修改文件</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#修改Server为其他名称或留空</span>
static u_char ngx_http_server_string<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Server: nginx"</span> CRLF<span class="token punctuation">;</span>
static u_char ngx_http_server_full_string<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Server: "</span> NGINX_VER CRLF<span class="token punctuation">;</span>
static u_char ngx_http_server_build_string<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Server: "</span> NGINX_VER_BUILD CRLF<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>编译</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt-get</span> update
<span class="token function">apt-get</span> <span class="token function">install</span> -y build-essential libpcre3 libpcre3-dev zlib1g zlib1g-dev libssl-dev
<span class="token builtin class-name">cd</span> nginx-1.24.0
./configure
<span class="token function">make</span>
<span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
  </entry>
  <entry>
    <title>如何使用高阶函数编程提升代码的简洁性</title>
    <url>/post/54f8f4a7.html</url>
    <content><![CDATA[<p>摘要<br>函数是 Go 语言的一等公民，本文采用一种高阶函数的方式，抽象了使用 gorm 查询 DB 的查询条件，将多个表的各种复杂的组合查询抽象成了一个统一的方法和一个配置类，提升了代码的简洁和优雅，同时可以提升开发人员的效率。</p>
<span id="more"></span>
<p>背景<br>有一张 DB 表，业务上需要按照这个表里的不同字段做筛选查询，这是一个非常普遍的需求，我相信这种需求对于每个做业务开发的人都是绕不开的。比如我们有一张存储用户信息的表，简化之后的表结构如下：</p>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE &#96;user_info&#96; (
  &#96;id&#96; bigint unsigned NOT NULL AUTO_INCREMENT COMMENT &#39;自增主键&#39;,
  &#96;user_id&#96; bigint NOT NULL COMMENT &#39;用户id&#39;,
  &#96;user_name&#96; varchar NOT NULL COMMENT &#39;用户姓名&#39;,
  &#96;role&#96; int NOT NULL DEFAULT &#39;0&#39; COMMENT &#39;角色&#39;,
  &#96;status&#96; int NOT NULL DEFAULT &#39;0&#39; COMMENT &#39;状态&#39;,
  PRIMARY KEY (&#96;id&#96;),
) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8mb4 COMMENT&#x3D;&#39;用户信息表&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这个表里有几个关键字段，user_id、user_name 、 role、status。如果我们想按照 user_id 来做筛选，那我们一般是在 dao 层写一个这样的方法(为了示例代码的简洁，这里所有示例代码都省去了错误处理部分)：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">GetUserInfoByUid</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> userID <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>resource<span class="token punctuation">.</span>UserInfo<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   db <span class="token operator">:=</span> <span class="token function">GetDB</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>
   db <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">Table</span><span class="token punctuation">(</span>resource<span class="token punctuation">.</span>UserInfo<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">TableName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
   <span class="token keyword">var</span> infos <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>resource<span class="token punctuation">.</span>UserInfo
   db <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">"user_id = ?"</span><span class="token punctuation">,</span> userID<span class="token punctuation">)</span>
   db<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>infos<span class="token punctuation">)</span>
   <span class="token keyword">return</span> infos
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果业务上又需要按照 user_name 来查询，那我们就需要再写一个类似的方法按照 user_name 来查询：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">GetUserInfoByName</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>resource<span class="token punctuation">.</span>UserInfo<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   db <span class="token operator">:=</span> <span class="token function">GetDB</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>
   db <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">Table</span><span class="token punctuation">(</span>resource<span class="token punctuation">.</span>UserInfo<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">TableName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
   <span class="token keyword">var</span> infos <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>resource<span class="token punctuation">.</span>UserInfo
   db <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">"user_name = ?"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>
   db<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>infos<span class="token punctuation">)</span>
   <span class="token keyword">return</span> infos
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看到，两个方法的代码极度相似，如果再需要按照 role 或者 status 查询，那不得不再来几个方法，导致相似的方法非常多。当然很容易想到，我们可以用一个方法，多几个入参的形式来解决这个问题，于是，我们把上面两个方法合并成下面这种方法，能够支持按照多个字段筛选查询：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">GetUserInfo</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> userID <span class="token builtin">int64</span><span class="token punctuation">,</span> name <span class="token builtin">string</span><span class="token punctuation">,</span> role <span class="token builtin">int</span><span class="token punctuation">,</span> status <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>resource<span class="token punctuation">.</span>UserInfo<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   db <span class="token operator">:=</span> <span class="token function">GetDB</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>
   db <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">Table</span><span class="token punctuation">(</span>resource<span class="token punctuation">.</span>UserInfo<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">TableName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
   <span class="token keyword">var</span> infos <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>resource<span class="token punctuation">.</span>UserInfo
   <span class="token keyword">if</span> userID <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
      db <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">"user_id = ?"</span><span class="token punctuation">,</span> userID<span class="token punctuation">)</span>
   <span class="token punctuation">&#125;</span>
   <span class="token keyword">if</span> name <span class="token operator">!=</span> <span class="token string">""</span> <span class="token punctuation">&#123;</span>
      db <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">"user_name = ?"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>
   <span class="token punctuation">&#125;</span>
   <span class="token keyword">if</span> role <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
      db <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">"role = ?"</span><span class="token punctuation">,</span> role<span class="token punctuation">)</span>
   <span class="token punctuation">&#125;</span>
   <span class="token keyword">if</span> status <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
      db <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">"status = ?"</span><span class="token punctuation">,</span> status<span class="token punctuation">)</span>
   <span class="token punctuation">&#125;</span>
   db<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>infos<span class="token punctuation">)</span>
   <span class="token keyword">return</span> infos
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>相应地，调用该方法的代码也需要做出改变：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//只根据UserID查询</span>
infos <span class="token operator">:=</span> <span class="token function">GetUserInfo</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> userID<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token comment">//只根据UserName查询</span>
infos <span class="token operator">:=</span> <span class="token function">GetUserInfo</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token comment">//只根据Role查询</span>
infos <span class="token operator">:=</span> <span class="token function">GetUserInfo</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> role<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token comment">//只根据Status查询</span>
infos <span class="token operator">:=</span> <span class="token function">GetUserInfo</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> status<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这种代码无论是写代码的人还是读代码的人，都会感觉非常难受。我们这里只列举了四个参数，可以想想这个表里如果有十几个到二十个字段都需要做筛选查询，这种代码看上去是一种什么样的感觉。首先，GetUserInfo 方法本身入参非常多，里面充斥着各种 !&#x3D; 0 和 !&#x3D; “”的判断，并且需要注意的是，0 一定不能作为字段的有效值，否则 !&#x3D; 0 这种判断就会有问题。其次，作为调用方，明明只是根据一个字段筛选查询，却不得不为其他参数填充一个 0 或者””来占位，而且调用者要特别谨慎，因为一不小心，就可能会把 role 填到了 status 的位置上去，因为他们的类型都一样，编译器不会检查出任何错误，很容易搞出业务 bug。</p>
<p>解决方案<br>如果说解决这种问题有段位，那么以上的写法只能算是青铜，接下来我们看看白银、黄金和王者。</p>
<p>白银<br>解决这种问题，一种比较常见的方案是，新建一个结构体，把各种查询的字段都放在这个结构体中，然后把这个结构体作为入参传入到 dao 层的查询方法中。而在调用 dao 方法的地方，根据各自的需要，构建包含不同字段的结构体。在这个例子中，我们可以构建一个 UserInfo 的结构体如下：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> UserInfo <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
   UserID <span class="token builtin">int64</span>
   Name <span class="token builtin">string</span>
   Role <span class="token builtin">int32</span>
   Status <span class="token builtin">int32</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>把 UserInfo 作为入参传给 GetUserInfo 方法，于是 GetUserInfo 方法变成了这样：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">GetUserInfo</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> info <span class="token operator">*</span>UserInfo<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>resource<span class="token punctuation">.</span>UserInfo<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   db <span class="token operator">:=</span> <span class="token function">GetDB</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>
   db <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">Table</span><span class="token punctuation">(</span>resource<span class="token punctuation">.</span>UserInfo<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">TableName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
   <span class="token keyword">var</span> infos <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>resource<span class="token punctuation">.</span>UserInfo
   <span class="token keyword">if</span> info<span class="token punctuation">.</span>UserID <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
      db <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">"user_id = ?"</span><span class="token punctuation">,</span> info<span class="token punctuation">.</span>UserID<span class="token punctuation">)</span>
   <span class="token punctuation">&#125;</span>
   <span class="token keyword">if</span> info<span class="token punctuation">.</span>Name <span class="token operator">!=</span> <span class="token string">""</span> <span class="token punctuation">&#123;</span>
      db <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">"user_name = ?"</span><span class="token punctuation">,</span> info<span class="token punctuation">.</span>Name<span class="token punctuation">)</span>
   <span class="token punctuation">&#125;</span>
   <span class="token keyword">if</span> info<span class="token punctuation">.</span>Role <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
      db <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">"role = ?"</span><span class="token punctuation">,</span> info<span class="token punctuation">.</span>Role<span class="token punctuation">)</span>
   <span class="token punctuation">&#125;</span>
   <span class="token keyword">if</span> info<span class="token punctuation">.</span>Status <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
      db <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">"status = ?"</span><span class="token punctuation">,</span> info<span class="token punctuation">.</span>Status<span class="token punctuation">)</span>
   <span class="token punctuation">&#125;</span>
   db<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>infos<span class="token punctuation">)</span>
   <span class="token keyword">return</span> infos
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>相应地，调用该方法的代码也需要变动：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//只根据userD查询</span>
info <span class="token operator">:=</span> <span class="token operator">&amp;</span>UserInfo<span class="token punctuation">&#123;</span>
   UserID<span class="token punctuation">:</span> userID<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span>
infos <span class="token operator">:=</span> <span class="token function">GetUserInfo</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> info<span class="token punctuation">)</span>
<span class="token comment">//只根据name查询</span>
info <span class="token operator">:=</span> <span class="token operator">&amp;</span>UserInfo<span class="token punctuation">&#123;</span>
   Name<span class="token punctuation">:</span> name<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span>
infos <span class="token operator">:=</span> <span class="token function">GetUserInfo</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> info<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这个代码写到这里，相比最开始的方法其实已经好了不少，至少 dao 层的方法从很多个入参变成了一个，调用方的代码也可以根据自己的需要构建参数，不需要很多空占位符。但是存在的问题也比较明显：仍然有很多判空不说，还引入了一个多余的结构体。如果我们就到此结束的话，多少有点遗憾。</p>
<p>另外，如果我们再扩展一下业务场景，我们使用的不是等值查询，而是多值查询或者区间查询，比如查询 status in (a, b)，那上面的代码又怎么扩展呢？是不是又要引入一个方法，方法繁琐暂且不说，方法名叫啥都会让我们纠结很久；或许可以尝试把每个参数都从单值扩展成数组，然后赋值的地方从 &#x3D; 改为 in()的方式，所有参数查询都使用 in 显然对性能不是那么友好。</p>
<p>黄金<br>接下来我们看看黄金的解法。在上面的方法中，我们引入了一个多余的结构体，并且无法避免在 dao 层的方法中做了很多判空赋值。那么我们能不能不引入 UserInfo 这个多余的结构体，并且也避免这些丑陋的判空？答案是可以的，函数式编程可以很好地解决这个问题，首先我们需要定义一个函数类型：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Option <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token operator">*</span>gorm<span class="token punctuation">.</span>DB<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>定义 Option 是一个函数，这个函数的入参类型是*gorm.DB，返回值为空。</p>
<p>然后针对 DB 表中每个需要筛选查询的字段定义一个函数，为这个字段赋值，像下面这样：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">UserID</span><span class="token punctuation">(</span>userID <span class="token builtin">int64</span><span class="token punctuation">)</span> Option <span class="token punctuation">&#123;</span>
   <span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>db <span class="token operator">*</span>gorm<span class="token punctuation">.</span>DB<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">"`user_id` = ?"</span><span class="token punctuation">,</span> userID<span class="token punctuation">)</span>
   <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">UserName</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span> Option <span class="token punctuation">&#123;</span>
   <span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>db <span class="token operator">*</span>gorm<span class="token punctuation">.</span>DB<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">"`user_name` = ?"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>
   <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">Role</span><span class="token punctuation">(</span>role <span class="token builtin">int32</span><span class="token punctuation">)</span> Option <span class="token punctuation">&#123;</span>
   <span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>db <span class="token operator">*</span>gorm<span class="token punctuation">.</span>DB<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">"`role` = ?"</span><span class="token punctuation">,</span> role<span class="token punctuation">)</span>
   <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">Status</span><span class="token punctuation">(</span>status <span class="token builtin">int32</span><span class="token punctuation">)</span> Option <span class="token punctuation">&#123;</span>
   <span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>db <span class="token operator">*</span>gorm<span class="token punctuation">.</span>DB<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">"`status` = ?"</span><span class="token punctuation">,</span> status<span class="token punctuation">)</span>
   <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上面这组代码中，入参是一个字段的筛选值，返回的是一个 Option 函数，而这个函数的功能是把入参赋值给当前的【db *gorm.DB】对象。这也就是我们在文章一开始就提到的高阶函数，跟我们普通的函数不太一样，普通的函数返回的是一个简单类型的值或者一个封装类型的结构体，而这种高阶函数返回的是一个具备某种功能的函数。这里多说一句，虽然 go 语言很好地支持了函数式编程，但是由于其目前缺少对泛型的支持，导致高阶函数编程的使用并没有给开发者带来更多的便利，因此在平时业务代码中写高阶函数还是略为少见。而熟悉 JAVA 的同学都知道，JAVA 中的 Map、Reduce、Filter 等高阶函数使用起来非常的舒服。</p>
<p>好，有了这一组函数之后，我们来看看 dao 层的查询方法怎么写：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">GetUserInfo</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> options <span class="token operator">...</span><span class="token keyword">func</span><span class="token punctuation">(</span>option <span class="token operator">*</span>gorm<span class="token punctuation">.</span>DB<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>resource<span class="token punctuation">.</span>UserInfo<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   db <span class="token operator">:=</span> <span class="token function">GetDB</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>
   db <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">Table</span><span class="token punctuation">(</span>resource<span class="token punctuation">.</span>UserInfo<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">TableName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
   <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> option <span class="token operator">:=</span> <span class="token keyword">range</span> options <span class="token punctuation">&#123;</span>
      <span class="token function">option</span><span class="token punctuation">(</span>db<span class="token punctuation">)</span>
   <span class="token punctuation">&#125;</span>
   <span class="token keyword">var</span> infos <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>resource<span class="token punctuation">.</span>UserInfo
   db<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>infos<span class="token punctuation">)</span>
   <span class="token keyword">return</span> infos
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>没有对比就没有伤害，通过和最开始的方法比较，可以看到方法的入参由多个不同类型的参数变成了一组相同类型的函数，因此在处理这些参数的时候，也无需一个一个的判空，而是直接使用一个 for 循环就搞定，相比之前已经简洁了很多。</p>
<p>那么调用该方法的代码怎么写呢，这里直接给出来：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//只使用userID查询</span>
infos <span class="token operator">:=</span> <span class="token function">GetUserInfo</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token function">UserID</span><span class="token punctuation">(</span>userID<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">//只使用userName查询</span>
infos <span class="token operator">:=</span> <span class="token function">GetUserInfo</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token function">UserName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">//使用role和status同时查询</span>
infos <span class="token operator">:=</span> <span class="token function">GetUserInfo</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token function">Role</span><span class="token punctuation">(</span>role<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Status</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>无论是使用任意的单个参数还是使用多个参数组合查询，我们都随便写，不用关注参数顺序，简洁又清晰，可读性也是非常好。</p>
<p>再来考虑上面提到的扩展场景，如果我们需要多值查询，比如查询多个 status，那么我们只需要在 Option 中增加一个小小的函数即可：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">StatusIn</span><span class="token punctuation">(</span>status <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int32</span><span class="token punctuation">)</span> Option <span class="token punctuation">&#123;</span>
   <span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>db <span class="token operator">*</span>gorm<span class="token punctuation">.</span>DB<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">"`status` in ?"</span><span class="token punctuation">,</span> status<span class="token punctuation">)</span>
   <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>对于其他字段或者等值查询也是同理，代码的简洁不言而喻。</p>
<p>王者<br>能优化到上面黄金的阶段，其实已经很简洁了，如果止步于此的话，也是完全可以的。但是如果还想进一步追求极致，那么请继续往下看！</p>
<p>在上面方法中，我们通过高阶函数已经很好地解决了对于一张表中多字段组合查询的代码繁琐问题，但是对于不同的表查询，仍然要针对每个表都写一个查询方法，那么还有没有进一步优化的空间呢？我们发现，在 Option 中定义的这一组高阶函数，压根与某张表没关系，他只是简单地给 gorm.DB 赋值。因此，如果我们有多张表，每个表里都有 user_id、is_deleted、create_time、update_time 这些公共的字段，那么我们完全不用再重复定义一次，只需要在 Option 中定义一个就够了，每张表的查询都可以复用这些函数。进一步思考，我们发现，Option 中维护的是一些傻瓜式的代码，根本不需要我们每次手动去写，可以使用脚本生成，扫描一遍 DB 的表，为每个不重复的字段生成一个 Equal 方法、In 方法、Greater 方法、Less 方法，就可以解决所有表中按照不同字段做等值查询、多值查询、区间查询。</p>
<p>解决了 Option 的问题之后，对于每个表的各种组合查询，就只需要写一个很简单的 Get 方法了，为了方便看，我们在这里再贴一次：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">GetUserInfo</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> options <span class="token operator">...</span><span class="token keyword">func</span><span class="token punctuation">(</span>option <span class="token operator">*</span>gorm<span class="token punctuation">.</span>DB<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>resource<span class="token punctuation">.</span>UserInfo<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   db <span class="token operator">:=</span> <span class="token function">GetDB</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>
   db <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">Table</span><span class="token punctuation">(</span>resource<span class="token punctuation">.</span>UserInfo<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">TableName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
   <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> option <span class="token operator">:=</span> <span class="token keyword">range</span> options <span class="token punctuation">&#123;</span>
      <span class="token function">option</span><span class="token punctuation">(</span>db<span class="token punctuation">)</span>
   <span class="token punctuation">&#125;</span>
   <span class="token keyword">var</span> infos <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>resource<span class="token punctuation">.</span>UserInfo
   db<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>infos<span class="token punctuation">)</span>
   <span class="token keyword">return</span> infos
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上面这个查询方法是针对 user_info 这个表写的，如果还有其他表，我们还需要为每个表都写一个和这个类似的 Get 方法。如果我们仔细观察每个表的 Get 方法，会发现这些方法其实就有两点不同：</p>
<p>返回值类型不一样；<br>TableName 不一样。<br>如果我们能解决这两个问题，那我们就能够使用一个方法解决所有表的查询。首先对于第一点返回值不一致的问题，可以参考 json.unmarshal 的做法，把返回类型以一个参数的形式传进来，因为传入的是指针类型，所以就不用再给返回值了；而对于 tableName 不一致的问题，其实可以和上面处理不同参数的方式一样，增加一个 Option 方法来解决：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">TableName</span><span class="token punctuation">(</span>tableName <span class="token builtin">string</span><span class="token punctuation">)</span> Option <span class="token punctuation">&#123;</span>
   <span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>db <span class="token operator">*</span>gorm<span class="token punctuation">.</span>DB<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      db<span class="token punctuation">.</span><span class="token function">Table</span><span class="token punctuation">(</span>tableName<span class="token punctuation">)</span>
   <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这样改造之后，我们的 dao 层查询方法就变成了这样：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">GetRecord</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> in <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> options <span class="token operator">...</span><span class="token keyword">func</span><span class="token punctuation">(</span>option <span class="token operator">*</span>gorm<span class="token punctuation">.</span>DB<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   db <span class="token operator">:=</span> <span class="token function">GetDB</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>
   <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> option <span class="token operator">:=</span> <span class="token keyword">range</span> options <span class="token punctuation">&#123;</span>
      <span class="token function">option</span><span class="token punctuation">(</span>db<span class="token punctuation">)</span>
   <span class="token punctuation">&#125;</span>
   db<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span>
   <span class="token keyword">return</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>注意，我们把方法名从之前的 GetUserInfo 变成了GetRecord，因为这个方法不仅能支持对于 user_info 表的查询，而且能够支持对一个库中所有表的查询。也就是说从最开始为每个表建一个类，每个类下面又写很多个查询方法，现在变成了所有表所有查询适用一个方法。</p>
<p>然后我们看看调用这个方法的代码怎么写：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//根据userID和userName查询</span>
<span class="token keyword">var</span> infos <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>resource<span class="token punctuation">.</span>UserInfo
<span class="token function">GetRecord</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token operator">&amp;</span>infos<span class="token punctuation">,</span> <span class="token function">TableName</span><span class="token punctuation">(</span>resource<span class="token punctuation">.</span>UserInfo<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">TableName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">UserID</span><span class="token punctuation">(</span>userID<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">UserName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>这里还是给出了查询 user_info 表的示例，在调用的地方指定 tableName 和返回类型。</p>
<p>经过这样的改造之后，我们最终实现了用一个简单的方法【GetRecord】 + 一个可自动生成的配置类【Option】对一个库中所有表的多种组合查询。代码的简洁和优雅又有了一些提升。美中不足的是，在调用查询方法的地方多传了两个参数，一个是返回值变量，一个是 tableName，多少显得有点不那么美观。</p>
<p>总结<br>这里通过对 grom 查询条件的抽象，大大简化了对 DB 组合查询的写法，提升了代码的简洁。对于其他 update、insert、delete 三种操作，也可以借用这种思想做一定程度的简化，因为篇幅关系我们不在这里赘述。如果大家还有其他想法，欢迎留言讨论！</p>
<p>参考文献<br><a href="https://commandcenter.blogspot.com/2014/01/self-referential-functions-and-design.html">https://commandcenter.blogspot.com/2014/01/self-referential-functions-and-design.html</a><br><a href="https://coolshell.cn/articles/21146.html">https://coolshell.cn/articles/21146.html</a></p>
<p>原文地址：<a href="https://mp.weixin.qq.com/s/w1ebAgnzfDzoGG0sn6KGlQ">https://mp.weixin.qq.com/s/w1ebAgnzfDzoGG0sn6KGlQ</a></p>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>编译nginx源码并制作镜像</title>
    <url>/post/11996117.html</url>
    <content><![CDATA[<h2 id="编译nginx"><a href="#编译nginx" class="headerlink" title="编译nginx"></a>编译nginx</h2><h3 id="下载源码并解压"><a href="#下载源码并解压" class="headerlink" title="下载源码并解压"></a>下载源码并解压</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> http://nginx.org/download/nginx-1.24.0.tar.gz
<span class="token function">tar</span> -zxvf nginx-1.24.0.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="安装环境并编译"><a href="#安装环境并编译" class="headerlink" title="安装环境并编译"></a>安装环境并编译</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt-get</span> update
<span class="token function">apt-get</span> <span class="token function">install</span> -y build-essential libpcre3 libpcre3-dev zlib1g zlib1g-dev libssl-dev
<span class="token builtin class-name">cd</span> nginx-1.24.0
./configure
<span class="token function">make</span>
<span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="制作镜像"><a href="#制作镜像" class="headerlink" title="制作镜像"></a>制作镜像</h2><p>拷贝相关文件到Dockerfile目录</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> /usr/local/nginx ./<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>生成一个conf文件</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">server <span class="token punctuation">&#123;</span>
        listen       <span class="token number">80</span><span class="token punctuation">;</span>
        server_name  localhost<span class="token punctuation">;</span>

        <span class="token comment">#charset koi8-r;</span>

        <span class="token comment">#access_log  logs/host.access.log  main;</span>

        location / <span class="token punctuation">&#123;</span>
            root   html<span class="token punctuation">;</span>
            index  index.html index.htm<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token comment">#error_page  404              /404.html;</span>

        <span class="token comment"># redirect server error pages to the static page /50x.html</span>
        <span class="token comment">#</span>
        error_page   <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span>  /50x.html<span class="token punctuation">;</span>
        location <span class="token operator">=</span> /50x.html <span class="token punctuation">&#123;</span>
            root   html<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token comment"># proxy the PHP scripts to Apache listening on 127.0.0.1:80</span>
        <span class="token comment">#</span>
        <span class="token comment">#location ~ \.php$ &#123;</span>
        <span class="token comment">#    proxy_pass   http://127.0.0.1;</span>
        <span class="token comment">#&#125;</span>

        <span class="token comment"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span>
        <span class="token comment">#</span>
        <span class="token comment">#location ~ \.php$ &#123;</span>
        <span class="token comment">#    root           html;</span>
        <span class="token comment">#    fastcgi_pass   127.0.0.1:9000;</span>
        <span class="token comment">#    fastcgi_index  index.php;</span>
        <span class="token comment">#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span>
        <span class="token comment">#    include        fastcgi_params;</span>
        <span class="token comment">#&#125;</span>

        <span class="token comment"># deny access to .htaccess files, if Apache's document root</span>
        <span class="token comment"># concurs with nginx's one</span>
        <span class="token comment">#</span>
        <span class="token comment">#location ~ /\.ht &#123;</span>
        <span class="token comment">#    deny  all;</span>
        <span class="token comment">#&#125;</span>
    <span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>生成一个nginx.conf文件</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#user  nginx;</span>
worker_processes  <span class="token number">1</span><span class="token punctuation">;</span>

error_log  /var/log/nginx/error.log warn<span class="token punctuation">;</span>
pid        /var/run/nginx.pid<span class="token punctuation">;</span>


events <span class="token punctuation">&#123;</span>
    worker_connections  <span class="token number">1024</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


http <span class="token punctuation">&#123;</span>
    include       /etc/nginx/mime.types<span class="token punctuation">;</span>
    default_type  application/octet-stream<span class="token punctuation">;</span>

    log_format  main  <span class="token string">'$remote_addr - $remote_user [$time_local] "$request" '</span>
                      <span class="token string">'$status $body_bytes_sent "$http_referer" '</span>
                      <span class="token string">'"$http_user_agent" "$http_x_forwarded_for"'</span><span class="token punctuation">;</span>

    access_log  /var/log/nginx/access.log  main<span class="token punctuation">;</span>

    sendfile        on<span class="token punctuation">;</span>
    <span class="token comment">#tcp_nopush     on;</span>

    keepalive_timeout  <span class="token number">65</span><span class="token punctuation">;</span>
    <span class="token comment">#gzip  on;</span>

    include /etc/nginx/conf.d/*.conf<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>编写Dockerfile文件</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">FROM ubuntu:latest

COPY ./nginx/ /usr/local/nginx/ 
COPY ./nginx/conf/* /etc/nginx/
COPY ./nginx.conf /etc/nginx/

WORKDIR /usr/local/nginx/html
RUN  <span class="token function">mkdir</span> /etc/nginx/conf.d <span class="token operator">&amp;&amp;</span> <span class="token function">mkdir</span> /var/log/nginx <span class="token operator">&amp;&amp;</span> <span class="token function">touch</span> /var/log/nginx/error.log
COPY ./default.conf /etc/nginx/conf.d
ENV <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span>:/usr/local/nginx/sbin
EXPOSE <span class="token number">80</span>
ENTRYPOINT <span class="token punctuation">[</span><span class="token string">"nginx"</span>,<span class="token string">"-g"</span>,<span class="token string">"daemon off;"</span><span class="token punctuation">]</span>
CMD <span class="token punctuation">[</span><span class="token string">"-c"</span>,<span class="token string">"/etc/nginx/nginx.conf"</span><span class="token punctuation">]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>制作镜像</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> build -t nginx:1.24.0 <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>获取项目中 golang 代码行数</title>
    <url>/post/7182060a.html</url>
    <content><![CDATA[<p>获取包</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go get -u github.com/hhatto/gocloc/cmd/gocloc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>在项目下执行命令</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gocloc  ./<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><img src="/upload/2022/03/image-8779d8ceda504a4e96579fa4fcb26844.png" alt="image.png"></p>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
</search>
