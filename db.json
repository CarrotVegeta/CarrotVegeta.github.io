{"meta":{"version":1,"warehouse":"4.0.1"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/pictures/1681230165886.jpg","path":"pictures/1681230165886.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/css/noscript.styl","path":"css/noscript.styl","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/canvas-nest.js","path":"js/canvas-nest.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/comments-buttons.js","path":"js/comments-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/comments.js","path":"js/comments.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/config.js","path":"js/config.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/pjax.js","path":"js/pjax.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schedule.js","path":"js/schedule.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/fancybox.js","path":"js/third-party/fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/pace.js","path":"js/third-party/pace.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/quicklink.js","path":"js/third-party/quicklink.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/baidu-analytics.js","path":"js/third-party/analytics/baidu-analytics.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/google-analytics.js","path":"js/third-party/analytics/google-analytics.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/growingio.js","path":"js/third-party/analytics/growingio.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/matomo.js","path":"js/third-party/analytics/matomo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/chatra.js","path":"js/third-party/chat/chatra.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/gitter.js","path":"js/third-party/chat/gitter.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/tidio.js","path":"js/third-party/chat/tidio.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/changyan.js","path":"js/third-party/comments/changyan.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/disqus.js","path":"js/third-party/comments/disqus.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/disqusjs.js","path":"js/third-party/comments/disqusjs.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/gitalk.js","path":"js/third-party/comments/gitalk.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/isso.js","path":"js/third-party/comments/isso.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/livere.js","path":"js/third-party/comments/livere.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/utterances.js","path":"js/third-party/comments/utterances.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/math/mathjax.js","path":"js/third-party/math/mathjax.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/math/katex.js","path":"js/third-party/math/katex.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/search/algolia-search.js","path":"js/third-party/search/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/search/local-search.js","path":"js/third-party/search/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/statistics/firestore.js","path":"js/third-party/statistics/firestore.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/statistics/lean-analytics.js","path":"js/third-party/statistics/lean-analytics.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/tags/mermaid.js","path":"js/third-party/tags/mermaid.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/tags/pdf.js","path":"js/third-party/tags/pdf.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"079c5f5741080670120f62b4cd7700aee5209fdd","modified":1682271146918},{"_id":"source/_data/footer.njk","hash":"d07c705cdce1ae2ba7296b4c05ae1081f82168cc","modified":1682269448219},{"_id":"source/_posts/GPG入门教程.md","hash":"65544b3aaa61708b2cb46b649e326f43bd59a9d1","modified":1682269448219},{"_id":"source/_posts/clickhouse数组函数操作.md","hash":"4c4ce2e87d4a0096263757b4dc9558e21fb5e2c4","modified":1682269448222},{"_id":"source/_posts/docker-compose执行模板文件构建镜像.md","hash":"75a9f259723a9024dadeb1c10ca6824300d2cf19","modified":1682269448222},{"_id":"source/_posts/2022-08-31-golang-统计代码行数.md","hash":"eb3ceba928536cf8524dd6dffe96e7a5bfda9581","modified":1682269448219},{"_id":"source/_posts/MongoDB备份与恢复.md","hash":"3fb5ad36ff1f674b166b17fae96fcef886c8f4fc","modified":1682269448221},{"_id":"source/_posts/git 报错refusing to merge unrelated histories，强制提交.md","hash":"c3e288ad06748b8c4b61009fe11012776548bbef","modified":1682269448223},{"_id":"source/_posts/channel的死锁和panic总结.md","hash":"1221fe024c7be1271b84fa477343424262198916","modified":1682269448221},{"_id":"source/_posts/git 查看提交历史记录.md","hash":"7f3cb5b4d6b5b4d998ab64bd2cd0c65bf2b4ede9","modified":1682269448223},{"_id":"source/_posts/clickhouse安装使用笔记.md","hash":"3454baf42c036d244b6fe81ace36c3ef4f1fdbe5","modified":1682269448221},{"_id":"source/_posts/git 设置ssh 代理.md","hash":"c7a578bbb2405fcaef548a5560ee65a047d18060","modified":1682269448223},{"_id":"source/_posts/git add 暂存.md","hash":"46adb1a38b234fd11fa5912e68e9e6de64334847","modified":1682269448222},{"_id":"source/_posts/git 配置http代理.md","hash":"ed5e85f5eb4845b6770a515bd7532a607f55a93e","modified":1682269448223},{"_id":"source/_posts/git 配置用户名邮箱.md","hash":"b2aefcc5b22d92b5b25c9db31d26da78f5adfe27","modified":1682269448223},{"_id":"source/_posts/docker拉取指定平台架构的镜像.md","hash":"eb1b194556c4b29c4db5191a0257818e9b6f3a63","modified":1682269448222},{"_id":"source/_posts/docker保存镜像到本地和加载镜像.md","hash":"4d97aa8db1cc75141d213b58a736a491b9199452","modified":1682269448222},{"_id":"source/_posts/go mod tidy 报错timeout.md","hash":"8c81ea8944fadb92e8f98c37dad1ef0b8c6bba2c","modified":1682269448223},{"_id":"source/_posts/golang AES算法 ECB模式加密.md","hash":"a3f69b521507dc89e13e5cafa7fbded07528a524","modified":1682269448224},{"_id":"source/_posts/golang 获取系统相关信息.md","hash":"fd459e14103ee266acb32c466b8228ea6c451ed6","modified":1682269448224},{"_id":"source/_posts/git tag 标签.md","hash":"dffb7021a1784ab8acdccf22c31f03f1b51d2312","modified":1682269448223},{"_id":"source/_posts/golang使用pprof进行性能分析.md","hash":"138115b7d452df175d7a74987d51609a68f9dbd0","modified":1682269448224},{"_id":"source/_posts/git 文件状态 、status.md","hash":"1492f2485853c8cd73ba7fae3c19a3de38fe5675","modified":1682269448223},{"_id":"source/_posts/golang执行cmd命令.md","hash":"2a08bde340605a047b460b4a6a050048f199e971","modified":1682269448224},{"_id":"source/_posts/golang字符串、json、map之间转换.md","hash":"bd82e58a687ab1a264978ffcee429ebc823b8946","modified":1682269448224},{"_id":"source/_posts/golang换行读写.md","hash":"3a4b456e85dbce5af86a438c76647dd45432de20","modified":1682269448225},{"_id":"source/_posts/golang私有仓库配置.md","hash":"1091c65111b6b6bb147d33e086073651ae371645","modified":1682269448225},{"_id":"source/_posts/golang AES算法 CBC加密.md","hash":"841f50235fa95342a36fa745ca66dd623b8d1b64","modified":1682269448224},{"_id":"source/_posts/golang远程调试.md","hash":"1a6e41d06d72666ace34e4776a6ec5255a938e2d","modified":1682269448225},{"_id":"source/_posts/go中new和make的区别.md","hash":"15b4a222b8b4afd7ef2aed78634b9b0c875a8022","modified":1682269448226},{"_id":"source/_posts/linux 命令行配置代理.md","hash":"b6db7a0e1f39059ff20ea3b468a440c430c3b49c","modified":1682269448226},{"_id":"source/_posts/golang操作redis.md","hash":"811e6d218c30ab3a24a950f3d7a09e403907abbd","modified":1682269448225},{"_id":"source/_posts/nginx 启动停止命令.md","hash":"334a92752f9c50a35ec399716b85cfaa5012129a","modified":1682269448226},{"_id":"source/_posts/golang用两个栈实现队列.md","hash":"a33ef64673da54d52c3ed4924b0361a6ba6fa2bf","modified":1682269448225},{"_id":"source/_posts/go中context的使用.md","hash":"3bad605a3cce8f43098b2b1f0814c259b4e282d6","modified":1682269448225},{"_id":"source/_posts/mysql命令行备份数据.md","hash":"35a3ea532b87ada74ac46201e509629721008069","modified":1682269448226},{"_id":"source/_posts/不需要运行金融docker容器.md","hash":"d162f4bfb3c4f60d7bc1afbe1c080f10cefdb10b","modified":1682269448227},{"_id":"source/_posts/使用rsync命令.md","hash":"44849779669d4c7fa599e7dbac4f366ed383e97e","modified":1682269448227},{"_id":"source/_posts/单纯启动docker容器不启动服务.md","hash":"3021d2b85fb919e5e8bc2ad1b70060002cf2fbd1","modified":1682269448228},{"_id":"source/_posts/nginx基本命令.md","hash":"6b981d476334fdc3fc647fa65ee8ab99f467b9b5","modified":1682269448226},{"_id":"source/_posts/nginx配置多个域名对应不同端口.md","hash":"be4d14d049c0f709ad377211f5867da00b99731a","modified":1682269448227},{"_id":"source/_posts/获取项目中 golang 代码行数.md","hash":"906d98485f49db682db44bfdcb90f38c1d7cd713","modified":1682269448228},{"_id":"source/about/index.md","hash":"fa8ee15de55e5c83a994cf2db783a34e80b6ae8f","modified":1682269448228},{"_id":"source/categories/index.md","hash":"f134fb1167ccef2c37f1e17e0111e2c5ee01d23b","modified":1682269448228},{"_id":"source/_posts/ssh隧道-能ssh就能http和tcp，通过ssh就能访问内网web页面和数据库.md","hash":"622a738482de9b1f807837a36760f044f1c5f490","modified":1682269448227},{"_id":"source/tags/index.md","hash":"2365e85f76268a3712b0fda3c305305e46d0d1b5","modified":1682269448229},{"_id":"source/_posts/使用scp命令传输文件到服务器.md","hash":"5088c1ec9030e6fb9e449ad77296950b48abd263","modified":1682269448227},{"_id":"source/pictures/1681230165886.jpg","hash":"0de77d6d55531fa27c0a652a43e956332e943e2e","modified":1682269448229},{"_id":"source/_posts/如何使用高阶函数编程提升代码的简洁性.md","hash":"14ed0ff79f74908b6dd6301880117ffdc79c025a","modified":1682269448228},{"_id":"themes/next/_config.yml","hash":"f59e648fc33bc687702eb3e05c15aae8154962f8","modified":1682270125010},{"_id":"themes/next/_vendors.yml","hash":"94f2df79d55bf83cb8cc5e27de4588c209c207c8","modified":1682270125035},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1682270125060},{"_id":"themes/next/package.json","hash":"23dc7478ce212975bae15b9758f3b92c93a378b8","modified":1682270128094},{"_id":"themes/next/renovate.json","hash":"cb29cc16e61b0b8a6dac34657d76822ae29ad5aa","modified":1682270128116},{"_id":"themes/next/LICENSE.md","hash":"68fc9a03d50fd4b5ea97092b05967d1819dea2c4","modified":1682270124959},{"_id":"themes/next/README.md","hash":"36c4b25587ca494102323dab5a38de5490451a64","modified":1682270124984},{"_id":"themes/next/docs/AUTHORS.md","hash":"a648823121563c34a177ae91f5a774b5e29f01a0","modified":1682270125132},{"_id":"themes/next/docs/LICENSE.txt","hash":"f5b14f791b7cfa1d16da981d929152e088a5d1b8","modified":1682270125157},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1682270125106},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1682270125583},{"_id":"themes/next/languages/ar.yml","hash":"7d0f39e8684284a04bb9808521c87fecda8bd131","modified":1682270125517},{"_id":"themes/next/languages/README.md","hash":"b2567e32805dda79601157351a07e5ca9fe01315","modified":1682270125495},{"_id":"themes/next/languages/bn.yml","hash":"9f791494afa263c3e31f14b8a5fa2996dfc834c0","modified":1682270125539},{"_id":"themes/next/languages/de.yml","hash":"79b37df731c29665dee6cd7c90d278e1edfb6e24","modified":1682270125561},{"_id":"themes/next/languages/en.yml","hash":"ba0fd79a2b1d8db01a034180556061745965ff05","modified":1682270125605},{"_id":"themes/next/languages/es.yml","hash":"dffc63ef42e1266b88e0acf08994fd17a9908d53","modified":1682270125627},{"_id":"themes/next/languages/fr.yml","hash":"44cd26479f503751329f6da2ed80cce1bbf18117","modified":1682270125672},{"_id":"themes/next/languages/fa.yml","hash":"f3ffc444599f4ac92d62e9ed00a1490ebc277d70","modified":1682270125649},{"_id":"themes/next/languages/id.yml","hash":"929df147f4f17d638b07de5fe52ca13e2549ab1c","modified":1682270125695},{"_id":"themes/next/languages/it.yml","hash":"16d716ecfd748def2f6486ef5a82d0ab7ceb4890","modified":1682270125717},{"_id":"themes/next/languages/ja.yml","hash":"543222bfc516aab6c33e8534f807972ecb8943a9","modified":1682270125739},{"_id":"themes/next/languages/ko.yml","hash":"d345a303310c8a5f4836c3683f3580f861ebd1b4","modified":1682270125761},{"_id":"themes/next/languages/nl.yml","hash":"3cb3687696635ec71b4ca40c5fc43b56acc8843e","modified":1682270125784},{"_id":"themes/next/languages/pt-BR.yml","hash":"76b8576ce228d540a16b1f0af5af2cce20923194","modified":1682270125807},{"_id":"themes/next/languages/pt.yml","hash":"70de366e10ea584ba039d40d6b35ac97f93454ad","modified":1682270125828},{"_id":"themes/next/languages/ru.yml","hash":"c6d8de0ff7d8148d09993257cfd3b7aca755696c","modified":1682270125850},{"_id":"themes/next/languages/si.yml","hash":"2d712eedf3f60d04d36c3108cf5a12e2a52e875c","modified":1682270125871},{"_id":"themes/next/languages/uk.yml","hash":"ff537047b4b4c3ca9a7b64fa7f428a9942751eeb","modified":1682270125338},{"_id":"themes/next/languages/vi.yml","hash":"7ebcba5e1128784195e4681dffc9d34c4e873fec","modified":1682270125360},{"_id":"themes/next/languages/th.yml","hash":"6829e998b39f8f143e20b276bb1f62d95a29de58","modified":1682270125893},{"_id":"themes/next/languages/zh-HK.yml","hash":"88ea50eeb9097ab4a87a44981a102d8594feb064","modified":1682270125404},{"_id":"themes/next/languages/zh-CN.yml","hash":"741d7efe0262c9cdc2c648014b55599665d90f6b","modified":1682270125383},{"_id":"themes/next/languages/tk.yml","hash":"511726054873f6f8d7ce0d2e803f6731de0ddbe7","modified":1682270125448},{"_id":"themes/next/layout/_layout.njk","hash":"fc0a45112f2dcfc2642404e8934ea32a793c3bd7","modified":1682270125939},{"_id":"themes/next/languages/zh-TW.yml","hash":"4695c87d6b81b3a23d16ad6513d9eaa925f8d8ad","modified":1682270125426},{"_id":"themes/next/languages/tr.yml","hash":"a57e4ed089b893a95f5e1ecff17ce625165f4d46","modified":1682270125473},{"_id":"themes/next/layout/index.njk","hash":"dd63e488ae8cc144335a5958acedf6a16edd7a92","modified":1682270126006},{"_id":"themes/next/layout/archive.njk","hash":"d759f4d2cf5ddc6875ea250113a00662c1caf6d1","modified":1682270125961},{"_id":"themes/next/layout/category.njk","hash":"c68b7343d0f8145010f93351908cc36ef6212ec1","modified":1682270125984},{"_id":"themes/next/layout/post.njk","hash":"0bfce9f133f501a9a4837257e3b862b3bbca15be","modified":1682270126051},{"_id":"themes/next/test/index.js","hash":"6bf0289846538be3e9a63809af98f00e1fbdd90b","modified":1682270134611},{"_id":"themes/next/layout/page.njk","hash":"b0660b2af0ac7d3fda14ca4d9f2c9e79ef06c6f9","modified":1682270126028},{"_id":"themes/next/layout/tag.njk","hash":"9e16ba20c28a7f2c6bc75aa427f48122301a30aa","modified":1682270126072},{"_id":"themes/next/docs/ru/README.md","hash":"ac3c4a7616ea80f0d32d68d6e53233952ba756dc","modified":1682270125201},{"_id":"themes/next/layout/_macro/post-collapse.njk","hash":"1a30d751871dabfa80940042ddb1f77d07d830b9","modified":1682270126115},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"a089f7a8368ab0b7d7b9b7ec0ac3767a453435df","modified":1682270125267},{"_id":"themes/next/docs/zh-CN/README.md","hash":"9bbdbb0656505acceef9b9895a576164175fe888","modified":1682270125294},{"_id":"themes/next/layout/_scripts/index.njk","hash":"6668878a0f9a1166c6a879755f54a08d942da870","modified":1682270127036},{"_id":"themes/next/layout/_scripts/vendors.njk","hash":"be80b9fe415a9a09d74c28e230995fd292dfc123","modified":1682270127058},{"_id":"themes/next/layout/_third-party/fancybox.njk","hash":"844559f46e2ff1c8be234d5763703106e2072a7b","modified":1682270127095},{"_id":"themes/next/layout/_third-party/index.njk","hash":"aa37f8e98208177b63e3328d6e53b022c6edf3b2","modified":1682270127117},{"_id":"themes/next/layout/_third-party/pace.njk","hash":"d7ad5714079f7f65446f880baf14722435ca9061","modified":1682270127138},{"_id":"themes/next/layout/_third-party/quicklink.njk","hash":"0efed71ed530447718c4ea5bbd5fc8695b0b0d5f","modified":1682270127161},{"_id":"themes/next/layout/_macro/post.njk","hash":"7e8268fd5cbd552322b276f52459fd187c2453d2","modified":1682270126141},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7a06d443f374bd1e84294067a0ac796afd9fbe60","modified":1682270125243},{"_id":"themes/next/layout/_partials/languages.njk","hash":"e43f22198cccb5f6e306b1ce0d28d12a4fb891f8","modified":1682270126265},{"_id":"themes/next/layout/_macro/sidebar.njk","hash":"f932e1ea4ebf06eba9b64e54c4851622895e56f9","modified":1682270126166},{"_id":"themes/next/scripts/events/index.js","hash":"bd9ea82376cd87df611ea3ae077875c7c595a3df","modified":1682270128180},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"872f01cb10e422a648ea505436532e776e92926b","modified":1682270128451},{"_id":"themes/next/layout/_partials/comments.njk","hash":"d0c470b0f6690aa217e9ada848c5e2e73fb27c6f","modified":1682270126208},{"_id":"themes/next/scripts/filters/locals.js","hash":"9eb5310664759931287dd28ea39165dfb67f12ed","modified":1682270128482},{"_id":"themes/next/layout/_partials/pagination.njk","hash":"bc719473ed5948ab6859449d60b8d36cfc1542b4","modified":1682270126290},{"_id":"themes/next/scripts/filters/post.js","hash":"fdc8a0af90035e89c3fcb754a0eb189b8951a2bc","modified":1682270128544},{"_id":"themes/next/scripts/filters/minify.js","hash":"ce8477e7fb226525bae5872cd68a1c2c23ad50c8","modified":1682270128512},{"_id":"themes/next/scripts/tags/button.js","hash":"c6ad2ed544fbb25ecb5d820c36e76302504271b7","modified":1682270129208},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"935a311142a409c1896b3ae3f01fe7a9e2db1134","modified":1682270129240},{"_id":"themes/next/scripts/tags/index.js","hash":"17f9451ce1f10f78437f52218757d38d4e1591b0","modified":1682270129329},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"92c19d796bdb3320df9caea59bf52df7a95d9da9","modified":1682270129269},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"9ed799c329abf830f623689d7e136991256a24ca","modified":1682270129299},{"_id":"themes/next/scripts/tags/label.js","hash":"8a73348186113bae0a51ea2f891c1bb882fab05a","modified":1682270129358},{"_id":"themes/next/scripts/tags/link-grid.js","hash":"18a483c2d5afd701f6080ffdddf2d1321370336c","modified":1682270129387},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"4fb01ca650fa8b256b8d48f50dc1b18350bd3d6d","modified":1682270129413},{"_id":"themes/next/scripts/tags/note.js","hash":"7b94ddb46b7d4b0fe815f2fbe4bd375f07f55363","modified":1682270129441},{"_id":"themes/next/scripts/tags/pdf.js","hash":"344636b6fd7e27e8831c1e194039afc0d61931cd","modified":1682270129468},{"_id":"themes/next/scripts/tags/video.js","hash":"2ee926448583be8f95af1f2884ae2c9c4830151d","modified":1682270129523},{"_id":"themes/next/scripts/tags/tabs.js","hash":"0eabe51da40b4b13e16419c8fe02452d9a4fef73","modified":1682270129496},{"_id":"themes/next/scripts/helpers/font.js","hash":"3394185a7f0393c16ce52c8028f90da3e9239c55","modified":1682270128959},{"_id":"themes/next/scripts/helpers/engine.js","hash":"d292b78485e8e8055712b0ed6de7cf559c5fbdcd","modified":1682270128929},{"_id":"themes/next/scripts/helpers/navigation.js","hash":"78107021101553c3d23e89290f7530b60cf4aa86","modified":1682270128990},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"226fccbe9c93265e65a300e3cb4bf6f9065cfdd7","modified":1682270129021},{"_id":"themes/next/scripts/helpers/next-paginator.js","hash":"e86c764b546e4fbb87970cabc4135a56f9ef9fe1","modified":1682270129064},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"fd24abfaba4d91923ddb6aecf0268b216678c8bd","modified":1682270129092},{"_id":"themes/next/scripts/helpers/next-vendors.js","hash":"afdd6a188a74c188f0dd154fac70efd4080ca262","modified":1682270129120},{"_id":"themes/next/layout/_partials/widgets.njk","hash":"e7f988ecddb2159313699a00827a45eca5622bd4","modified":1682270126315},{"_id":"themes/next/source/css/_colors.styl","hash":"3c6798c10cc220d83481cb3f3782e78558cee789","modified":1682270129585},{"_id":"themes/next/layout/_partials/footer.njk","hash":"c40760b559c516677c8b11a00ba50c011f2079fd","modified":1682270126234},{"_id":"themes/next/source/css/_mixins.styl","hash":"83647a6207333b9609ba90b0946b3fa9548e6381","modified":1682270129611},{"_id":"themes/next/source/css/noscript.styl","hash":"dadc81256afb127b77eac6763d5ee0ec9c77f0a3","modified":1682270129659},{"_id":"themes/next/source/css/main.styl","hash":"921a58577f411cf4eb5cfd66db0a241f8f88578c","modified":1682270129637},{"_id":"themes/next/source/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1682270133317},{"_id":"themes/next/source/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1682270133258},{"_id":"themes/next/source/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1682270133348},{"_id":"themes/next/source/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1682270133288},{"_id":"themes/next/source/js/canvas-nest.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1682270134545},{"_id":"themes/next/source/js/motion.js","hash":"770d63c26f22705311028a36b52e999cc8a2da82","modified":1682270133379},{"_id":"themes/next/source/js/next-boot.js","hash":"da0f07f9eaaa83de70128b0feaea3fdadb90457a","modified":1682270133411},{"_id":"themes/next/source/js/schedule.js","hash":"a1333258726caf84f368a8f8454639c7dc1626bb","modified":1682270133461},{"_id":"themes/next/source/js/pjax.js","hash":"b03ba78c6916ad2f390d55bc1bc18fafb64b0ebf","modified":1682270133431},{"_id":"themes/next/source/js/utils.js","hash":"5e1cf39de050964e97fb3ba0825aeec7f4bc36dd","modified":1682270133495},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1682270133134},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1682270133159},{"_id":"themes/next/source/images/logo.svg","hash":"099e11ab995a2c8981427a85476d082609848c77","modified":1682270133207},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1682270133094},{"_id":"themes/next/source/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1682270133114},{"_id":"themes/next/test/helpers/index.js","hash":"63ba28afed697f7b3574436b1133b8ecc9c0c357","modified":1682270134686},{"_id":"themes/next/source/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1682270133186},{"_id":"themes/next/test/helpers/font.js","hash":"342ef3c6fd2dcca2a8802a516ed6d7f389fd2ca2","modified":1682270134659},{"_id":"themes/next/test/helpers/next-url.js","hash":"a91d880cb75e0a8e65a7be4c7362b2c8ebfb7c4f","modified":1682270134716},{"_id":"themes/next/test/tags/center-quote.js","hash":"7667342fd1a1417eaf6a254012b84ae40e8d13dd","modified":1682270134824},{"_id":"themes/next/test/tags/caniuse.js","hash":"aa5e728445caeaf7c2ccd0f3fcb2cad0c93ca6d1","modified":1682270134791},{"_id":"themes/next/test/tags/button.js","hash":"48f2aa4c513e9e24bd6a811410520b74cd7ea88b","modified":1682270134762},{"_id":"themes/next/test/tags/index.js","hash":"e8779e54f0979b221858f8bb74dd081bb503b910","modified":1682270134883},{"_id":"themes/next/test/tags/label.js","hash":"4ebf3698c258ca978b997acbdd0dece44069c09d","modified":1682270134913},{"_id":"themes/next/test/tags/group-pictures.js","hash":"5c68ae0184f9da6e00ba199f2554d503d8e6da71","modified":1682270134854},{"_id":"themes/next/test/tags/mermaid.js","hash":"ab77be5f3c6d9a57c7b9dda6decf1906a736fef9","modified":1682270134974},{"_id":"themes/next/test/tags/pdf.js","hash":"fd6ea5123560a90f7e7c1eface23dbe1455db25f","modified":1682270135061},{"_id":"themes/next/test/tags/video.js","hash":"b796fc4dceb20a30e730c322bb5474c0162464cc","modified":1682270135121},{"_id":"themes/next/test/tags/link-grid.js","hash":"43d298fafb7c45a874b766d443843bd26346e689","modified":1682270134945},{"_id":"themes/next/test/tags/note.js","hash":"3dcfcd65bf9f326972ea7571fdb1444200f5d07e","modified":1682270135005},{"_id":"themes/next/test/tags/tabs.js","hash":"d63722919f9da2e44d6b952801e10a2915ea9c12","modified":1682270135091},{"_id":"themes/next/test/validate/index.js","hash":"5a95ccc8598667535bd022e988055c0e019f3670","modified":1682270135172},{"_id":"themes/next/layout/_third-party/analytics/cloudflare.njk","hash":"a5b8297c2c383124dd6a56e256ecc0c0dcf489be","modified":1682270127230},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.njk","hash":"6215309aee028dcb734452beec448c5afb6c63fc","modified":1682270127205},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.njk","hash":"d89066ff53879693f023e540d59c86137172c529","modified":1682270127256},{"_id":"themes/next/layout/_third-party/analytics/growingio.njk","hash":"8afaa772c390bd9d53a5cff9645ac3168334eb98","modified":1682270127280},{"_id":"themes/next/layout/_third-party/analytics/index.njk","hash":"f900306497b133e8b098bd9f4b96b93d1d96c185","modified":1682270127306},{"_id":"themes/next/layout/_third-party/analytics/plausible.njk","hash":"ef9f2bb7110507f1c4336800af9157d5fa9765bd","modified":1682270127387},{"_id":"themes/next/layout/_third-party/chat/chatra.njk","hash":"d7263fca16d0278ccf1f6aa1c6df6902a6344a09","modified":1682270127456},{"_id":"themes/next/layout/_third-party/analytics/microsoft-clarity.njk","hash":"9dc00fcb0a05899f048eace9f9160b78956655d5","modified":1682270127362},{"_id":"themes/next/layout/_third-party/analytics/matomo.njk","hash":"4e89648a8ec8194c5823064cbca39c938a799006","modified":1682270127330},{"_id":"themes/next/layout/_third-party/analytics/umami.njk","hash":"181f69b6718c7a8642a88652260cc0a26084a3ee","modified":1682270127411},{"_id":"themes/next/layout/_third-party/chat/gitter.njk","hash":"f8cc14b7aa949999a1faaeb7855e2f20b59a386d","modified":1682270127484},{"_id":"themes/next/layout/_third-party/chat/tidio.njk","hash":"02aab857c27fc103216029be991688b12a73a525","modified":1682270127509},{"_id":"themes/next/layout/_third-party/comments/disqus.njk","hash":"9375b19a89b7fa9474e558d085af5448d4c5c50c","modified":1682270127578},{"_id":"themes/next/layout/_third-party/comments/gitalk.njk","hash":"b63b7e2ede0d3e66e732fa1a06bda9b19e1e85d4","modified":1682270127627},{"_id":"themes/next/layout/_third-party/comments/changyan.njk","hash":"d1c950f8fbdf85e7a3eae5463767a89e858e8220","modified":1682270127553},{"_id":"themes/next/layout/_third-party/comments/disqusjs.njk","hash":"0749cb6902baecdfd01f779a2a2513f6d2f6a823","modified":1682270127603},{"_id":"themes/next/layout/_third-party/comments/isso.njk","hash":"64cc3bdaf644fd32c0d0a247f29f5b6904da9af3","modified":1682270127652},{"_id":"themes/next/layout/_third-party/comments/livere.njk","hash":"3b13b09fba84ec6000886890a6710736a2b8fafe","modified":1682270127675},{"_id":"themes/next/layout/_third-party/math/katex.njk","hash":"1ebf658690468ea197bdd0416eb7cfa4bd0b083a","modified":1682270127767},{"_id":"themes/next/layout/_third-party/math/mathjax.njk","hash":"3677017fd4572b158311f5f5d870590ab25184e0","modified":1682270127791},{"_id":"themes/next/layout/_third-party/comments/utterances.njk","hash":"5a94032bc3512a10ad4328fc19ec07b819a1d687","modified":1682270127700},{"_id":"themes/next/layout/_third-party/search/localsearch.njk","hash":"e45ea3542cdc9ed7ec8447b5e6f35df4c5e82758","modified":1682270127860},{"_id":"themes/next/layout/_third-party/search/algolia-search.njk","hash":"24ed76e0c72a25ac152820c750a05826a706b6f4","modified":1682270127835},{"_id":"themes/next/layout/_third-party/statistics/firestore.njk","hash":"d32ebe94560fa95824478ebbff531bffc47b194d","modified":1682270127939},{"_id":"themes/next/layout/_third-party/statistics/index.njk","hash":"568ddf7955d11d93fb5e842b403a7ac8b1b7fdb1","modified":1682270127966},{"_id":"themes/next/layout/_third-party/math/index.njk","hash":"abf37fc55aa86702118e8fdf5bf2d389dd589aa0","modified":1682270127744},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"a4bc501da0f22f7e420f0ca47e83988ce90b1368","modified":1682270127910},{"_id":"themes/next/layout/_third-party/tags/mermaid.njk","hash":"099e031f52fb8e47b3af5b2684737efc9e643ee7","modified":1682270128041},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.njk","hash":"2446e748cdc102c78492216319ac02148db7daf6","modified":1682270127993},{"_id":"themes/next/layout/_third-party/tags/pdf.njk","hash":"2c81984cc4f5123103460442f6e046f5b6c97127","modified":1682270128070},{"_id":"themes/next/layout/_partials/head/head-unique.njk","hash":"8da52a144060db1a0a088ccb2e6cc8376d1fce70","modified":1682270126358},{"_id":"themes/next/layout/_partials/page/categories.njk","hash":"17156d99941f28a225951ffdcfa9a115e20dc2d2","modified":1682270126609},{"_id":"themes/next/layout/_partials/page/page-header.njk","hash":"7ed4f102a1825195cff8d7995bf9219f323a9034","modified":1682270126633},{"_id":"themes/next/layout/_partials/page/schedule.njk","hash":"0f4bc8e257da60f77c0c1738607b2bde55810684","modified":1682270126658},{"_id":"themes/next/layout/_partials/page/tags.njk","hash":"a18d1598e36cc72f2b0b24c3cc3c5990dfaa3254","modified":1682270126683},{"_id":"themes/next/layout/_partials/page/breadcrumb.njk","hash":"89825e75cc45e9709fa6ba89883669eedaff6f46","modified":1682270126584},{"_id":"themes/next/layout/_partials/header/index.njk","hash":"650de421a8ce4cf685428ffbe0087ff84cbd1356","modified":1682270126452},{"_id":"themes/next/layout/_partials/header/brand.njk","hash":"dd9c4c03e99dfde0dfb8edefcb2c933f2f560efc","modified":1682270126428},{"_id":"themes/next/layout/_partials/header/menu.njk","hash":"ee6fc2f111572d3eeab0a2fecbb2d6b3e37ab26b","modified":1682270126514},{"_id":"themes/next/layout/_partials/header/sub-menu.njk","hash":"06480d8ec5f0b87eafd47f082f07968d7282dd5c","modified":1682270126540},{"_id":"themes/next/layout/_partials/header/menu-item.njk","hash":"41a8b0cc16f60fa085cb719d07216d86b6bc4bf8","modified":1682270126477},{"_id":"themes/next/layout/_partials/post/post-copyright.njk","hash":"79667fd0be85ee0e0c69e542e4f870b114c96c33","modified":1682270126726},{"_id":"themes/next/layout/_partials/post/post-related.njk","hash":"e0986db00a0201dd3c60570f964829c84ba5bc68","modified":1682270126804},{"_id":"themes/next/layout/_partials/post/post-followme.njk","hash":"c1e33b4889f75acc490af3c8bde0ec56c518ff41","modified":1682270126751},{"_id":"themes/next/layout/_partials/post/post-reward.njk","hash":"e8b8a7c41e9ec612d0c0c73419529d55d1c16256","modified":1682270126828},{"_id":"themes/next/layout/_partials/post/post-share.njk","hash":"3f28cc4411c0ffc0e41b7970d5ab329c7e46f497","modified":1682270126853},{"_id":"themes/next/layout/_partials/search/algolia-search.njk","hash":"efb2b6f19df02ba5ae623a1f274fff52aed21e6f","modified":1682270126897},{"_id":"themes/next/layout/_partials/post/post-meta.njk","hash":"9fa47e4fb342811da590ee4adc91cf81118c0a39","modified":1682270126778},{"_id":"themes/next/layout/_partials/search/index.njk","hash":"8f6f256ab3b351ffc80f1f3f1d9834e9a7cfac31","modified":1682270126922},{"_id":"themes/next/layout/_partials/search/localsearch.njk","hash":"661f7acae43f0be694266323320f977d84119abe","modified":1682270126952},{"_id":"themes/next/scripts/events/lib/config.js","hash":"9ec51eb61f7fee612ffc5252f489003a0fa301fc","modified":1682270128233},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"d987709267a1bc6e5014411e9983d7c49c102c16","modified":1682270128299},{"_id":"themes/next/scripts/events/lib/highlight.js","hash":"6aec7b2c38c50989a23bfaa0d560e75c7f553e12","modified":1682270128265},{"_id":"themes/next/scripts/events/lib/navigation.js","hash":"dd3562686d95a50375e6fd32e717ccb0d99c1e3d","modified":1682270128332},{"_id":"themes/next/scripts/events/lib/utils.js","hash":"ec996d0673f766167c86df0966e9da1ae036e103","modified":1682270128367},{"_id":"themes/next/scripts/events/lib/vendors.js","hash":"64e4024376b51fe81be7ad80235abdf0a83853bd","modified":1682270128401},{"_id":"themes/next/layout/_partials/sidebar/site-overview.njk","hash":"70342218473a6e6aa9148de06bfffe121afb8548","modified":1682270126997},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"19a402a225c31edffc50f202a14e0d582d3db23e","modified":1682270128643},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"5798cfc8f63665031dd3e01debed051628cec319","modified":1682270128601},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"93ee5f9109dad885dc38c49bcee630c10f9dce6e","modified":1682270128675},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"7f71d6b271ba65ff333d5682e7575711d368c0d2","modified":1682270128709},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"a600a98e7436edeb31e291abca359885567df3c9","modified":1682270128741},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"7bb7dafdd7f6bca8464b54e17e552ce7f1714195","modified":1682270128775},{"_id":"themes/next/scripts/filters/comment/isso.js","hash":"ff8b5b5145220a17d0ecd9508ba9bd2d3b2da47d","modified":1682270128811},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"5a07d8bb52bc1d51a624ca8db54be144566c306b","modified":1682270128844},{"_id":"themes/next/scripts/filters/comment/utterances.js","hash":"d3bded697bc32dace689d2a6dfb6eb7514169d15","modified":1682270128876},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"e3be898f5ebcf435a26542653a9297ff2c71aeb0","modified":1682270132983},{"_id":"themes/next/layout/_partials/head/head.njk","hash":"5388b157bba4a40b9312f4a45c6678974ccf0837","modified":1682270126384},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a1418c9dc8c0f1a0ad4ded0f4627c45bf0db1a10","modified":1682270132951},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"96e0a7c2a65ce68215e17e369085b2ea2f1334f2","modified":1682270132917},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"48f4f277946a168d0db1ea02804e85c22ca2c7db","modified":1682270133016},{"_id":"themes/next/source/css/_variables/base.styl","hash":"c4fc4e862d09221265ab1466085f057be2ad2e4d","modified":1682270133052},{"_id":"themes/next/source/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1682270133622},{"_id":"themes/next/source/js/third-party/fancybox.js","hash":"c098d14e65dd170537134358d4b8359ad0539c2c","modified":1682270133598},{"_id":"themes/next/source/js/schemes/muse.js","hash":"ba7ba2c129d1f240c6a22cec3e53f3f22af64b6b","modified":1682270133541},{"_id":"themes/next/source/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1682270133656},{"_id":"themes/next/source/css/_common/components/index.styl","hash":"2298e521253b3bf376a2412271bc2a7d305051f3","modified":1682270129758},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"90a86045a33c1bae49fc2f6fa1e1b53170c7f77b","modified":1682270129793},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"7664491542046df9a3887cf40a06e00c0b4086a9","modified":1682270129729},{"_id":"themes/next/source/css/_common/outline/index.styl","hash":"8e34df131830d4fa3725e4590a672ba1cf1903e5","modified":1682270130704},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a042571d85ff7265f799004239a45f36b716b8a6","modified":1682270131561},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"e4fecc889ba3317a64e9abba5842c79dff9b7827","modified":1682270131590},{"_id":"themes/next/source/css/_common/scaffolding/index.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1682270131621},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"64775c729512b30b144ab5ae9dc4a4dfd4e13f35","modified":1682270130739},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"e840b23d33023e6d45e018f6e84b683dd56efd8d","modified":1682270131702},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"782ee1fc5e669d3ddbfeb82b73ad7fe561f1a4fb","modified":1682270131729},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"d0a7c99095f490b0d2ed6b1be43d435960798cec","modified":1682270131533},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1682270131648},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"fa4fd8f76464e214fb7318f325b13c2b62f4b478","modified":1682270132297},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"f4228c759db4a650c8d38745c2edd1dc83c45687","modified":1682270131675},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"fb550935d374e0bdf1097fce187337dc05cad3e1","modified":1682270132331},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"ab16a3dcdc0393b9b582ef59dcc13db9320e917c","modified":1682270132397},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"d856127cd7e0a28a88edf0b2eb860ede9c3fdb60","modified":1682270132454},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"7fecfb76420f786d6bf60218a81705bb48fb1d18","modified":1682270132488},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"77b85d4de5ab747e04008ab31200311b29748740","modified":1682270132262},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"9dfe853c901bdc52fc950bacdf15484dbb9bf140","modified":1682270132202},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"485d23ccb42c0d0c8ead7ea8930dd3e06d79a285","modified":1682270132364},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1682270132591},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"b7f48be3c43bfa393d62142544a5487a67871713","modified":1682270132522},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1682270132625},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"ac2dc0ce9c775a83ef7132ae957b54539366ac9c","modified":1682270132685},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"547c0b5cd5e7ea10d21863d13a6b16579a49396c","modified":1682270132559},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"778ed2ad5643b93970c95626b325defeb586733f","modified":1682270132824},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"8000075b227749a7495eaf417cac6ccfbe441580","modified":1682270132858},{"_id":"themes/next/source/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1682270133708},{"_id":"themes/next/source/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":1682270133744},{"_id":"themes/next/source/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1682270133775},{"_id":"themes/next/source/js/third-party/analytics/matomo.js","hash":"c6a25b26a1443caa70b47fd3dfa282271574deb5","modified":1682270133811},{"_id":"themes/next/source/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1682270133864},{"_id":"themes/next/source/js/third-party/chat/gitter.js","hash":"cc38c94125f90dadde11b5ebac7d8bf99a1a08a2","modified":1682270133889},{"_id":"themes/next/source/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1682270133915},{"_id":"themes/next/source/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1682270133966},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"4266eed6f75625bb30ef0280dc5d4093e7c3beb1","modified":1682270132721},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"72dc825c50357402c342d62ab60fc0c478ab6bc1","modified":1682270132756},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"91dbf3ca5c3a613d4e30618c120da535bf2d0336","modified":1682270132791},{"_id":"themes/next/source/js/third-party/comments/disqus.js","hash":"da361917d65e5dca8362f8cdeb6c8cc0e8316cec","modified":1682270133991},{"_id":"themes/next/source/js/third-party/comments/disqusjs.js","hash":"1e826dea3f684c0515f362dc1352447a1f0eae71","modified":1682270134023},{"_id":"themes/next/source/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1682270134073},{"_id":"themes/next/source/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1682270134098},{"_id":"themes/next/source/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1682270134048},{"_id":"themes/next/source/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1682270134189},{"_id":"themes/next/source/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1682270134132},{"_id":"themes/next/source/js/third-party/search/algolia-search.js","hash":"fdb7b7cef1a147d897e7f7cd8903b58368ec2062","modified":1682270134288},{"_id":"themes/next/source/js/third-party/statistics/firestore.js","hash":"6e0682bb42170d61b13b786295f45f9c785f8b73","modified":1682270134392},{"_id":"themes/next/source/js/third-party/search/local-search.js","hash":"4536cb6d0a9bbaaa86fab3fa0101f6a3a3ec5a76","modified":1682270134326},{"_id":"themes/next/source/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1682270134223},{"_id":"themes/next/source/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1682270134513},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"8afdc311c6b8db121758371f95cf1c5e77354f42","modified":1682270129856},{"_id":"themes/next/source/js/third-party/statistics/lean-analytics.js","hash":"835cbf54c49ef1327f47df70ff2636ad36b6f57d","modified":1682270134430},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"b6e2eb1550a7845cb2adf86081a4ab6c7bde1e68","modified":1682270129888},{"_id":"themes/next/source/css/_common/components/pages/index.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1682270129923},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"1a81d1a71fcf0699629ce6e72dfd0a15f3a2dd0a","modified":1682270129987},{"_id":"themes/next/source/js/third-party/tags/mermaid.js","hash":"f27d817b0c2138dd3215b1f46af0753f60a008f3","modified":1682270134486},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"6b816c2511242ee503fb5f34cd3e4dcdafc06b85","modified":1682270129955},{"_id":"themes/next/source/css/_common/components/post/index.styl","hash":"098d4bd034e986fcf7e443eac4fc2193935461b7","modified":1682270130048},{"_id":"themes/next/source/css/_common/components/post/post-body.styl","hash":"d757768a58743601d0d84158ba955eb15d4c3c01","modified":1682270130085},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"aa366d37389760c8595529b850f461569577a1c5","modified":1682270130219},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"ec37a36e94ba791663607a5022f763915778578f","modified":1682270130120},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"1ecfd64507954810b07a9d21fb5305b5378feda0","modified":1682270130153},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"9ac6f477177264c26a46e8333b8456720a0444dc","modified":1682270130285},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"40c9839d3288c3b7de0bf38ac2e18f6c8eba6227","modified":1682270130353},{"_id":"themes/next/source/css/_common/components/post/post-footer.styl","hash":"11497388f124bfbb4001495a67d3629a9f618405","modified":1682270130187},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8f094c4ac17e2ab45569b12d157747f9c7333c12","modified":1682270130451},{"_id":"themes/next/source/css/_common/components/third-party/gitter.styl","hash":"35104dc6883a61c31e0e368dac8ac2f697be62fe","modified":1682270130489},{"_id":"themes/next/source/css/_common/components/third-party/index.styl","hash":"77550e0d3e029b7458e35d8c5ae1fbd612c9673b","modified":1682270130528},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"010c901e4ef49a606f8a350efbf09044e76d2ff3","modified":1682270130255},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"04cf4a69537fc14d3b8904f965d283356853847f","modified":1682270130319},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"9d995eb4871a6c273d9d51558676a1fdabf69e72","modified":1682270130564},{"_id":"themes/next/source/css/_common/components/third-party/utterances.styl","hash":"56d90ae0559caa55b75f3c300ff2711f9ed65fc4","modified":1682270130641},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e74f4bb47a101b014ee2a1783c87f3b87323f9a0","modified":1682270130879},{"_id":"themes/next/source/css/_common/components/third-party/disqusjs.styl","hash":"877a537d5b95beb048142e4fdee6f17e6ef9c7bb","modified":1682270130418},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"e72799ce3f9b79753e365b2f8c8ef6c310668d4a","modified":1682270130605},{"_id":"themes/next/source/css/_common/outline/footer/index.styl","hash":"4e967702cf4c637132346bc74ec8854426f1a68c","modified":1682270130810},{"_id":"themes/next/source/css/_common/outline/header/index.styl","hash":"6e0d0796ef7fbbb62ffdfb448753a850de82c74f","modified":1682270130955},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"38c64c2d04e46848382bfa246a0e9c508294767b","modified":1682270130917},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"bf3ad8b4268f763a1e26377681644887694bc009","modified":1682270131066},{"_id":"themes/next/source/css/_common/outline/sidebar/index.styl","hash":"da5e88f8debd5ac8d7af5c6ba6240df66104955f","modified":1682270131136},{"_id":"themes/next/source/css/_common/outline/sidebar/related-posts.styl","hash":"b05908f04ef95f2d91e6eba89b12411c378d050f","modified":1682270131182},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"a851e9d5aefcd027c95eeb323860b6da70f202d1","modified":1682270131031},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"b750af2fb833c10c4313b5a4258237161a7833d7","modified":1682270130996},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"52fc98b1435129eb3edb9293ced9e507741f1350","modified":1682270131221},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"5b38ac4a0f1ade0e681aff0e3366c481d9cf3dcd","modified":1682270131259},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"b926e368f702f8686aaa2eb98d3d2e533418958c","modified":1682270131330},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"c6a27beb3f741211a14576026f3b4cfc44cc6407","modified":1682270131293},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"9a7c71560fbdc936ad4e736fe15063ea3e8a644b","modified":1682270131443},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"24752d145c6fb8f5344dca9c7b9640839c02e009","modified":1682270131371},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"26dd0adfcb1db6df29c6090c8d7e9b5a43583fb0","modified":1682270131480},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"c2e354a565c8c1b32bd0ceacc972b17982758b67","modified":1682270131406},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"d6418fd2bbfba7b73ddf11ec62db9637fdf5d8af","modified":1682270131870},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"393ff96234e4196b569d4b11496774eb78e147de","modified":1682270131901},{"_id":"themes/next/source/css/_common/scaffolding/tags/index.styl","hash":"3f76c73a891bbc10679753e702feba9e8a5ffdd2","modified":1682270131931},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"debee14539272fbe3835a7d3853af2230baa3501","modified":1682270131960},{"_id":"themes/next/source/css/_common/scaffolding/tags/mermaid.styl","hash":"48d35dba575a7c9e8845b16652e76b7d4a4646de","modified":1682270132023},{"_id":"themes/next/source/css/_common/scaffolding/highlight/index.styl","hash":"9056be572ec1cfa429abb22be4b45a662d5b0fb1","modified":1682270131812},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"670fc109b56a010b166b86b616823a1aae97a738","modified":1682270131782},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b6654a1d7cf82577d8263faffee8af3ad4a5c0e8","modified":1682270132083},{"_id":"themes/next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"7f8a7345e6537a62cd9e9a94c8f7065b541d9b04","modified":1682270131992},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"7a39bcce7274284e87388743db62afc847fe6897","modified":1682270132119},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"98d4c20aff0f0fcfe1824017fb06ab21ef0d218e","modified":1682270132053},{"_id":"public/search.xml","hash":"dac1519c3c2558e8675e45006e1f05a06504c6ad","modified":1682514746670},{"_id":"public/about/index.html","hash":"a09c606a4de36906ec67e834a12368fba3101f3b","modified":1682514746670},{"_id":"public/categories/index.html","hash":"dbf5eaa37b99e6d7fcf63fc4287cde5840744f93","modified":1682514746670},{"_id":"public/tags/index.html","hash":"8d33507389a1d4a0aef1d1c3bb14f031a72b5a9f","modified":1682514746670},{"_id":"public/2023/04/24/clickhouse数组函数操作/index.html","hash":"2615e1fc3d93e2fa5368ce6d27f5be85e6d00bb5","modified":1682514746670},{"_id":"public/2022/08/31/2022-08-31-golang-统计代码行数/index.html","hash":"427245fefba6e0ed236c58b3cf6627e5bd889bf7","modified":1682514746670},{"_id":"public/2022/08/23/golang私有仓库配置/index.html","hash":"f1053894604bcec7205c5f83f0bb466057e00751","modified":1682514746670},{"_id":"public/2022/05/07/go中new和make的区别/index.html","hash":"b7ea910d95f5aa3f07924844afec03d055a291e9","modified":1682514746670},{"_id":"public/2022/05/05/go mod tidy 报错timeout/index.html","hash":"e48622ed2ec3a597a76f5fcb7ef37db68821566f","modified":1682514746670},{"_id":"public/2022/04/18/golang AES算法 ECB模式加密/index.html","hash":"7d3563a2414a7f1c616138e7cbf1cb5642d60aee","modified":1682514746670},{"_id":"public/2022/04/06/nginx 启动停止命令/index.html","hash":"8a452e807fc36a7b71fd780c292b2b3dc0565ecd","modified":1682514746670},{"_id":"public/2022/03/31/不需要运行金融docker容器/index.html","hash":"d13bc5b777073a4a79e5885811cd6bd385dd7e31","modified":1682514746670},{"_id":"public/2022/03/30/docker保存镜像到本地和加载镜像/index.html","hash":"585183c66185f486af68c72b051a6d84e74d7ab8","modified":1682514746670},{"_id":"public/2022/03/11/nginx基本命令/index.html","hash":"eaabf848a4ef5c8a08390c10024cd868ab397ca5","modified":1682514746670},{"_id":"public/2022/03/10/获取项目中 golang 代码行数/index.html","hash":"d9e0b01f6324836ae429a94adfa486d9c9377ecf","modified":1682514746670},{"_id":"public/2022/03/01/GPG入门教程/index.html","hash":"9a906949fc6b6bbcf7ede3dff2219af215a8a78e","modified":1682514746670},{"_id":"public/2022/03/01/golang 获取系统相关信息/index.html","hash":"d6188910549b7838430b1a637951fb05f29cf0f0","modified":1682514746670},{"_id":"public/2022/02/16/使用rsync命令/index.html","hash":"e207294d01f3b8e331d99c2805711ef80de7c23a","modified":1682514746670},{"_id":"public/2022/02/16/git 查看提交历史记录/index.html","hash":"acd34069941d6f5455a45e79beb04448e908cecf","modified":1682514746670},{"_id":"public/2022/02/16/git add 暂存/index.html","hash":"9d3e6e7c3abce5e38d2d25dffce8d63b27977a63","modified":1682514746670},{"_id":"public/2022/02/16/git 文件状态 、status/index.html","hash":"90c9c08eb99000006bb59d104cc0160da274f879","modified":1682514746670},{"_id":"public/2022/02/16/git 设置ssh 代理/index.html","hash":"1382f998a913b0862852174513a66ae8c3ecbc5f","modified":1682514746670},{"_id":"public/2022/02/16/git 配置http代理/index.html","hash":"3d25efb2bffdda559e180fad6b0192fd6fe81e5c","modified":1682514746670},{"_id":"public/2022/02/16/git 报错refusing to merge unrelated histories，强制提交/index.html","hash":"49afc9ef0abb126afb913ff56de637d6ca77738b","modified":1682514746670},{"_id":"public/2022/02/16/git 配置用户名邮箱/index.html","hash":"fe8e08121469f517e524787ec340c6f483f3e986","modified":1682514746670},{"_id":"public/2022/02/16/单纯启动docker容器不启动服务/index.html","hash":"d044f8d7018bd27dbbc13b26e3d004459d236f3f","modified":1682514746670},{"_id":"public/2022/02/16/docker拉取指定平台架构的镜像/index.html","hash":"b902fd16beea35ea693a61b7905477fa4bbc1a88","modified":1682514746670},{"_id":"public/2022/02/15/docker-compose执行模板文件构建镜像/index.html","hash":"f5bf6e4ef5a098e6244bcc6b8e882b0786adb4db","modified":1682514746670},{"_id":"public/2022/02/15/使用scp命令传输文件到服务器/index.html","hash":"7186592f8c5ce73efa199c705171083f3ee4bb58","modified":1682514746670},{"_id":"public/archives/index.html","hash":"d6e6a308898e45047d75c8fb7e3e4770835d13ce","modified":1682514746670},{"_id":"public/archives/page/2/index.html","hash":"b24439d1c22f338d76de6d020b44b8e08833cdde","modified":1682514746670},{"_id":"public/archives/page/3/index.html","hash":"10b7493355178918482c078cfd43e756a056f4ea","modified":1682514746670},{"_id":"public/archives/page/4/index.html","hash":"e9b7ea01f94c1c2cb41f1b744655b2e948cc38e7","modified":1682514746670},{"_id":"public/archives/page/5/index.html","hash":"d762ac5e7da4b9fd4b6c1d92848ec6b2e9462ae2","modified":1682514746670},{"_id":"public/archives/2022/index.html","hash":"2ed7c30a20ae4142e22fc5b77638001a457b317a","modified":1682514746670},{"_id":"public/archives/2022/page/3/index.html","hash":"bc0aaaecd7061588ac32671fdc4f17665bbf6429","modified":1682514746670},{"_id":"public/archives/2022/page/4/index.html","hash":"267e74ddaa17e1692e69eb06e192d4c42ad52d64","modified":1682514746670},{"_id":"public/archives/2022/page/5/index.html","hash":"b690b34c4f0105d5fcb0cd222ea8838b88c5a773","modified":1682514746670},{"_id":"public/archives/2022/02/index.html","hash":"ffaaabc852a2552b8484848524b22e5fc3e22b07","modified":1682514746670},{"_id":"public/archives/2022/02/page/2/index.html","hash":"9fecc52120832ef7b8e0074c41fe5b015fbf8825","modified":1682514746670},{"_id":"public/archives/2022/03/index.html","hash":"b8e6319d2fff2391c9c2f977c49c9411f78d65fc","modified":1682514746670},{"_id":"public/archives/2022/03/page/2/index.html","hash":"5d0530c33c3711d1ebdb98ff66be143d96606b44","modified":1682514746670},{"_id":"public/archives/2022/04/index.html","hash":"23a70f2167354ec9cd4b24d1ab524e8776a9d5a4","modified":1682514746670},{"_id":"public/archives/2022/05/index.html","hash":"dae961add4e3daf5d7ca2553a6f869fbb6dcecb8","modified":1682514746670},{"_id":"public/archives/2022/08/index.html","hash":"ac6beb728627b4d5eb65e76ab01d56dee17cdc20","modified":1682514746670},{"_id":"public/archives/2022/12/index.html","hash":"a066bc73eef7ebc3300bbd6a030d0e5ba66f4098","modified":1682514746670},{"_id":"public/archives/2023/index.html","hash":"bfb2cff112749bf7dbb6efadf101640301eae6da","modified":1682514746670},{"_id":"public/archives/2023/04/index.html","hash":"65cbdabd0f510257201038442bad681717b35493","modified":1682514746670},{"_id":"public/categories/golang/index.html","hash":"6a9106b48563d15ae38e9e341ae7829df9a7cd82","modified":1682514746670},{"_id":"public/categories/golang/page/2/index.html","hash":"ffc9193b0892e11edd90ea65624be71de2da0643","modified":1682514746670},{"_id":"public/categories/开发者手册/index.html","hash":"b15a9c1aee1d32f85127eba811534d985a75b80b","modified":1682514746670},{"_id":"public/categories/mongodb/index.html","hash":"63cdd76c36b1c69bb773a1797665018e732886d4","modified":1682514746670},{"_id":"public/categories/clickhouse/index.html","hash":"51cab6f43b77d72edcc4e0884a778c5bb59b25ed","modified":1682514746670},{"_id":"public/categories/docker/index.html","hash":"4ff47dde2d19d358f25e8aae8ebae99a8cf40417","modified":1682514746670},{"_id":"public/categories/git/index.html","hash":"800214b113b0c26edb9c62dad8e90a20317c20f5","modified":1682514746670},{"_id":"public/categories/linux/index.html","hash":"0452a0b4cdbcce2675bbdbab443e40feb2f8149c","modified":1682514746670},{"_id":"public/categories/mysql/index.html","hash":"a8a915caafda6829f6e7dd242b7012c99dc84e9d","modified":1682514746670},{"_id":"public/categories/nginx/index.html","hash":"d03723df653dbe335a99ce321ef149e2b42552d1","modified":1682514746670},{"_id":"public/categories/ssh/index.html","hash":"bcf870c510fff1ee4036360ecdee207342e18a85","modified":1682514746670},{"_id":"public/tags/golang/index.html","hash":"3b4da3dc2b69dc1b39706dfc65692704dba5ba72","modified":1682514746670},{"_id":"public/tags/golang/page/2/index.html","hash":"a240cc05e79580f0158e364799e21af006e7cc9c","modified":1682514746670},{"_id":"public/tags/gpg/index.html","hash":"1f5876bf476a42a4ac0bc29eb7c726c581aa86d5","modified":1682514746670},{"_id":"public/tags/rsa/index.html","hash":"dc08ec8417ccb2e3982b50ac927adc7d764f7fef","modified":1682514746670},{"_id":"public/tags/备份/index.html","hash":"2479026c9f0aebc976eac275a9a2ed90e4b584ce","modified":1682514746670},{"_id":"public/tags/恢复/index.html","hash":"add3db038c332bd25e433830193c7f4110c2436c","modified":1682514746670},{"_id":"public/tags/clickhouse/index.html","hash":"816d128a25f03de4dc12799a6138a6c345f209d7","modified":1682514746670},{"_id":"public/tags/docker-compose/index.html","hash":"2e6aaa625cf56ce30f9ccbc974a3e2f8eb1d4b64","modified":1682514746670},{"_id":"public/tags/docker/index.html","hash":"85b0fb0abb2f08239ef80aa0458e5d73461b4574","modified":1682514746670},{"_id":"public/tags/git/index.html","hash":"a518ad973f2d4cc7362a3aa684287307c9c2f6f3","modified":1682514746670},{"_id":"public/tags/文件/index.html","hash":"6d34fef3a3902963afa43059ed0719acb461086c","modified":1682514746670},{"_id":"public/tags/status/index.html","hash":"396d7d2a4a7072fd93f3d268814205a56691ee53","modified":1682514746670},{"_id":"public/tags/history/index.html","hash":"5c70224d3393bbd1bffc87659ba6ddbd20f5b177","modified":1682514746670},{"_id":"public/tags/log/index.html","hash":"587e133782636368c21e0b81f26034d944b0682e","modified":1682514746670},{"_id":"public/tags/代理/index.html","hash":"19d95eca42648f46a55355a1ace579a5967f69f7","modified":1682514746670},{"_id":"public/tags/add/index.html","hash":"a7686346e7c6b202321e74fcf2b55d6640550909","modified":1682514746670},{"_id":"public/tags/aes/index.html","hash":"7c1ea4241daa9fc9579d0dd039e1d234bd3172d1","modified":1682514746670},{"_id":"public/tags/cbc/index.html","hash":"0609c508067f26f1c49423d8891fd9b2a2a34349","modified":1682514746670},{"_id":"public/tags/ecb/index.html","hash":"782384202b24e373eb44c0811a494db7549dd2cc","modified":1682514746670},{"_id":"public/tags/tag/index.html","hash":"5aa9104f5bae15cbfc9493f20bd149913356f313","modified":1682514746670},{"_id":"public/tags/标签/index.html","hash":"7e840f5fec3d4423e499007b828d1193acac1d50","modified":1682514746670},{"_id":"public/tags/pprof/index.html","hash":"606c0336e32500911a4ff3c688b98c698b775d3c","modified":1682514746670},{"_id":"public/tags/字符串/index.html","hash":"a3b2549c6866dc465d8fe457a9dd7e221d0b2d5d","modified":1682514746670},{"_id":"public/tags/json/index.html","hash":"eb1b2642543f596de1a5bae1669534c8936398b5","modified":1682514746670},{"_id":"public/tags/map/index.html","hash":"d2176208e3e48a64b6a3f0c332b5ab7b9045b186","modified":1682514746670},{"_id":"public/tags/cmd/index.html","hash":"a13e45aaa5ef096939057ce1c929edf2c8894837","modified":1682514746670},{"_id":"public/tags/redis/index.html","hash":"5fe36e96a9755d7238fc002077d0e2e4398c8e42","modified":1682514746670},{"_id":"public/tags/linux/index.html","hash":"041d99cd63e6d575830daad40589f57e902db477","modified":1682514746670},{"_id":"public/tags/bash/index.html","hash":"caabc4f09932a614c61ba3e6c60aa9963e2d8904","modified":1682514746670},{"_id":"public/tags/mysql/index.html","hash":"0c53e88236af50156d1b3952bedad3ebf77755f2","modified":1682514746670},{"_id":"public/tags/nginx/index.html","hash":"7a948702a8fb4d117c66b6e2acd52f415f425448","modified":1682514746670},{"_id":"public/tags/ssh/index.html","hash":"e68d90a25cb1eecc91c96bbd1edfe0b29dbd67d0","modified":1682514746670},{"_id":"public/tags/rsync/index.html","hash":"8c7cf65c6fe89643c7350cef9c12a147fff4c4a9","modified":1682514746670},{"_id":"public/tags/scp/index.html","hash":"640fb4d5652997d55aa3420f21bfb4526c1bb9b7","modified":1682514746670},{"_id":"public/2023/04/11/golang远程调试/index.html","hash":"f92c3ee3a38bf55e3ea64e8880445fb6224144c7","modified":1682514746670},{"_id":"public/2022/12/14/clickhouse安装使用笔记/index.html","hash":"09afa488b41f1281a293020d2f047c0380b7f8a0","modified":1682514746670},{"_id":"public/2022/05/07/channel的死锁和panic总结/index.html","hash":"dd93a645a54d112d705791ce11add136c7d78d30","modified":1682514746670},{"_id":"public/2022/05/07/go中context的使用/index.html","hash":"8ac456df20e288c720f09c647986e59e55f27b77","modified":1682514746670},{"_id":"public/2022/04/18/golang AES算法 CBC加密/index.html","hash":"185096c2f670b55270a3b59f88f18429538f7453","modified":1682514746670},{"_id":"public/2022/03/29/ssh隧道-能ssh就能http和tcp，通过ssh就能访问内网web页面和数据库/index.html","hash":"df1afb9479c45dc7dfc9b5547adda4fe608b23ac","modified":1682514746670},{"_id":"public/2022/03/15/golang用两个栈实现队列/index.html","hash":"8ac170dbe533e6a4a6f98225cbacc317d9a9e9c8","modified":1682514746670},{"_id":"public/2022/03/11/nginx配置多个域名对应不同端口/index.html","hash":"2e79bc1fbe4a5c833bbf36a5376995eb45ef79af","modified":1682514746670},{"_id":"public/2022/03/02/golang换行读写/index.html","hash":"f79a2a102797fc80e0f247956c3be956e2618c6d","modified":1682514746670},{"_id":"public/2022/03/01/golang执行cmd命令/index.html","hash":"5d33cb6d535c139a5a2991eb9b53cab6152e7dac","modified":1682514746670},{"_id":"public/2022/02/24/如何使用高阶函数编程提升代码的简洁性/index.html","hash":"376557da209f0b87d8e2cdbac04143aae2652dea","modified":1682514746670},{"_id":"public/2022/02/21/golang操作redis/index.html","hash":"632e8433176b41002b2f227a18338594e2b30d6d","modified":1682514746670},{"_id":"public/2022/02/16/golang字符串、json、map之间转换/index.html","hash":"c05b33890e5fdc62237b6151ce139561abd68752","modified":1682514746670},{"_id":"public/2022/02/16/golang使用pprof进行性能分析/index.html","hash":"dde33f6ac590f7a854d43af939992072ffdf3a27","modified":1682514746670},{"_id":"public/2022/02/16/mysql命令行备份数据/index.html","hash":"61a3045fb5f187b3051dacb2017ea1bdcd1dff89","modified":1682514746670},{"_id":"public/2022/02/16/MongoDB备份与恢复/index.html","hash":"e4073bd45acbc4d8a80e3fd667ed5930f2b0da45","modified":1682514746670},{"_id":"public/2022/02/16/linux 命令行配置代理/index.html","hash":"bd1aee0e4fcce759f64a2414596bbf34e7a41184","modified":1682514746670},{"_id":"public/2022/02/16/git tag 标签/index.html","hash":"c052761609efc6b58ee51a5eb7f0e7571bd7404c","modified":1682514746670},{"_id":"public/archives/2022/page/2/index.html","hash":"e07c72398de22cedeb3eb916eb931f8242e53193","modified":1682514746670},{"_id":"public/index.html","hash":"48b2947ccb887271765004303eaf53637411ea5e","modified":1682514746670},{"_id":"public/page/2/index.html","hash":"ceb00fcd1c56ba51b8a38ff9e7fc8efc164ca54e","modified":1682514746670},{"_id":"public/page/3/index.html","hash":"df8dc75fe9bb493572b0f331223e9935ac237ea0","modified":1682514746670},{"_id":"public/page/4/index.html","hash":"c146fe87ed14dbf3d75ab651643a67cd6e52b1b3","modified":1682514746670},{"_id":"public/page/5/index.html","hash":"37c8f08bf3384729ce2fc6ce9c5170b2663e7c34","modified":1682514746670},{"_id":"public/CNAME","hash":"079c5f5741080670120f62b4cd7700aee5209fdd","modified":1682514746670},{"_id":"public/pictures/1681230165886.jpg","hash":"0de77d6d55531fa27c0a652a43e956332e943e2e","modified":1682514746670},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1682514746670},{"_id":"public/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1682514746670},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1682514746670},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1682514746670},{"_id":"public/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1682514746670},{"_id":"public/images/logo.svg","hash":"099e11ab995a2c8981427a85476d082609848c77","modified":1682514746670},{"_id":"public/css/noscript.css","hash":"4cd5301e478e0e0d4b176740ec314087ec5cb707","modified":1682514746670},{"_id":"public/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1682514746670},{"_id":"public/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1682514746670},{"_id":"public/js/motion.js","hash":"770d63c26f22705311028a36b52e999cc8a2da82","modified":1682514746670},{"_id":"public/css/main.css","hash":"d5d710600f523ae57f4a9adf8e04974c2d9ef962","modified":1682514746670},{"_id":"public/js/canvas-nest.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1682514746670},{"_id":"public/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1682514746670},{"_id":"public/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1682514746670},{"_id":"public/js/next-boot.js","hash":"da0f07f9eaaa83de70128b0feaea3fdadb90457a","modified":1682514746670},{"_id":"public/js/pjax.js","hash":"b03ba78c6916ad2f390d55bc1bc18fafb64b0ebf","modified":1682514746670},{"_id":"public/js/schedule.js","hash":"a1333258726caf84f368a8f8454639c7dc1626bb","modified":1682514746670},{"_id":"public/js/third-party/fancybox.js","hash":"c098d14e65dd170537134358d4b8359ad0539c2c","modified":1682514746670},{"_id":"public/js/schemes/muse.js","hash":"ba7ba2c129d1f240c6a22cec3e53f3f22af64b6b","modified":1682514746670},{"_id":"public/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1682514746670},{"_id":"public/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1682514746670},{"_id":"public/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1682514746670},{"_id":"public/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":1682514746670},{"_id":"public/js/third-party/analytics/matomo.js","hash":"c6a25b26a1443caa70b47fd3dfa282271574deb5","modified":1682514746670},{"_id":"public/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1682514746670},{"_id":"public/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1682514746670},{"_id":"public/js/third-party/chat/gitter.js","hash":"cc38c94125f90dadde11b5ebac7d8bf99a1a08a2","modified":1682514746670},{"_id":"public/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1682514746670},{"_id":"public/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1682514746670},{"_id":"public/js/third-party/comments/disqusjs.js","hash":"1e826dea3f684c0515f362dc1352447a1f0eae71","modified":1682514746670},{"_id":"public/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1682514746670},{"_id":"public/js/third-party/comments/disqus.js","hash":"da361917d65e5dca8362f8cdeb6c8cc0e8316cec","modified":1682514746670},{"_id":"public/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1682514746670},{"_id":"public/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1682514746670},{"_id":"public/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1682514746670},{"_id":"public/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1682514746670},{"_id":"public/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1682514746670},{"_id":"public/js/third-party/search/algolia-search.js","hash":"fdb7b7cef1a147d897e7f7cd8903b58368ec2062","modified":1682514746670},{"_id":"public/js/third-party/search/local-search.js","hash":"4536cb6d0a9bbaaa86fab3fa0101f6a3a3ec5a76","modified":1682514746670},{"_id":"public/js/third-party/statistics/lean-analytics.js","hash":"835cbf54c49ef1327f47df70ff2636ad36b6f57d","modified":1682514746670},{"_id":"public/js/third-party/statistics/firestore.js","hash":"6e0682bb42170d61b13b786295f45f9c785f8b73","modified":1682514746670},{"_id":"public/js/third-party/tags/mermaid.js","hash":"f27d817b0c2138dd3215b1f46af0753f60a008f3","modified":1682514746670},{"_id":"public/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1682514746670},{"_id":"public/js/utils.js","hash":"5e1cf39de050964e97fb3ba0825aeec7f4bc36dd","modified":1682514746670}],"Category":[{"name":"golang","_id":"clgxpu7x50004vouv78wu6m6o"},{"name":"开发者手册","_id":"clgxpu7xe000avouvf80819vx"},{"name":"mongodb","_id":"clgxpu7xh000gvouv6z9l4uob"},{"name":"clickhouse","_id":"clgxpu7xk000mvouv0l4yfgfi"},{"name":"docker","_id":"clgxpu7xn000uvouv718afrmh"},{"name":"git","_id":"clgxpu7xt0016vouv6a6faapr"},{"name":"linux","_id":"clgxpu7yn002xvouvdg0i8gxl"},{"name":"mysql","_id":"clgxpu7yq0037vouvh0bj26v1"},{"name":"nginx","_id":"clgxpu7yt003evouveuc7e4hw"},{"name":"ssh","_id":"clgxpu7z70041vouv9yqx5otp"}],"Data":[{"_id":"footer","data":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}],"Page":[{"title":"关于","date":"2022-06-08T07:52:19.000Z","type":"about","_content":"# CarrotVegeta的个人博客！！！\n","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2022-06-08 15:52:19\ntype: about\n---\n# CarrotVegeta的个人博客！！！\n","updated":"2023-04-23T17:04:08.228Z","path":"about/index.html","comments":1,"layout":"page","_id":"clgxpu7ww0000vouv02gzggdw","content":"<h1 id=\"CarrotVegeta的个人博客！！！\"><a href=\"#CarrotVegeta的个人博客！！！\" class=\"headerlink\" title=\"CarrotVegeta的个人博客！！！\"></a>CarrotVegeta的个人博客！！！</h1>","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}},"excerpt":"","more":"<h1 id=\"CarrotVegeta的个人博客！！！\"><a href=\"#CarrotVegeta的个人博客！！！\" class=\"headerlink\" title=\"CarrotVegeta的个人博客！！！\"></a>CarrotVegeta的个人博客！！！</h1>"},{"title":"分类","date":"2022-06-07T09:40:33.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2022-06-07 17:40:33\ntype: categories\n---\n","updated":"2023-04-23T17:04:08.228Z","path":"categories/index.html","comments":1,"layout":"page","_id":"clgxpu7x30002vouvg0738rl8","content":"","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}},"excerpt":"","more":""},{"title":"标签","date":"2022-06-07T09:32:35.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2022-06-07 17:32:35\ntype: tags\n---\n","updated":"2023-04-23T17:04:08.229Z","path":"tags/index.html","comments":1,"layout":"page","_id":"clgxpu7xa0006vouvaes76rca","content":"","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}},"excerpt":"","more":""}],"Post":[{"title":"golang 统计代码行数","date":"2022-08-31T12:17:27.778Z","updated":"2022-08-31T12:17:27.778Z","description":"golang 统计代码行数","_content":"\n# golang 统计代码行数\n\n## 使用gocloc工具进行统计\n\n获取gocloc工具：\n\n```bash\ngo get -u github.com/hhatto/gocloc/cmd/gocloc\n```\n使用gocloc命令 gocloc[目录路径或文件路径] 进行统计\n\n```bash\ngocloc .\n```\n\n`gocloc`会按类别统计路径下有多少文件，文件中的空行数，注释行数以及实际代码行数。如果目录下某类文件不需要统计，可以使用参数`--exclue-ext=[文件后缀]`\n\n例如：\n\n```bash\ngocloc --exclue-ext=txt .\n```\n\n","source":"_posts/2022-08-31-golang-统计代码行数.md","raw":"---\ntitle: golang 统计代码行数\ndate: 2022-08-31 20:17:27.778\nupdated: 2022-08-31 20:17:27.778\ndescription: golang 统计代码行数\ncategories: \n- golang\ntags: \n- golang\n---\n\n# golang 统计代码行数\n\n## 使用gocloc工具进行统计\n\n获取gocloc工具：\n\n```bash\ngo get -u github.com/hhatto/gocloc/cmd/gocloc\n```\n使用gocloc命令 gocloc[目录路径或文件路径] 进行统计\n\n```bash\ngocloc .\n```\n\n`gocloc`会按类别统计路径下有多少文件，文件中的空行数，注释行数以及实际代码行数。如果目录下某类文件不需要统计，可以使用参数`--exclue-ext=[文件后缀]`\n\n例如：\n\n```bash\ngocloc --exclue-ext=txt .\n```\n\n","slug":"2022-08-31-golang-统计代码行数","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clgxpu7wz0001vouvffw2e2nd","content":"<h1 id=\"golang-统计代码行数\"><a href=\"#golang-统计代码行数\" class=\"headerlink\" title=\"golang 统计代码行数\"></a>golang 统计代码行数</h1><h2 id=\"使用gocloc工具进行统计\"><a href=\"#使用gocloc工具进行统计\" class=\"headerlink\" title=\"使用gocloc工具进行统计\"></a>使用gocloc工具进行统计</h2><p>获取gocloc工具：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">go get -u github.com/hhatto/gocloc/cmd/gocloc<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>使用gocloc命令 gocloc[目录路径或文件路径] 进行统计</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">gocloc <span class=\"token builtin class-name\">.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><code>gocloc</code>会按类别统计路径下有多少文件，文件中的空行数，注释行数以及实际代码行数。如果目录下某类文件不需要统计，可以使用参数<code>--exclue-ext=[文件后缀]</code></p>\n<p>例如：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">gocloc --exclue-ext<span class=\"token operator\">=</span>txt <span class=\"token builtin class-name\">.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}},"excerpt":"","more":"<h1 id=\"golang-统计代码行数\"><a href=\"#golang-统计代码行数\" class=\"headerlink\" title=\"golang 统计代码行数\"></a>golang 统计代码行数</h1><h2 id=\"使用gocloc工具进行统计\"><a href=\"#使用gocloc工具进行统计\" class=\"headerlink\" title=\"使用gocloc工具进行统计\"></a>使用gocloc工具进行统计</h2><p>获取gocloc工具：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">go get -u github.com/hhatto/gocloc/cmd/gocloc<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>使用gocloc命令 gocloc[目录路径或文件路径] 进行统计</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">gocloc <span class=\"token builtin class-name\">.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><code>gocloc</code>会按类别统计路径下有多少文件，文件中的空行数，注释行数以及实际代码行数。如果目录下某类文件不需要统计，可以使用参数<code>--exclue-ext=[文件后缀]</code></p>\n<p>例如：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">gocloc --exclue-ext<span class=\"token operator\">=</span>txt <span class=\"token builtin class-name\">.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n"},{"title":"GPG入门教程","date":"2022-03-01T15:04:25.450Z","updated":"2022-03-01T15:06:16.443Z","url":"/archives/gpg-ru-men-jiao-cheng","_content":"\n原文链接：<http://www.ruanyifeng.com/blog/2013/07/gpg.html>","source":"_posts/GPG入门教程.md","raw":"---\ntitle: GPG入门教程\ndate: 2022-03-01 23:04:25.45\nupdated: 2022-03-01 23:06:16.443\nurl: /archives/gpg-ru-men-jiao-cheng\ncategories: \n- 开发者手册\ntags: \n- gpg\n- rsa\n---\n\n原文链接：<http://www.ruanyifeng.com/blog/2013/07/gpg.html>","slug":"GPG入门教程","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clgxpu7x30003vouvadzwawuu","content":"<p>原文链接：<a href=\"http://www.ruanyifeng.com/blog/2013/07/gpg.html\">http://www.ruanyifeng.com/blog/2013/07/gpg.html</a></p>\n","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}},"excerpt":"","more":"<p>原文链接：<a href=\"http://www.ruanyifeng.com/blog/2013/07/gpg.html\">http://www.ruanyifeng.com/blog/2013/07/gpg.html</a></p>\n"},{"title":"MongoDB 备份(mongodump)与恢复(mongorestore)","date":"2022-02-16T07:55:26.458Z","updated":"2022-02-16T07:55:26.458Z","url":"/archives/mongodbbei-fen-mongodump-yu-hui-fu-mongorestore","description":"MongoDB命令行备份数据以及恢复数据","_content":"\n# MongoDB 备份(mongodump)与恢复(mongorestore)\n\n---\n\n## MongoDB数据备份\n\n在Mongodb中我们使用mongodump命令来备份MongoDB数据。该命令可以导出所有数据到指定目录中。\n\nmongodump命令可以通过参数指定导出的数据量级转存的服务器。\n\n### 语法\n\nmongodump命令脚本语法如下：\n\n```sql\n>mongodump -h dbhost -d dbname -o dbdirectory\n```\n\n- -h：\n  \n  MongDB所在服务器地址，例如：127.0.0.1，当然也可以指定端口号：127.0.0.1:27017\n  \n- -d：\n  \n  需要备份的数据库实例，例如：test\n  \n- -o：\n  \n  备份的数据存放位置，例如：c:\\data\\dump，当然该目录需要提前建立，在备份完成后，系统自动在dump目录下建立一个test目录，这个目录里面存放该数据库实例的备份数据。\n  \n\n### 实例\n\n在本地使用 27017 启动你的mongod服务。打开命令提示符窗口，进入MongoDB安装目录的bin目录输入命令mongodump:\n\n```mongo\n>mongodump\n```\n\n执行以上命令后，客户端会连接到ip为 127.0.0.1 端口号为 27017 的MongoDB服务上，并备份所有数据到 bin/dump/ 目录中。命令输出结果如下：\n\nmongodump 命令可选参数列表如下所示：\n\n| 语法  | 描述  | 实例  |\n| --- | --- | --- |\n| mongodump --host HOST_NAME --port PORT_NUMBER | 该命令将备份所有MongoDB数据 | mongodump --host runoob.com --port 27017 |\n| mongodump --dbpath DB_PATH --out BACKUP_DIRECTORY |     | mongodump --dbpath /data/db/ --out /data/backup/ |\n| mongodump --collection COLLECTION --db DB_NAME | 该命令将备份指定数据库的集合。 | mongodump --collection mycol --db test |\n\n---\n\n## MongoDB数据恢复\n\nmongodb使用 mongorestore 命令来恢复备份的数据\n\n### mongorestore命令脚本语法如下\n\n```mongo\n>mongorestore -h <hostname><:port> -d dbname <path>\n```\n\n- --host <:port>, -h <:port>：\n  \n  MongoDB所在服务器地址，默认为： localhost:27017\n  \n- --db , -d ：\n  \n  需要恢复的数据库实例，例如：test，当然这个名称也可以和备份时候的不一样，比如test2\n  \n- --drop：\n  \n  恢复的时候，先删除当前数据，然后恢复备份的数据。就是说，恢复后，备份后添加修改的数据都会被删除，慎用哦！\n  \n- `<path>`：\n  \n  mongorestore 最后的一个参数，设置备份数据所在位置，例如：c:\\data\\dump\\test。\n  \n  你不能同时指定 `<path>` 和 --dir 选项，--dir也可以设置备份目录。\n  \n- --dir：\n  \n  指定备份的目录\n  \n  你不能同时指定 `<path>` 和 --dir 选项。\n  \n\n接下来我们执行以下命令:\n\n```mongo\n>mongorestore\n```\n\n执行以上命令输出结果如下：\n","source":"_posts/MongoDB备份与恢复.md","raw":"---\ntitle: MongoDB 备份(mongodump)与恢复(mongorestore)\ndate: 2022-02-16 15:55:26.458\nupdated: 2022-02-16 15:55:26.458\nurl: /archives/mongodbbei-fen-mongodump-yu-hui-fu-mongorestore\ndescription: MongoDB命令行备份数据以及恢复数据\ncategories: \n- mongodb\ntags: \n- 备份\n- 恢复\n---\n\n# MongoDB 备份(mongodump)与恢复(mongorestore)\n\n---\n\n## MongoDB数据备份\n\n在Mongodb中我们使用mongodump命令来备份MongoDB数据。该命令可以导出所有数据到指定目录中。\n\nmongodump命令可以通过参数指定导出的数据量级转存的服务器。\n\n### 语法\n\nmongodump命令脚本语法如下：\n\n```sql\n>mongodump -h dbhost -d dbname -o dbdirectory\n```\n\n- -h：\n  \n  MongDB所在服务器地址，例如：127.0.0.1，当然也可以指定端口号：127.0.0.1:27017\n  \n- -d：\n  \n  需要备份的数据库实例，例如：test\n  \n- -o：\n  \n  备份的数据存放位置，例如：c:\\data\\dump，当然该目录需要提前建立，在备份完成后，系统自动在dump目录下建立一个test目录，这个目录里面存放该数据库实例的备份数据。\n  \n\n### 实例\n\n在本地使用 27017 启动你的mongod服务。打开命令提示符窗口，进入MongoDB安装目录的bin目录输入命令mongodump:\n\n```mongo\n>mongodump\n```\n\n执行以上命令后，客户端会连接到ip为 127.0.0.1 端口号为 27017 的MongoDB服务上，并备份所有数据到 bin/dump/ 目录中。命令输出结果如下：\n\nmongodump 命令可选参数列表如下所示：\n\n| 语法  | 描述  | 实例  |\n| --- | --- | --- |\n| mongodump --host HOST_NAME --port PORT_NUMBER | 该命令将备份所有MongoDB数据 | mongodump --host runoob.com --port 27017 |\n| mongodump --dbpath DB_PATH --out BACKUP_DIRECTORY |     | mongodump --dbpath /data/db/ --out /data/backup/ |\n| mongodump --collection COLLECTION --db DB_NAME | 该命令将备份指定数据库的集合。 | mongodump --collection mycol --db test |\n\n---\n\n## MongoDB数据恢复\n\nmongodb使用 mongorestore 命令来恢复备份的数据\n\n### mongorestore命令脚本语法如下\n\n```mongo\n>mongorestore -h <hostname><:port> -d dbname <path>\n```\n\n- --host <:port>, -h <:port>：\n  \n  MongoDB所在服务器地址，默认为： localhost:27017\n  \n- --db , -d ：\n  \n  需要恢复的数据库实例，例如：test，当然这个名称也可以和备份时候的不一样，比如test2\n  \n- --drop：\n  \n  恢复的时候，先删除当前数据，然后恢复备份的数据。就是说，恢复后，备份后添加修改的数据都会被删除，慎用哦！\n  \n- `<path>`：\n  \n  mongorestore 最后的一个参数，设置备份数据所在位置，例如：c:\\data\\dump\\test。\n  \n  你不能同时指定 `<path>` 和 --dir 选项，--dir也可以设置备份目录。\n  \n- --dir：\n  \n  指定备份的目录\n  \n  你不能同时指定 `<path>` 和 --dir 选项。\n  \n\n接下来我们执行以下命令:\n\n```mongo\n>mongorestore\n```\n\n执行以上命令输出结果如下：\n","slug":"MongoDB备份与恢复","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clgxpu7xb0007vouvg8asf2j1","content":"<h1 id=\"MongoDB-备份-mongodump-与恢复-mongorestore\"><a href=\"#MongoDB-备份-mongodump-与恢复-mongorestore\" class=\"headerlink\" title=\"MongoDB 备份(mongodump)与恢复(mongorestore)\"></a>MongoDB 备份(mongodump)与恢复(mongorestore)</h1><hr>\n<h2 id=\"MongoDB数据备份\"><a href=\"#MongoDB数据备份\" class=\"headerlink\" title=\"MongoDB数据备份\"></a>MongoDB数据备份</h2><p>在Mongodb中我们使用mongodump命令来备份MongoDB数据。该命令可以导出所有数据到指定目录中。</p>\n<p>mongodump命令可以通过参数指定导出的数据量级转存的服务器。</p>\n<h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><p>mongodump命令脚本语法如下：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token operator\">></span>mongodump <span class=\"token operator\">-</span>h dbhost <span class=\"token operator\">-</span>d dbname <span class=\"token operator\">-</span>o dbdirectory<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><p>-h：</p>\n<p>MongDB所在服务器地址，例如：127.0.0.1，当然也可以指定端口号：127.0.0.1:27017</p>\n</li>\n<li><p>-d：</p>\n<p>需要备份的数据库实例，例如：test</p>\n</li>\n<li><p>-o：</p>\n<p>备份的数据存放位置，例如：c:\\data\\dump，当然该目录需要提前建立，在备份完成后，系统自动在dump目录下建立一个test目录，这个目录里面存放该数据库实例的备份数据。</p>\n</li>\n</ul>\n<h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3><p>在本地使用 27017 启动你的mongod服务。打开命令提示符窗口，进入MongoDB安装目录的bin目录输入命令mongodump:</p>\n<pre class=\"line-numbers language-mongo\" data-language=\"mongo\"><code class=\"language-mongo\">&gt;mongodump<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>执行以上命令后，客户端会连接到ip为 127.0.0.1 端口号为 27017 的MongoDB服务上，并备份所有数据到 bin&#x2F;dump&#x2F; 目录中。命令输出结果如下：</p>\n<p>mongodump 命令可选参数列表如下所示：</p>\n<table>\n<thead>\n<tr>\n<th>语法</th>\n<th>描述</th>\n<th>实例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>mongodump –host HOST_NAME –port PORT_NUMBER</td>\n<td>该命令将备份所有MongoDB数据</td>\n<td>mongodump –host runoob.com –port 27017</td>\n</tr>\n<tr>\n<td>mongodump –dbpath DB_PATH –out BACKUP_DIRECTORY</td>\n<td></td>\n<td>mongodump –dbpath &#x2F;data&#x2F;db&#x2F; –out &#x2F;data&#x2F;backup&#x2F;</td>\n</tr>\n<tr>\n<td>mongodump –collection COLLECTION –db DB_NAME</td>\n<td>该命令将备份指定数据库的集合。</td>\n<td>mongodump –collection mycol –db test</td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"MongoDB数据恢复\"><a href=\"#MongoDB数据恢复\" class=\"headerlink\" title=\"MongoDB数据恢复\"></a>MongoDB数据恢复</h2><p>mongodb使用 mongorestore 命令来恢复备份的数据</p>\n<h3 id=\"mongorestore命令脚本语法如下\"><a href=\"#mongorestore命令脚本语法如下\" class=\"headerlink\" title=\"mongorestore命令脚本语法如下\"></a>mongorestore命令脚本语法如下</h3><pre class=\"line-numbers language-mongo\" data-language=\"mongo\"><code class=\"language-mongo\">&gt;mongorestore -h &lt;hostname&gt;&lt;:port&gt; -d dbname &lt;path&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><p>–host &lt;:port&gt;, -h &lt;:port&gt;：</p>\n<p>MongoDB所在服务器地址，默认为： localhost:27017</p>\n</li>\n<li><p>–db , -d ：</p>\n<p>需要恢复的数据库实例，例如：test，当然这个名称也可以和备份时候的不一样，比如test2</p>\n</li>\n<li><p>–drop：</p>\n<p>恢复的时候，先删除当前数据，然后恢复备份的数据。就是说，恢复后，备份后添加修改的数据都会被删除，慎用哦！</p>\n</li>\n<li><p><code>&lt;path&gt;</code>：</p>\n<p>mongorestore 最后的一个参数，设置备份数据所在位置，例如：c:\\data\\dump\\test。</p>\n<p>你不能同时指定 <code>&lt;path&gt;</code> 和 –dir 选项，–dir也可以设置备份目录。</p>\n</li>\n<li><p>–dir：</p>\n<p>指定备份的目录</p>\n<p>你不能同时指定 <code>&lt;path&gt;</code> 和 –dir 选项。</p>\n</li>\n</ul>\n<p>接下来我们执行以下命令:</p>\n<pre class=\"line-numbers language-mongo\" data-language=\"mongo\"><code class=\"language-mongo\">&gt;mongorestore<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>执行以上命令输出结果如下：</p>\n","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}},"excerpt":"","more":"<h1 id=\"MongoDB-备份-mongodump-与恢复-mongorestore\"><a href=\"#MongoDB-备份-mongodump-与恢复-mongorestore\" class=\"headerlink\" title=\"MongoDB 备份(mongodump)与恢复(mongorestore)\"></a>MongoDB 备份(mongodump)与恢复(mongorestore)</h1><hr>\n<h2 id=\"MongoDB数据备份\"><a href=\"#MongoDB数据备份\" class=\"headerlink\" title=\"MongoDB数据备份\"></a>MongoDB数据备份</h2><p>在Mongodb中我们使用mongodump命令来备份MongoDB数据。该命令可以导出所有数据到指定目录中。</p>\n<p>mongodump命令可以通过参数指定导出的数据量级转存的服务器。</p>\n<h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><p>mongodump命令脚本语法如下：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token operator\">></span>mongodump <span class=\"token operator\">-</span>h dbhost <span class=\"token operator\">-</span>d dbname <span class=\"token operator\">-</span>o dbdirectory<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><p>-h：</p>\n<p>MongDB所在服务器地址，例如：127.0.0.1，当然也可以指定端口号：127.0.0.1:27017</p>\n</li>\n<li><p>-d：</p>\n<p>需要备份的数据库实例，例如：test</p>\n</li>\n<li><p>-o：</p>\n<p>备份的数据存放位置，例如：c:\\data\\dump，当然该目录需要提前建立，在备份完成后，系统自动在dump目录下建立一个test目录，这个目录里面存放该数据库实例的备份数据。</p>\n</li>\n</ul>\n<h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3><p>在本地使用 27017 启动你的mongod服务。打开命令提示符窗口，进入MongoDB安装目录的bin目录输入命令mongodump:</p>\n<pre class=\"line-numbers language-mongo\" data-language=\"mongo\"><code class=\"language-mongo\">&gt;mongodump<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>执行以上命令后，客户端会连接到ip为 127.0.0.1 端口号为 27017 的MongoDB服务上，并备份所有数据到 bin&#x2F;dump&#x2F; 目录中。命令输出结果如下：</p>\n<p>mongodump 命令可选参数列表如下所示：</p>\n<table>\n<thead>\n<tr>\n<th>语法</th>\n<th>描述</th>\n<th>实例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>mongodump –host HOST_NAME –port PORT_NUMBER</td>\n<td>该命令将备份所有MongoDB数据</td>\n<td>mongodump –host runoob.com –port 27017</td>\n</tr>\n<tr>\n<td>mongodump –dbpath DB_PATH –out BACKUP_DIRECTORY</td>\n<td></td>\n<td>mongodump –dbpath &#x2F;data&#x2F;db&#x2F; –out &#x2F;data&#x2F;backup&#x2F;</td>\n</tr>\n<tr>\n<td>mongodump –collection COLLECTION –db DB_NAME</td>\n<td>该命令将备份指定数据库的集合。</td>\n<td>mongodump –collection mycol –db test</td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"MongoDB数据恢复\"><a href=\"#MongoDB数据恢复\" class=\"headerlink\" title=\"MongoDB数据恢复\"></a>MongoDB数据恢复</h2><p>mongodb使用 mongorestore 命令来恢复备份的数据</p>\n<h3 id=\"mongorestore命令脚本语法如下\"><a href=\"#mongorestore命令脚本语法如下\" class=\"headerlink\" title=\"mongorestore命令脚本语法如下\"></a>mongorestore命令脚本语法如下</h3><pre class=\"line-numbers language-mongo\" data-language=\"mongo\"><code class=\"language-mongo\">&gt;mongorestore -h &lt;hostname&gt;&lt;:port&gt; -d dbname &lt;path&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><p>–host &lt;:port&gt;, -h &lt;:port&gt;：</p>\n<p>MongoDB所在服务器地址，默认为： localhost:27017</p>\n</li>\n<li><p>–db , -d ：</p>\n<p>需要恢复的数据库实例，例如：test，当然这个名称也可以和备份时候的不一样，比如test2</p>\n</li>\n<li><p>–drop：</p>\n<p>恢复的时候，先删除当前数据，然后恢复备份的数据。就是说，恢复后，备份后添加修改的数据都会被删除，慎用哦！</p>\n</li>\n<li><p><code>&lt;path&gt;</code>：</p>\n<p>mongorestore 最后的一个参数，设置备份数据所在位置，例如：c:\\data\\dump\\test。</p>\n<p>你不能同时指定 <code>&lt;path&gt;</code> 和 –dir 选项，–dir也可以设置备份目录。</p>\n</li>\n<li><p>–dir：</p>\n<p>指定备份的目录</p>\n<p>你不能同时指定 <code>&lt;path&gt;</code> 和 –dir 选项。</p>\n</li>\n</ul>\n<p>接下来我们执行以下命令:</p>\n<pre class=\"line-numbers language-mongo\" data-language=\"mongo\"><code class=\"language-mongo\">&gt;mongorestore<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>执行以上命令输出结果如下：</p>\n"},{"title":"clickhouse安装使用笔记","date":"2022-12-14T12:17:27.778Z","updated":"2022-12-14T12:17:27.778Z","description":"clickhouse 笔记","_content":"# clickhouse\n\n## clickhouse入门\n\nclickhouse 的特点：\n\n-  列式存储\n\n- DBMS的功能\n- 多样化引擎 （merge_tree)\n- 高吞吐写入能力\n- 数据分区与线程级并行\n- 性能-不适合用join查询\n\n##  安装\n\n**ClickHouse安装准备**\n\n- 确定防火墙关闭\n- Centos取消打开文件限制->用户可用文件数、用户可用最大进程数\n- 安装依赖\n- CentOS取消SELINUX\n\n - 查看selinux状态\n\n```shell\ngetenforce\n```\n\n修改/etc/selinux/config中的SELINUX=disabled\n\n```shell\nsudo vim /etc/selinux/config\nSELINUX=disabled\n```\n\n重启生效\n\n如果不想关闭机器，临时生效，如果是关闭状态必须重启机器\n\n```shell\nsetenforce 0\n```\n\n 执行同步操作\n\n```shell\nsudo /home/user/bin/xsync/etc/selinux/config\n```\n\n**下载安装包**\n\n- client  \n- common-static \n- common-static-dbg\n- server \n\n**版本差异**\n\n- 20.5 支持多线程\n- 20.6.3+ explain(执行计划)\n- 20.8 -> 实时同步mysql新引擎\n\n**安装命令**\n\n```shell\nmkdir clickhouse\ncd clickhouse\nsudo rpm -ivh *.rpm\n#输入密码\nenter password for default user:******\n#确认安装状态\nrpm -qa|grep clickhouse\n#显示有四个安装包则成功\nclickhouse-server.noarch\nclick-client.noarch\nclick-common-static-dbg\nclick-common-static\n```\n## clickhouse操作\n\n查看目录\n\n```shell\n#bin目录\ncd /usr/bin/\n#conf目录\ncd /etc/clickhouse-server/\n#lib目录\ncd /var/lib/clickhouse\n#log目录\ncd /var/log/clickhouse\n```\n查看配置\n```shell\n#进入clickhouse文件夹\ncd /etc/click-server/\nls\n#config.xml 通用服务端配置，可以修改数据路径和日志路径\nconfig.d config.xml\n#users.xml 用户一些参数配置\nusers.d users.xml\n \nvim config.xml \n查找listen,去掉注释，不对ip做限制\n<lisetn_host>::</listen_host> \n```\nclickhouse服务相关命令\n```shell\n#启动server\n#linux 查看状态\nsudo systemctl status clickhouse-server\n#clickhouse 自带命令查看状态\nsudo clickhouse status\n#重启\nsudo clickhouse restart\n#clickhouse-client 命令\nclickhouse-client -help\n-m 分号换行\n-h 链接远程\n--query \"加上查询语句\" clickhouse-client --query \"show databases\"\n-p 端口\n```\nclickhouse数据库操作命令\n```shell\n#链接clickhouse\nclickhouse -m\n#查看库\nshow databases;\n# 使用库\nuse system;\n#查看表\nshow tables;\n#查询\nselect * from users;\n```\n\n","source":"_posts/clickhouse安装使用笔记.md","raw":"---\ntitle: clickhouse安装使用笔记\ndate: 2022-12-14 20:17:27.778\nupdated: 2022-12-14 20:17:27.778\ndescription: clickhouse 笔记\ncategories: \n- clickhouse\ntags: \n- clickhouse\n---\n# clickhouse\n\n## clickhouse入门\n\nclickhouse 的特点：\n\n-  列式存储\n\n- DBMS的功能\n- 多样化引擎 （merge_tree)\n- 高吞吐写入能力\n- 数据分区与线程级并行\n- 性能-不适合用join查询\n\n##  安装\n\n**ClickHouse安装准备**\n\n- 确定防火墙关闭\n- Centos取消打开文件限制->用户可用文件数、用户可用最大进程数\n- 安装依赖\n- CentOS取消SELINUX\n\n - 查看selinux状态\n\n```shell\ngetenforce\n```\n\n修改/etc/selinux/config中的SELINUX=disabled\n\n```shell\nsudo vim /etc/selinux/config\nSELINUX=disabled\n```\n\n重启生效\n\n如果不想关闭机器，临时生效，如果是关闭状态必须重启机器\n\n```shell\nsetenforce 0\n```\n\n 执行同步操作\n\n```shell\nsudo /home/user/bin/xsync/etc/selinux/config\n```\n\n**下载安装包**\n\n- client  \n- common-static \n- common-static-dbg\n- server \n\n**版本差异**\n\n- 20.5 支持多线程\n- 20.6.3+ explain(执行计划)\n- 20.8 -> 实时同步mysql新引擎\n\n**安装命令**\n\n```shell\nmkdir clickhouse\ncd clickhouse\nsudo rpm -ivh *.rpm\n#输入密码\nenter password for default user:******\n#确认安装状态\nrpm -qa|grep clickhouse\n#显示有四个安装包则成功\nclickhouse-server.noarch\nclick-client.noarch\nclick-common-static-dbg\nclick-common-static\n```\n## clickhouse操作\n\n查看目录\n\n```shell\n#bin目录\ncd /usr/bin/\n#conf目录\ncd /etc/clickhouse-server/\n#lib目录\ncd /var/lib/clickhouse\n#log目录\ncd /var/log/clickhouse\n```\n查看配置\n```shell\n#进入clickhouse文件夹\ncd /etc/click-server/\nls\n#config.xml 通用服务端配置，可以修改数据路径和日志路径\nconfig.d config.xml\n#users.xml 用户一些参数配置\nusers.d users.xml\n \nvim config.xml \n查找listen,去掉注释，不对ip做限制\n<lisetn_host>::</listen_host> \n```\nclickhouse服务相关命令\n```shell\n#启动server\n#linux 查看状态\nsudo systemctl status clickhouse-server\n#clickhouse 自带命令查看状态\nsudo clickhouse status\n#重启\nsudo clickhouse restart\n#clickhouse-client 命令\nclickhouse-client -help\n-m 分号换行\n-h 链接远程\n--query \"加上查询语句\" clickhouse-client --query \"show databases\"\n-p 端口\n```\nclickhouse数据库操作命令\n```shell\n#链接clickhouse\nclickhouse -m\n#查看库\nshow databases;\n# 使用库\nuse system;\n#查看表\nshow tables;\n#查询\nselect * from users;\n```\n\n","slug":"clickhouse安装使用笔记","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clgxpu7xc0008vouv04a9cv3n","content":"<h1 id=\"clickhouse\"><a href=\"#clickhouse\" class=\"headerlink\" title=\"clickhouse\"></a>clickhouse</h1><h2 id=\"clickhouse入门\"><a href=\"#clickhouse入门\" class=\"headerlink\" title=\"clickhouse入门\"></a>clickhouse入门</h2><p>clickhouse 的特点：</p>\n<ul>\n<li><p>列式存储</p>\n</li>\n<li><p>DBMS的功能</p>\n</li>\n<li><p>多样化引擎 （merge_tree)</p>\n</li>\n<li><p>高吞吐写入能力</p>\n</li>\n<li><p>数据分区与线程级并行</p>\n</li>\n<li><p>性能-不适合用join查询</p>\n</li>\n</ul>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p><strong>ClickHouse安装准备</strong></p>\n<ul>\n<li><p>确定防火墙关闭</p>\n</li>\n<li><p>Centos取消打开文件限制-&gt;用户可用文件数、用户可用最大进程数</p>\n</li>\n<li><p>安装依赖</p>\n</li>\n<li><p>CentOS取消SELINUX</p>\n</li>\n<li><p>查看selinux状态</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">getenforce<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>修改&#x2F;etc&#x2F;selinux&#x2F;config中的SELINUX&#x3D;disabled</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">vim</span> /etc/selinux/config\n<span class=\"token assign-left variable\">SELINUX</span><span class=\"token operator\">=</span>disabled<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>重启生效</p>\n<p>如果不想关闭机器，临时生效，如果是关闭状态必须重启机器</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">setenforce <span class=\"token number\">0</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p> 执行同步操作</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> /home/user/bin/xsync/etc/selinux/config<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>下载安装包</strong></p>\n<ul>\n<li>client  </li>\n<li>common-static </li>\n<li>common-static-dbg</li>\n<li>server</li>\n</ul>\n<p><strong>版本差异</strong></p>\n<ul>\n<li>20.5 支持多线程</li>\n<li>20.6.3+ explain(执行计划)</li>\n<li>20.8 -&gt; 实时同步mysql新引擎</li>\n</ul>\n<p><strong>安装命令</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> clickhouse\n<span class=\"token builtin class-name\">cd</span> clickhouse\n<span class=\"token function\">sudo</span> <span class=\"token function\">rpm</span> -ivh *.rpm\n<span class=\"token comment\">#输入密码</span>\nenter password <span class=\"token keyword\">for</span> default user:******\n<span class=\"token comment\">#确认安装状态</span>\n<span class=\"token function\">rpm</span> -qa<span class=\"token operator\">|</span><span class=\"token function\">grep</span> clickhouse\n<span class=\"token comment\">#显示有四个安装包则成功</span>\nclickhouse-server.noarch\nclick-client.noarch\nclick-common-static-dbg\nclick-common-static<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"clickhouse操作\"><a href=\"#clickhouse操作\" class=\"headerlink\" title=\"clickhouse操作\"></a>clickhouse操作</h2><p>查看目录</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#bin目录</span>\n<span class=\"token builtin class-name\">cd</span> /usr/bin/\n<span class=\"token comment\">#conf目录</span>\n<span class=\"token builtin class-name\">cd</span> /etc/clickhouse-server/\n<span class=\"token comment\">#lib目录</span>\n<span class=\"token builtin class-name\">cd</span> /var/lib/clickhouse\n<span class=\"token comment\">#log目录</span>\n<span class=\"token builtin class-name\">cd</span> /var/log/clickhouse<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>查看配置</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#进入clickhouse文件夹</span>\n<span class=\"token builtin class-name\">cd</span> /etc/click-server/\n<span class=\"token function\">ls</span>\n<span class=\"token comment\">#config.xml 通用服务端配置，可以修改数据路径和日志路径</span>\nconfig.d config.xml\n<span class=\"token comment\">#users.xml 用户一些参数配置</span>\nusers.d users.xml\n \n<span class=\"token function\">vim</span> config.xml \n查找listen,去掉注释，不对ip做限制\n<span class=\"token operator\">&lt;</span>lisetn_host<span class=\"token operator\">></span>::<span class=\"token operator\">&lt;</span>/listen_host<span class=\"token operator\">></span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>clickhouse服务相关命令</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#启动server</span>\n<span class=\"token comment\">#linux 查看状态</span>\n<span class=\"token function\">sudo</span> systemctl status clickhouse-server\n<span class=\"token comment\">#clickhouse 自带命令查看状态</span>\n<span class=\"token function\">sudo</span> clickhouse status\n<span class=\"token comment\">#重启</span>\n<span class=\"token function\">sudo</span> clickhouse restart\n<span class=\"token comment\">#clickhouse-client 命令</span>\nclickhouse-client -help\n-m 分号换行\n-h 链接远程\n--query <span class=\"token string\">\"加上查询语句\"</span> clickhouse-client --query <span class=\"token string\">\"show databases\"</span>\n-p 端口<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>clickhouse数据库操作命令</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#链接clickhouse</span>\nclickhouse -m\n<span class=\"token comment\">#查看库</span>\nshow databases<span class=\"token punctuation\">;</span>\n<span class=\"token comment\"># 使用库</span>\nuse system<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">#查看表</span>\nshow tables<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">#查询</span>\n<span class=\"token keyword\">select</span> * from <span class=\"token function\">users</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}},"excerpt":"","more":"<h1 id=\"clickhouse\"><a href=\"#clickhouse\" class=\"headerlink\" title=\"clickhouse\"></a>clickhouse</h1><h2 id=\"clickhouse入门\"><a href=\"#clickhouse入门\" class=\"headerlink\" title=\"clickhouse入门\"></a>clickhouse入门</h2><p>clickhouse 的特点：</p>\n<ul>\n<li><p>列式存储</p>\n</li>\n<li><p>DBMS的功能</p>\n</li>\n<li><p>多样化引擎 （merge_tree)</p>\n</li>\n<li><p>高吞吐写入能力</p>\n</li>\n<li><p>数据分区与线程级并行</p>\n</li>\n<li><p>性能-不适合用join查询</p>\n</li>\n</ul>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p><strong>ClickHouse安装准备</strong></p>\n<ul>\n<li><p>确定防火墙关闭</p>\n</li>\n<li><p>Centos取消打开文件限制-&gt;用户可用文件数、用户可用最大进程数</p>\n</li>\n<li><p>安装依赖</p>\n</li>\n<li><p>CentOS取消SELINUX</p>\n</li>\n<li><p>查看selinux状态</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">getenforce<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>修改&#x2F;etc&#x2F;selinux&#x2F;config中的SELINUX&#x3D;disabled</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">vim</span> /etc/selinux/config\n<span class=\"token assign-left variable\">SELINUX</span><span class=\"token operator\">=</span>disabled<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>重启生效</p>\n<p>如果不想关闭机器，临时生效，如果是关闭状态必须重启机器</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">setenforce <span class=\"token number\">0</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p> 执行同步操作</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> /home/user/bin/xsync/etc/selinux/config<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>下载安装包</strong></p>\n<ul>\n<li>client  </li>\n<li>common-static </li>\n<li>common-static-dbg</li>\n<li>server</li>\n</ul>\n<p><strong>版本差异</strong></p>\n<ul>\n<li>20.5 支持多线程</li>\n<li>20.6.3+ explain(执行计划)</li>\n<li>20.8 -&gt; 实时同步mysql新引擎</li>\n</ul>\n<p><strong>安装命令</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> clickhouse\n<span class=\"token builtin class-name\">cd</span> clickhouse\n<span class=\"token function\">sudo</span> <span class=\"token function\">rpm</span> -ivh *.rpm\n<span class=\"token comment\">#输入密码</span>\nenter password <span class=\"token keyword\">for</span> default user:******\n<span class=\"token comment\">#确认安装状态</span>\n<span class=\"token function\">rpm</span> -qa<span class=\"token operator\">|</span><span class=\"token function\">grep</span> clickhouse\n<span class=\"token comment\">#显示有四个安装包则成功</span>\nclickhouse-server.noarch\nclick-client.noarch\nclick-common-static-dbg\nclick-common-static<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"clickhouse操作\"><a href=\"#clickhouse操作\" class=\"headerlink\" title=\"clickhouse操作\"></a>clickhouse操作</h2><p>查看目录</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#bin目录</span>\n<span class=\"token builtin class-name\">cd</span> /usr/bin/\n<span class=\"token comment\">#conf目录</span>\n<span class=\"token builtin class-name\">cd</span> /etc/clickhouse-server/\n<span class=\"token comment\">#lib目录</span>\n<span class=\"token builtin class-name\">cd</span> /var/lib/clickhouse\n<span class=\"token comment\">#log目录</span>\n<span class=\"token builtin class-name\">cd</span> /var/log/clickhouse<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>查看配置</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#进入clickhouse文件夹</span>\n<span class=\"token builtin class-name\">cd</span> /etc/click-server/\n<span class=\"token function\">ls</span>\n<span class=\"token comment\">#config.xml 通用服务端配置，可以修改数据路径和日志路径</span>\nconfig.d config.xml\n<span class=\"token comment\">#users.xml 用户一些参数配置</span>\nusers.d users.xml\n \n<span class=\"token function\">vim</span> config.xml \n查找listen,去掉注释，不对ip做限制\n<span class=\"token operator\">&lt;</span>lisetn_host<span class=\"token operator\">></span>::<span class=\"token operator\">&lt;</span>/listen_host<span class=\"token operator\">></span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>clickhouse服务相关命令</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#启动server</span>\n<span class=\"token comment\">#linux 查看状态</span>\n<span class=\"token function\">sudo</span> systemctl status clickhouse-server\n<span class=\"token comment\">#clickhouse 自带命令查看状态</span>\n<span class=\"token function\">sudo</span> clickhouse status\n<span class=\"token comment\">#重启</span>\n<span class=\"token function\">sudo</span> clickhouse restart\n<span class=\"token comment\">#clickhouse-client 命令</span>\nclickhouse-client -help\n-m 分号换行\n-h 链接远程\n--query <span class=\"token string\">\"加上查询语句\"</span> clickhouse-client --query <span class=\"token string\">\"show databases\"</span>\n-p 端口<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>clickhouse数据库操作命令</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#链接clickhouse</span>\nclickhouse -m\n<span class=\"token comment\">#查看库</span>\nshow databases<span class=\"token punctuation\">;</span>\n<span class=\"token comment\"># 使用库</span>\nuse system<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">#查看表</span>\nshow tables<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">#查询</span>\n<span class=\"token keyword\">select</span> * from <span class=\"token function\">users</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n"},{"abbrlink":"","date":"2023-04-23T16:43:07.000Z","title":"clickhouse数组函数操作","updated":"2023-04-23T16:43:08.000Z","_content":"原文地址：[点击跳转](https://www.cnblogs.com/traditional/p/15226704.html)\n","source":"_posts/clickhouse数组函数操作.md","raw":"---\nabbrlink: ''\ncategories: []\ndate: '2023-04-24 00:43:07'\ntags: []\ntitle: clickhouse数组函数操作\nupdated: Sun, 23 Apr 2023 16:43:08 GMT\n---\n原文地址：[点击跳转](https://www.cnblogs.com/traditional/p/15226704.html)\n","slug":"clickhouse数组函数操作","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clgxpu7xd0009vouvaqvr4nmr","content":"<p>原文地址：<a href=\"https://www.cnblogs.com/traditional/p/15226704.html\">点击跳转</a></p>\n","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}},"excerpt":"","more":"<p>原文地址：<a href=\"https://www.cnblogs.com/traditional/p/15226704.html\">点击跳转</a></p>\n"},{"title":"channel的死锁和panic总结","date":"2022-05-07T08:30:27.778Z","updated":"2022-05-07T09:17:18.964Z","url":"/archives/channel的死锁和panic总结","description":"channel的死锁和panic总结","_content":"\n# channel的死锁和panic总结\n\n## 1.channel的容量为0时\n\n### 第一种情况\n```go\nfunc main() {\n\tc := make(chan int, 0)\n     //一直接收不到消息发生阻塞，死锁\n\tfmt.Println(<-c)\n}\n```\n### 第二种情况\n```go\nfunc main() {\n\tc := make(chan int, 0)\n    //发送消息的时候无人接收\n\tc <- 1\n    //接收消息 的时候无人发送 死锁\n\tfmt.Println(<-c)\n}\n```\n这是因为channel size为0，之前把1传进c中，但是没有接收方，等到<-c时，已经接收不到数据传入channel，所以死锁\n\n### 第三种情况\n```go\nfunc main() {\n   //没有初始化\n\tvar ch chan int\n\tgo func() {\n\t\tch <- 1\n\t}()\n\tfmt.Println(<-ch)\n}\n```\n\n### 第四种情况\n\n```go\n\nfunc demo5() {\n    var c chan int //定义类型\n    c = make(chan int ,0) //初始化\n    go func() {\n        for i := 0; i < 3; i++ {\n            c <- i //传入channel数据\n        }\n    }()\n    for  v := range c{\n        fmt.Println(v)\n    }\n}\n```\n结果是死锁，应该将数据传进channel后，并没有关闭channel，for循环接收channel一直在监听，死锁\n\n数据传进channel后，输入方主动关闭channel\n```go\nfunc demo5() {\n    var c chan int\n    c = make(chan int ,0)\n    go func() {\n        for i := 0; i < 3; i++ {\n            c <- i\n        }\n        close(c) //或者defer close(c)\n    }()\n    for  v := range c{\n        fmt.Println(v)\n    }\n}\n```\n### 当channel 关闭且缓冲区为0时\n```go\nfunc demo6() {\n    c := make(chan int,1)\n    close(c)\n    fmt.Println(<-c)\n}\n\n//输出为0\n```\n### 关闭未初始化的channel，会panic\n```go\nfunc demo6() {\n    var c chan int\n    close(c)\n}\n```\n\n### 特殊情况\n```go\nfunc main() {\n    var ch chan int\n    //func1\n    go func() {\n        ch = make(chan int, 1)\n        ch <- 1\n    }()\n    //func2\n    go func(ch chan int) {\n        time.Sleep(time.Second)\n        <-ch\n    }(ch)\n    c := time.Tick(1 * time.Second)\n    for range c {\n        fmt.Printf(\"#goroutines: %d\\n\", runtime.NumGoroutine())\n    }\n}\n\n//一段时间后输出结果为#goroutines: 2\n```\n结果中的goroutines分别为fun2 和 main函数，因为fun2没有初始化ch 所以会一直阻塞（func1中的初始化只在其所在的闭包函数中有效)\n\n### 注意点：\n1. channel关闭后，再向channel中写入数据会panic\n2. channel关闭后，再次关闭channel，会panic\n3. 关闭未初始化的channel，会panic\n4. channel关闭后，可以继续从channel中接收数据\n5. 当channel 关闭且缓冲区为0时，继续从channel接收数据会接收到一个channel定义类型的零值\n6. channel先进先出\n\n作者：coldwarm7\n链接：https://www.jianshu.com/p/f25cdd72efce\n来源：简书\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n","source":"_posts/channel的死锁和panic总结.md","raw":"---\ntitle: channel的死锁和panic总结\ndate: 2022-05-07 16:30:27.778\nupdated: 2022-05-07 17:17:18.964\nurl: /archives/channel的死锁和panic总结\ndescription: channel的死锁和panic总结\ncategories: \n- golang\ntags: \n- golang\n---\n\n# channel的死锁和panic总结\n\n## 1.channel的容量为0时\n\n### 第一种情况\n```go\nfunc main() {\n\tc := make(chan int, 0)\n     //一直接收不到消息发生阻塞，死锁\n\tfmt.Println(<-c)\n}\n```\n### 第二种情况\n```go\nfunc main() {\n\tc := make(chan int, 0)\n    //发送消息的时候无人接收\n\tc <- 1\n    //接收消息 的时候无人发送 死锁\n\tfmt.Println(<-c)\n}\n```\n这是因为channel size为0，之前把1传进c中，但是没有接收方，等到<-c时，已经接收不到数据传入channel，所以死锁\n\n### 第三种情况\n```go\nfunc main() {\n   //没有初始化\n\tvar ch chan int\n\tgo func() {\n\t\tch <- 1\n\t}()\n\tfmt.Println(<-ch)\n}\n```\n\n### 第四种情况\n\n```go\n\nfunc demo5() {\n    var c chan int //定义类型\n    c = make(chan int ,0) //初始化\n    go func() {\n        for i := 0; i < 3; i++ {\n            c <- i //传入channel数据\n        }\n    }()\n    for  v := range c{\n        fmt.Println(v)\n    }\n}\n```\n结果是死锁，应该将数据传进channel后，并没有关闭channel，for循环接收channel一直在监听，死锁\n\n数据传进channel后，输入方主动关闭channel\n```go\nfunc demo5() {\n    var c chan int\n    c = make(chan int ,0)\n    go func() {\n        for i := 0; i < 3; i++ {\n            c <- i\n        }\n        close(c) //或者defer close(c)\n    }()\n    for  v := range c{\n        fmt.Println(v)\n    }\n}\n```\n### 当channel 关闭且缓冲区为0时\n```go\nfunc demo6() {\n    c := make(chan int,1)\n    close(c)\n    fmt.Println(<-c)\n}\n\n//输出为0\n```\n### 关闭未初始化的channel，会panic\n```go\nfunc demo6() {\n    var c chan int\n    close(c)\n}\n```\n\n### 特殊情况\n```go\nfunc main() {\n    var ch chan int\n    //func1\n    go func() {\n        ch = make(chan int, 1)\n        ch <- 1\n    }()\n    //func2\n    go func(ch chan int) {\n        time.Sleep(time.Second)\n        <-ch\n    }(ch)\n    c := time.Tick(1 * time.Second)\n    for range c {\n        fmt.Printf(\"#goroutines: %d\\n\", runtime.NumGoroutine())\n    }\n}\n\n//一段时间后输出结果为#goroutines: 2\n```\n结果中的goroutines分别为fun2 和 main函数，因为fun2没有初始化ch 所以会一直阻塞（func1中的初始化只在其所在的闭包函数中有效)\n\n### 注意点：\n1. channel关闭后，再向channel中写入数据会panic\n2. channel关闭后，再次关闭channel，会panic\n3. 关闭未初始化的channel，会panic\n4. channel关闭后，可以继续从channel中接收数据\n5. 当channel 关闭且缓冲区为0时，继续从channel接收数据会接收到一个channel定义类型的零值\n6. channel先进先出\n\n作者：coldwarm7\n链接：https://www.jianshu.com/p/f25cdd72efce\n来源：简书\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n","slug":"channel的死锁和panic总结","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clgxpu7xf000dvouv18g45vhr","content":"<h1 id=\"channel的死锁和panic总结\"><a href=\"#channel的死锁和panic总结\" class=\"headerlink\" title=\"channel的死锁和panic总结\"></a>channel的死锁和panic总结</h1><h2 id=\"1-channel的容量为0时\"><a href=\"#1-channel的容量为0时\" class=\"headerlink\" title=\"1.channel的容量为0时\"></a>1.channel的容量为0时</h2><h3 id=\"第一种情况\"><a href=\"#第一种情况\" class=\"headerlink\" title=\"第一种情况\"></a>第一种情况</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tc <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n     <span class=\"token comment\">//一直接收不到消息发生阻塞，死锁</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;-</span>c<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"第二种情况\"><a href=\"#第二种情况\" class=\"headerlink\" title=\"第二种情况\"></a>第二种情况</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tc <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">//发送消息的时候无人接收</span>\n\tc <span class=\"token operator\">&lt;-</span> <span class=\"token number\">1</span>\n    <span class=\"token comment\">//接收消息 的时候无人发送 死锁</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;-</span>c<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这是因为channel size为0，之前把1传进c中，但是没有接收方，等到&lt;-c时，已经接收不到数据传入channel，所以死锁</p>\n<h3 id=\"第三种情况\"><a href=\"#第三种情况\" class=\"headerlink\" title=\"第三种情况\"></a>第三种情况</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token comment\">//没有初始化</span>\n\t<span class=\"token keyword\">var</span> ch <span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span>\n\t<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\tch <span class=\"token operator\">&lt;-</span> <span class=\"token number\">1</span>\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;-</span>ch<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"第四种情况\"><a href=\"#第四种情况\" class=\"headerlink\" title=\"第四种情况\"></a>第四种情况</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">\n<span class=\"token keyword\">func</span> <span class=\"token function\">demo5</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> c <span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span> <span class=\"token comment\">//定义类型</span>\n    c <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//初始化</span>\n    <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span>\n            c <span class=\"token operator\">&lt;-</span> i <span class=\"token comment\">//传入channel数据</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span>  v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> c<span class=\"token punctuation\">&#123;</span>\n        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>结果是死锁，应该将数据传进channel后，并没有关闭channel，for循环接收channel一直在监听，死锁</p>\n<p>数据传进channel后，输入方主动关闭channel</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">demo5</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> c <span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span>\n    c <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span>\n            c <span class=\"token operator\">&lt;-</span> i\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token comment\">//或者defer close(c)</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span>  v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> c<span class=\"token punctuation\">&#123;</span>\n        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"当channel-关闭且缓冲区为0时\"><a href=\"#当channel-关闭且缓冲区为0时\" class=\"headerlink\" title=\"当channel 关闭且缓冲区为0时\"></a>当channel 关闭且缓冲区为0时</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">demo6</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    c <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;-</span>c<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//输出为0</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"关闭未初始化的channel，会panic\"><a href=\"#关闭未初始化的channel，会panic\" class=\"headerlink\" title=\"关闭未初始化的channel，会panic\"></a>关闭未初始化的channel，会panic</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">demo6</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> c <span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span>\n    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"特殊情况\"><a href=\"#特殊情况\" class=\"headerlink\" title=\"特殊情况\"></a>特殊情况</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> ch <span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span>\n    <span class=\"token comment\">//func1</span>\n    <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        ch <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        ch <span class=\"token operator\">&lt;-</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">//func2</span>\n    <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>ch <span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">&lt;-</span>ch\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span>\n    c <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Tick</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">*</span> time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> <span class=\"token keyword\">range</span> c <span class=\"token punctuation\">&#123;</span>\n        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#goroutines: %d\\n\"</span><span class=\"token punctuation\">,</span> runtime<span class=\"token punctuation\">.</span><span class=\"token function\">NumGoroutine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//一段时间后输出结果为#goroutines: 2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>结果中的goroutines分别为fun2 和 main函数，因为fun2没有初始化ch 所以会一直阻塞（func1中的初始化只在其所在的闭包函数中有效)</p>\n<h3 id=\"注意点：\"><a href=\"#注意点：\" class=\"headerlink\" title=\"注意点：\"></a>注意点：</h3><ol>\n<li>channel关闭后，再向channel中写入数据会panic</li>\n<li>channel关闭后，再次关闭channel，会panic</li>\n<li>关闭未初始化的channel，会panic</li>\n<li>channel关闭后，可以继续从channel中接收数据</li>\n<li>当channel 关闭且缓冲区为0时，继续从channel接收数据会接收到一个channel定义类型的零值</li>\n<li>channel先进先出</li>\n</ol>\n<p>作者：coldwarm7<br>链接：<a href=\"https://www.jianshu.com/p/f25cdd72efce\">https://www.jianshu.com/p/f25cdd72efce</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>\n","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}},"excerpt":"","more":"<h1 id=\"channel的死锁和panic总结\"><a href=\"#channel的死锁和panic总结\" class=\"headerlink\" title=\"channel的死锁和panic总结\"></a>channel的死锁和panic总结</h1><h2 id=\"1-channel的容量为0时\"><a href=\"#1-channel的容量为0时\" class=\"headerlink\" title=\"1.channel的容量为0时\"></a>1.channel的容量为0时</h2><h3 id=\"第一种情况\"><a href=\"#第一种情况\" class=\"headerlink\" title=\"第一种情况\"></a>第一种情况</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tc <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n     <span class=\"token comment\">//一直接收不到消息发生阻塞，死锁</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;-</span>c<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"第二种情况\"><a href=\"#第二种情况\" class=\"headerlink\" title=\"第二种情况\"></a>第二种情况</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tc <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">//发送消息的时候无人接收</span>\n\tc <span class=\"token operator\">&lt;-</span> <span class=\"token number\">1</span>\n    <span class=\"token comment\">//接收消息 的时候无人发送 死锁</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;-</span>c<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这是因为channel size为0，之前把1传进c中，但是没有接收方，等到&lt;-c时，已经接收不到数据传入channel，所以死锁</p>\n<h3 id=\"第三种情况\"><a href=\"#第三种情况\" class=\"headerlink\" title=\"第三种情况\"></a>第三种情况</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token comment\">//没有初始化</span>\n\t<span class=\"token keyword\">var</span> ch <span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span>\n\t<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\tch <span class=\"token operator\">&lt;-</span> <span class=\"token number\">1</span>\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;-</span>ch<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"第四种情况\"><a href=\"#第四种情况\" class=\"headerlink\" title=\"第四种情况\"></a>第四种情况</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">\n<span class=\"token keyword\">func</span> <span class=\"token function\">demo5</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> c <span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span> <span class=\"token comment\">//定义类型</span>\n    c <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//初始化</span>\n    <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span>\n            c <span class=\"token operator\">&lt;-</span> i <span class=\"token comment\">//传入channel数据</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span>  v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> c<span class=\"token punctuation\">&#123;</span>\n        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>结果是死锁，应该将数据传进channel后，并没有关闭channel，for循环接收channel一直在监听，死锁</p>\n<p>数据传进channel后，输入方主动关闭channel</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">demo5</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> c <span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span>\n    c <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span>\n            c <span class=\"token operator\">&lt;-</span> i\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token comment\">//或者defer close(c)</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span>  v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> c<span class=\"token punctuation\">&#123;</span>\n        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"当channel-关闭且缓冲区为0时\"><a href=\"#当channel-关闭且缓冲区为0时\" class=\"headerlink\" title=\"当channel 关闭且缓冲区为0时\"></a>当channel 关闭且缓冲区为0时</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">demo6</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    c <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;-</span>c<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//输出为0</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"关闭未初始化的channel，会panic\"><a href=\"#关闭未初始化的channel，会panic\" class=\"headerlink\" title=\"关闭未初始化的channel，会panic\"></a>关闭未初始化的channel，会panic</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">demo6</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> c <span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span>\n    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"特殊情况\"><a href=\"#特殊情况\" class=\"headerlink\" title=\"特殊情况\"></a>特殊情况</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> ch <span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span>\n    <span class=\"token comment\">//func1</span>\n    <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        ch <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        ch <span class=\"token operator\">&lt;-</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">//func2</span>\n    <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>ch <span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">&lt;-</span>ch\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span>\n    c <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Tick</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">*</span> time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> <span class=\"token keyword\">range</span> c <span class=\"token punctuation\">&#123;</span>\n        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#goroutines: %d\\n\"</span><span class=\"token punctuation\">,</span> runtime<span class=\"token punctuation\">.</span><span class=\"token function\">NumGoroutine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//一段时间后输出结果为#goroutines: 2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>结果中的goroutines分别为fun2 和 main函数，因为fun2没有初始化ch 所以会一直阻塞（func1中的初始化只在其所在的闭包函数中有效)</p>\n<h3 id=\"注意点：\"><a href=\"#注意点：\" class=\"headerlink\" title=\"注意点：\"></a>注意点：</h3><ol>\n<li>channel关闭后，再向channel中写入数据会panic</li>\n<li>channel关闭后，再次关闭channel，会panic</li>\n<li>关闭未初始化的channel，会panic</li>\n<li>channel关闭后，可以继续从channel中接收数据</li>\n<li>当channel 关闭且缓冲区为0时，继续从channel接收数据会接收到一个channel定义类型的零值</li>\n<li>channel先进先出</li>\n</ol>\n<p>作者：coldwarm7<br>链接：<a href=\"https://www.jianshu.com/p/f25cdd72efce\">https://www.jianshu.com/p/f25cdd72efce</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>\n"},{"title":"docker-compose 执行模板文件构建镜像","date":"2022-02-15T07:56:01.404Z","updated":"2022-02-15T07:56:01.404Z","url":"/archives/docker-composetemplate","_content":"\n# docker-compose\n\n执行模板文件构建镜像\n\n```docker\ndocker-compose -f docker-compose.build.yml build --no-cache\n```\n","source":"_posts/docker-compose执行模板文件构建镜像.md","raw":"---\ntitle: docker-compose 执行模板文件构建镜像\ndate: 2022-02-15 15:56:01.404\nupdated: 2022-02-15 15:56:01.404\nurl: /archives/docker-composetemplate\ncategories: \n- docker\ntags: \n- docker-compose\n---\n\n# docker-compose\n\n执行模板文件构建镜像\n\n```docker\ndocker-compose -f docker-compose.build.yml build --no-cache\n```\n","slug":"docker-compose执行模板文件构建镜像","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clgxpu7xg000evouvewgngszp","content":"<h1 id=\"docker-compose\"><a href=\"#docker-compose\" class=\"headerlink\" title=\"docker-compose\"></a>docker-compose</h1><p>执行模板文件构建镜像</p>\n<pre class=\"line-numbers language-docker\" data-language=\"docker\"><code class=\"language-docker\">docker-compose -f docker-compose.build.yml build --no-cache<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}},"excerpt":"","more":"<h1 id=\"docker-compose\"><a href=\"#docker-compose\" class=\"headerlink\" title=\"docker-compose\"></a>docker-compose</h1><p>执行模板文件构建镜像</p>\n<pre class=\"line-numbers language-docker\" data-language=\"docker\"><code class=\"language-docker\">docker-compose -f docker-compose.build.yml build --no-cache<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n"},{"title":"docker 拉取指定平台架构的镜像","date":"2022-02-16T07:34:57.622Z","updated":"2022-03-31T12:07:53.104Z","url":"/archives/dockerla-qu-zhi-ding-ping-tai-de-jing-xiang","_content":"\n# docker 拉取指定平台架构的镜像\n有时候我们需要拉取指定平台架构的镜像但是我们又没有对应架构的服务器和硬件的时候：\n比如我们需要拉取一个arm64的node镜像，首先进入docker hub 搜索node镜像\n![image.png](/upload/2022/03/image-f8364fe234a64afe9a6c1d20ee65a75e.png)\n复制digest\n![image.png](/upload/2022/03/image-38e509972a8f4187982b3a5922ff0072.png)\n拉取对应版本和对应架构的镜像\n```bash\ndocker pull nginx:latest@sha256:3df2ee4220cd7ce126d98cad124c93ed81ea58ee050400ec3c3bca3b553d5448\n```\n在DOCKERFILE文件里面\n```dockerfile\nFROM nginx:latest@sha256:3df2ee4220cd7ce126d98cad124c93ed81ea58ee050400ec3c3bca3b553d5448\n```\n成功拉取","source":"_posts/docker拉取指定平台架构的镜像.md","raw":"---\ntitle: docker 拉取指定平台架构的镜像\ndate: 2022-02-16 15:34:57.622\nupdated: 2022-03-31 20:07:53.104\nurl: /archives/dockerla-qu-zhi-ding-ping-tai-de-jing-xiang\ncategories: \n- docker\ntags: \n- docker\n---\n\n# docker 拉取指定平台架构的镜像\n有时候我们需要拉取指定平台架构的镜像但是我们又没有对应架构的服务器和硬件的时候：\n比如我们需要拉取一个arm64的node镜像，首先进入docker hub 搜索node镜像\n![image.png](/upload/2022/03/image-f8364fe234a64afe9a6c1d20ee65a75e.png)\n复制digest\n![image.png](/upload/2022/03/image-38e509972a8f4187982b3a5922ff0072.png)\n拉取对应版本和对应架构的镜像\n```bash\ndocker pull nginx:latest@sha256:3df2ee4220cd7ce126d98cad124c93ed81ea58ee050400ec3c3bca3b553d5448\n```\n在DOCKERFILE文件里面\n```dockerfile\nFROM nginx:latest@sha256:3df2ee4220cd7ce126d98cad124c93ed81ea58ee050400ec3c3bca3b553d5448\n```\n成功拉取","slug":"docker拉取指定平台架构的镜像","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clgxpu7xi000jvouv5mr42iln","content":"<h1 id=\"docker-拉取指定平台架构的镜像\"><a href=\"#docker-拉取指定平台架构的镜像\" class=\"headerlink\" title=\"docker 拉取指定平台架构的镜像\"></a>docker 拉取指定平台架构的镜像</h1><p>有时候我们需要拉取指定平台架构的镜像但是我们又没有对应架构的服务器和硬件的时候：<br>比如我们需要拉取一个arm64的node镜像，首先进入docker hub 搜索node镜像<br><img src=\"/upload/2022/03/image-f8364fe234a64afe9a6c1d20ee65a75e.png\" alt=\"image.png\"><br>复制digest<br><img src=\"/upload/2022/03/image-38e509972a8f4187982b3a5922ff0072.png\" alt=\"image.png\"><br>拉取对应版本和对应架构的镜像</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> pull nginx:latest@sha256:3df2ee4220cd7ce126d98cad124c93ed81ea58ee050400ec3c3bca3b553d5448<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>在DOCKERFILE文件里面</p>\n<pre class=\"line-numbers language-docker\" data-language=\"docker\"><code class=\"language-docker\"><span class=\"token instruction\"><span class=\"token keyword\">FROM</span> nginx:latest@sha256:3df2ee4220cd7ce126d98cad124c93ed81ea58ee050400ec3c3bca3b553d5448</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>成功拉取</p>\n","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}},"excerpt":"","more":"<h1 id=\"docker-拉取指定平台架构的镜像\"><a href=\"#docker-拉取指定平台架构的镜像\" class=\"headerlink\" title=\"docker 拉取指定平台架构的镜像\"></a>docker 拉取指定平台架构的镜像</h1><p>有时候我们需要拉取指定平台架构的镜像但是我们又没有对应架构的服务器和硬件的时候：<br>比如我们需要拉取一个arm64的node镜像，首先进入docker hub 搜索node镜像<br><img src=\"/upload/2022/03/image-f8364fe234a64afe9a6c1d20ee65a75e.png\" alt=\"image.png\"><br>复制digest<br><img src=\"/upload/2022/03/image-38e509972a8f4187982b3a5922ff0072.png\" alt=\"image.png\"><br>拉取对应版本和对应架构的镜像</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> pull nginx:latest@sha256:3df2ee4220cd7ce126d98cad124c93ed81ea58ee050400ec3c3bca3b553d5448<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>在DOCKERFILE文件里面</p>\n<pre class=\"line-numbers language-docker\" data-language=\"docker\"><code class=\"language-docker\"><span class=\"token instruction\"><span class=\"token keyword\">FROM</span> nginx:latest@sha256:3df2ee4220cd7ce126d98cad124c93ed81ea58ee050400ec3c3bca3b553d5448</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>成功拉取</p>\n"},{"title":"git 报错refusing to merge unrelated histories，强制提交","date":"2022-02-16T07:37:51.669Z","updated":"2022-02-16T07:37:51.669Z","url":"/archives/gitbao-cuo-refusingtomergeunrelatedhistories-qiang-zhi-ti-jiao","_content":"\n拉取代码或者推送代码报错\n\n```bash\nrefusing to merge unrelated histories\n```\n\n解决：  \n方法一: 允许不相关历史提交，并强制合并\n\n```bash\ngit pull origin master --allow-unrelated-histories\n```\n\n方法二： 强制提交\n\n```bash\ngit push --force origin master\n```","source":"_posts/git 报错refusing to merge unrelated histories，强制提交.md","raw":"---\ntitle: git 报错refusing to merge unrelated histories，强制提交\ndate: 2022-02-16 15:37:51.669\nupdated: 2022-02-16 15:37:51.669\nurl: /archives/gitbao-cuo-refusingtomergeunrelatedhistories-qiang-zhi-ti-jiao\ncategories: \n- git\ntags: \n- git\n---\n\n拉取代码或者推送代码报错\n\n```bash\nrefusing to merge unrelated histories\n```\n\n解决：  \n方法一: 允许不相关历史提交，并强制合并\n\n```bash\ngit pull origin master --allow-unrelated-histories\n```\n\n方法二： 强制提交\n\n```bash\ngit push --force origin master\n```","slug":"git 报错refusing to merge unrelated histories，强制提交","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clgxpu7xj000kvouvevz96kcx","content":"<p>拉取代码或者推送代码报错</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">refusing to merge unrelated histories<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>解决：<br>方法一: 允许不相关历史提交，并强制合并</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> pull origin master --allow-unrelated-histories<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>方法二： 强制提交</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> push --force origin master<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}},"excerpt":"","more":"<p>拉取代码或者推送代码报错</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">refusing to merge unrelated histories<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>解决：<br>方法一: 允许不相关历史提交，并强制合并</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> pull origin master --allow-unrelated-histories<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>方法二： 强制提交</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> push --force origin master<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>"},{"title":"docker 保存镜像到本地和加载镜像","date":"2022-03-30T06:20:55.347Z","updated":"2022-03-30T06:32:57.752Z","url":"/archives/docker保存镜像到本地和加载镜像","description":"docker保存镜像到本地以及加载镜像","_content":"\n# docker 保存镜像到本地和加载镜像\n\n## 导出docker镜像，到linux本地\n\n```bash   \ndocker save -o   指定地址和文件名   镜像名 \n```\n\n- 例子：  \n把名字为test，版本为4.0的docker镜像，保存到/data/export目录下，保存名字和格式为test.tar\n```bash \ndocker save -o /data/export/test.tar test:4.0\n```\n\n## 加载镜像文件\n\n```bash\ndocker load < 文件名\n```\n\n","source":"_posts/docker保存镜像到本地和加载镜像.md","raw":"---\ntitle: docker 保存镜像到本地和加载镜像\ndate: 2022-03-30 14:20:55.347\nupdated: 2022-03-30 14:32:57.752\nurl: /archives/docker保存镜像到本地和加载镜像\ndescription: docker保存镜像到本地以及加载镜像\ncategories: \n- docker\ntags: \n- docker\n---\n\n# docker 保存镜像到本地和加载镜像\n\n## 导出docker镜像，到linux本地\n\n```bash   \ndocker save -o   指定地址和文件名   镜像名 \n```\n\n- 例子：  \n把名字为test，版本为4.0的docker镜像，保存到/data/export目录下，保存名字和格式为test.tar\n```bash \ndocker save -o /data/export/test.tar test:4.0\n```\n\n## 加载镜像文件\n\n```bash\ndocker load < 文件名\n```\n\n","slug":"docker保存镜像到本地和加载镜像","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clgxpu7xl000ovouvhkxpfxvc","content":"<h1 id=\"docker-保存镜像到本地和加载镜像\"><a href=\"#docker-保存镜像到本地和加载镜像\" class=\"headerlink\" title=\"docker 保存镜像到本地和加载镜像\"></a>docker 保存镜像到本地和加载镜像</h1><h2 id=\"导出docker镜像，到linux本地\"><a href=\"#导出docker镜像，到linux本地\" class=\"headerlink\" title=\"导出docker镜像，到linux本地\"></a>导出docker镜像，到linux本地</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> save -o   指定地址和文件名   镜像名 <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li>例子：<br>把名字为test，版本为4.0的docker镜像，保存到&#x2F;data&#x2F;export目录下，保存名字和格式为test.tar<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> save -o /data/export/test.tar test:4.0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"加载镜像文件\"><a href=\"#加载镜像文件\" class=\"headerlink\" title=\"加载镜像文件\"></a>加载镜像文件</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> load <span class=\"token operator\">&lt;</span> 文件名<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}},"excerpt":"","more":"<h1 id=\"docker-保存镜像到本地和加载镜像\"><a href=\"#docker-保存镜像到本地和加载镜像\" class=\"headerlink\" title=\"docker 保存镜像到本地和加载镜像\"></a>docker 保存镜像到本地和加载镜像</h1><h2 id=\"导出docker镜像，到linux本地\"><a href=\"#导出docker镜像，到linux本地\" class=\"headerlink\" title=\"导出docker镜像，到linux本地\"></a>导出docker镜像，到linux本地</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> save -o   指定地址和文件名   镜像名 <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li>例子：<br>把名字为test，版本为4.0的docker镜像，保存到&#x2F;data&#x2F;export目录下，保存名字和格式为test.tar<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> save -o /data/export/test.tar test:4.0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"加载镜像文件\"><a href=\"#加载镜像文件\" class=\"headerlink\" title=\"加载镜像文件\"></a>加载镜像文件</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> load <span class=\"token operator\">&lt;</span> 文件名<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n"},{"title":"git 文件状态 、status","date":"2022-02-16T07:44:04.606Z","updated":"2022-02-16T07:51:13.889Z","url":"/archives/gitwen-jian-zhuang-tai-status","_content":"\n# git status命令\n\n查看文件更改状态\n\n```bash\ngit status\n```\n\n带文件状态码查看\n\n```bash\ngit status -s\n```\n\n- **A**: 你本地新增的文件（服务器上没有）.\n  \n- **C**: 文件的一个新拷贝.\n  \n- **D**: 你本地删除的文件（服务器上还在）.\n  \n- **M**: 文件的内容或者mode被修改了.\n  \n- **R**: 文件名被修改了。\n  \n- **T**: 文件的类型被修改了。\n  \n- **U**: 文件没有被合并(你需要完成合并才能进行提交)。\n  \n- **X**: 未知状态(很可能是遇到git的bug了，你可以向git提交bug report)\n  \n- **?**：未被git进行管理，可以使用git add file1把file1添加进git能被git所进行管理","source":"_posts/git 文件状态 、status.md","raw":"---\ntitle: git 文件状态 、status\ndate: 2022-02-16 15:44:04.606\nupdated: 2022-02-16 15:51:13.889\nurl: /archives/gitwen-jian-zhuang-tai-status\ncategories: \n- git\ntags: \n- git\n- 文件\n- status\n---\n\n# git status命令\n\n查看文件更改状态\n\n```bash\ngit status\n```\n\n带文件状态码查看\n\n```bash\ngit status -s\n```\n\n- **A**: 你本地新增的文件（服务器上没有）.\n  \n- **C**: 文件的一个新拷贝.\n  \n- **D**: 你本地删除的文件（服务器上还在）.\n  \n- **M**: 文件的内容或者mode被修改了.\n  \n- **R**: 文件名被修改了。\n  \n- **T**: 文件的类型被修改了。\n  \n- **U**: 文件没有被合并(你需要完成合并才能进行提交)。\n  \n- **X**: 未知状态(很可能是遇到git的bug了，你可以向git提交bug report)\n  \n- **?**：未被git进行管理，可以使用git add file1把file1添加进git能被git所进行管理","slug":"git 文件状态 、status","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clgxpu7xm000rvouvhg0hezd6","content":"<h1 id=\"git-status命令\"><a href=\"#git-status命令\" class=\"headerlink\" title=\"git status命令\"></a>git status命令</h1><p>查看文件更改状态</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> status<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>带文件状态码查看</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> status -s<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><p><strong>A</strong>: 你本地新增的文件（服务器上没有）.</p>\n</li>\n<li><p><strong>C</strong>: 文件的一个新拷贝.</p>\n</li>\n<li><p><strong>D</strong>: 你本地删除的文件（服务器上还在）.</p>\n</li>\n<li><p><strong>M</strong>: 文件的内容或者mode被修改了.</p>\n</li>\n<li><p><strong>R</strong>: 文件名被修改了。</p>\n</li>\n<li><p><strong>T</strong>: 文件的类型被修改了。</p>\n</li>\n<li><p><strong>U</strong>: 文件没有被合并(你需要完成合并才能进行提交)。</p>\n</li>\n<li><p><strong>X</strong>: 未知状态(很可能是遇到git的bug了，你可以向git提交bug report)</p>\n</li>\n<li><p>**?**：未被git进行管理，可以使用git add file1把file1添加进git能被git所进行管理</p>\n</li>\n</ul>\n","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}},"excerpt":"","more":"<h1 id=\"git-status命令\"><a href=\"#git-status命令\" class=\"headerlink\" title=\"git status命令\"></a>git status命令</h1><p>查看文件更改状态</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> status<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>带文件状态码查看</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> status -s<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><p><strong>A</strong>: 你本地新增的文件（服务器上没有）.</p>\n</li>\n<li><p><strong>C</strong>: 文件的一个新拷贝.</p>\n</li>\n<li><p><strong>D</strong>: 你本地删除的文件（服务器上还在）.</p>\n</li>\n<li><p><strong>M</strong>: 文件的内容或者mode被修改了.</p>\n</li>\n<li><p><strong>R</strong>: 文件名被修改了。</p>\n</li>\n<li><p><strong>T</strong>: 文件的类型被修改了。</p>\n</li>\n<li><p><strong>U</strong>: 文件没有被合并(你需要完成合并才能进行提交)。</p>\n</li>\n<li><p><strong>X</strong>: 未知状态(很可能是遇到git的bug了，你可以向git提交bug report)</p>\n</li>\n<li><p>**?**：未被git进行管理，可以使用git add file1把file1添加进git能被git所进行管理</p>\n</li>\n</ul>\n"},{"title":"git 查看提交历史记录","date":"2022-02-16T07:44:48.005Z","updated":"2022-02-16T07:45:01.308Z","url":"/archives/gitcha-kan-ti-jiao-li-shi-ji-lu","_content":"\n# 查看历史\n\n## 查看所有提交历史记录\n\n```bash\ngit log\n```\n\n--oneline 查看历史记录简洁版本\n\n```bash\ngit log --oneline\n```\n\n## 查看指定文件的修改记录\n\n```bash\ngit blame <file>\n```","source":"_posts/git 查看提交历史记录.md","raw":"---\ntitle: git 查看提交历史记录\ndate: 2022-02-16 15:44:48.005\nupdated: 2022-02-16 15:45:01.308\nurl: /archives/gitcha-kan-ti-jiao-li-shi-ji-lu\ncategories: \n- git\ntags: \n- git\n- history\n- log\n---\n\n# 查看历史\n\n## 查看所有提交历史记录\n\n```bash\ngit log\n```\n\n--oneline 查看历史记录简洁版本\n\n```bash\ngit log --oneline\n```\n\n## 查看指定文件的修改记录\n\n```bash\ngit blame <file>\n```","slug":"git 查看提交历史记录","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clgxpu7xn000wvouv8wsrbhbu","content":"<h1 id=\"查看历史\"><a href=\"#查看历史\" class=\"headerlink\" title=\"查看历史\"></a>查看历史</h1><h2 id=\"查看所有提交历史记录\"><a href=\"#查看所有提交历史记录\" class=\"headerlink\" title=\"查看所有提交历史记录\"></a>查看所有提交历史记录</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> log<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>–oneline 查看历史记录简洁版本</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> log --oneline<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"查看指定文件的修改记录\"><a href=\"#查看指定文件的修改记录\" class=\"headerlink\" title=\"查看指定文件的修改记录\"></a>查看指定文件的修改记录</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> blame <span class=\"token operator\">&lt;</span>file<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}},"excerpt":"","more":"<h1 id=\"查看历史\"><a href=\"#查看历史\" class=\"headerlink\" title=\"查看历史\"></a>查看历史</h1><h2 id=\"查看所有提交历史记录\"><a href=\"#查看所有提交历史记录\" class=\"headerlink\" title=\"查看所有提交历史记录\"></a>查看所有提交历史记录</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> log<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>–oneline 查看历史记录简洁版本</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> log --oneline<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"查看指定文件的修改记录\"><a href=\"#查看指定文件的修改记录\" class=\"headerlink\" title=\"查看指定文件的修改记录\"></a>查看指定文件的修改记录</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> blame <span class=\"token operator\">&lt;</span>file<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>"},{"title":"git 设置ssh 代理","date":"2022-02-16T07:41:21.313Z","updated":"2022-02-16T07:41:44.620Z","url":"/archives/gitshe-zhi-sshdai-li","_content":"\n配置文件，如果不存在则自行创建一个\n\n```bash\nvim ~\\.ssh\\config\n```\n\n增加内容,端口号设置socks端口号\n\n```bash\nProxyCommand connect -S 127.0.0.1:10808 -a none %h %p\n\nHost github.com\n  User git\n  Port 22\n  Hostname github.com\n  # 注意修改路径为你的路径\n  IdentityFile \"~\\.ssh\\id_rsa\"\n  TCPKeepAlive yes\n\nHost ssh.github.com\n  User git\n  Port 443\n  Hostname ssh.github.com\n  # 注意修改路径为你的路径\n  IdentityFile \"~\\.ssh\\id_rsa\"\n  TCPKeepAlive yes\n```","source":"_posts/git 设置ssh 代理.md","raw":"---\ntitle: git 设置ssh 代理\ndate: 2022-02-16 15:41:21.313\nupdated: 2022-02-16 15:41:44.62\nurl: /archives/gitshe-zhi-sshdai-li\ncategories: \n- git\ntags: \n- git\n- 代理\n---\n\n配置文件，如果不存在则自行创建一个\n\n```bash\nvim ~\\.ssh\\config\n```\n\n增加内容,端口号设置socks端口号\n\n```bash\nProxyCommand connect -S 127.0.0.1:10808 -a none %h %p\n\nHost github.com\n  User git\n  Port 22\n  Hostname github.com\n  # 注意修改路径为你的路径\n  IdentityFile \"~\\.ssh\\id_rsa\"\n  TCPKeepAlive yes\n\nHost ssh.github.com\n  User git\n  Port 443\n  Hostname ssh.github.com\n  # 注意修改路径为你的路径\n  IdentityFile \"~\\.ssh\\id_rsa\"\n  TCPKeepAlive yes\n```","slug":"git 设置ssh 代理","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clgxpu7xo000xvouva341hnky","content":"<p>配置文件，如果不存在则自行创建一个</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">vim</span> ~<span class=\"token punctuation\">\\</span>.ssh<span class=\"token punctuation\">\\</span>config<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>增加内容,端口号设置socks端口号</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ProxyCommand connect -S <span class=\"token number\">127.0</span>.0.1:10808 -a none %h %p\n\nHost github.com\n  User <span class=\"token function\">git</span>\n  Port <span class=\"token number\">22</span>\n  Hostname github.com\n  <span class=\"token comment\"># 注意修改路径为你的路径</span>\n  IdentityFile <span class=\"token string\">\"~\\.ssh\\id_rsa\"</span>\n  TCPKeepAlive <span class=\"token function\">yes</span>\n\nHost ssh.github.com\n  User <span class=\"token function\">git</span>\n  Port <span class=\"token number\">443</span>\n  Hostname ssh.github.com\n  <span class=\"token comment\"># 注意修改路径为你的路径</span>\n  IdentityFile <span class=\"token string\">\"~\\.ssh\\id_rsa\"</span>\n  TCPKeepAlive <span class=\"token function\">yes</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}},"excerpt":"","more":"<p>配置文件，如果不存在则自行创建一个</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">vim</span> ~<span class=\"token punctuation\">\\</span>.ssh<span class=\"token punctuation\">\\</span>config<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>增加内容,端口号设置socks端口号</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ProxyCommand connect -S <span class=\"token number\">127.0</span>.0.1:10808 -a none %h %p\n\nHost github.com\n  User <span class=\"token function\">git</span>\n  Port <span class=\"token number\">22</span>\n  Hostname github.com\n  <span class=\"token comment\"># 注意修改路径为你的路径</span>\n  IdentityFile <span class=\"token string\">\"~\\.ssh\\id_rsa\"</span>\n  TCPKeepAlive <span class=\"token function\">yes</span>\n\nHost ssh.github.com\n  User <span class=\"token function\">git</span>\n  Port <span class=\"token number\">443</span>\n  Hostname ssh.github.com\n  <span class=\"token comment\"># 注意修改路径为你的路径</span>\n  IdentityFile <span class=\"token string\">\"~\\.ssh\\id_rsa\"</span>\n  TCPKeepAlive <span class=\"token function\">yes</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>"},{"title":"git add 暂存","date":"2022-02-16T07:50:57.451Z","updated":"2022-02-16T07:50:57.451Z","url":"/archives/gitaddzan-cun","_content":"\n# add命令\n\n## git add 命令可将该文件添加到暂存区。\n\n添加一个或多个文件到暂存区：\n\n```bash\ngit add [fle1] [file2] ...\n```\n\n添加指定目录到暂存区，包括子目录：\n\n```bash\ngit add [dir]\n```\n\n添加当前目录下的所有文件到暂存区：\n\n```bash\ngit add .\n```","source":"_posts/git add 暂存.md","raw":"---\ntitle: git add 暂存\ndate: 2022-02-16 15:50:57.451\nupdated: 2022-02-16 15:50:57.451\nurl: /archives/gitaddzan-cun\ncategories: \n- git\ntags: \n- git\n- add\n---\n\n# add命令\n\n## git add 命令可将该文件添加到暂存区。\n\n添加一个或多个文件到暂存区：\n\n```bash\ngit add [fle1] [file2] ...\n```\n\n添加指定目录到暂存区，包括子目录：\n\n```bash\ngit add [dir]\n```\n\n添加当前目录下的所有文件到暂存区：\n\n```bash\ngit add .\n```","slug":"git add 暂存","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clgxpu7xp000zvouve2gua4jy","content":"<h1 id=\"add命令\"><a href=\"#add命令\" class=\"headerlink\" title=\"add命令\"></a>add命令</h1><h2 id=\"git-add-命令可将该文件添加到暂存区。\"><a href=\"#git-add-命令可将该文件添加到暂存区。\" class=\"headerlink\" title=\"git add 命令可将该文件添加到暂存区。\"></a>git add 命令可将该文件添加到暂存区。</h2><p>添加一个或多个文件到暂存区：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token punctuation\">[</span>fle1<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>file2<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">..</span>.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>添加指定目录到暂存区，包括子目录：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token punctuation\">[</span>dir<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>添加当前目录下的所有文件到暂存区：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}},"excerpt":"","more":"<h1 id=\"add命令\"><a href=\"#add命令\" class=\"headerlink\" title=\"add命令\"></a>add命令</h1><h2 id=\"git-add-命令可将该文件添加到暂存区。\"><a href=\"#git-add-命令可将该文件添加到暂存区。\" class=\"headerlink\" title=\"git add 命令可将该文件添加到暂存区。\"></a>git add 命令可将该文件添加到暂存区。</h2><p>添加一个或多个文件到暂存区：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token punctuation\">[</span>fle1<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>file2<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">..</span>.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>添加指定目录到暂存区，包括子目录：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token punctuation\">[</span>dir<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>添加当前目录下的所有文件到暂存区：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>"},{"title":"git 配置http代理","date":"2022-02-16T07:40:39.152Z","updated":"2022-02-16T07:41:34.617Z","url":"/archives/gitpei-zhi-http-dai-li","_content":"\n设置代理\n\n```bash\ngit config --global https.proxy http://127.0.0.1:1080  \ngit config --global https.proxy https://127.0.0.1:1080\n```\n\n取消代理\n\n```bash\ngit config --global --unset http.proxy\ngit config --global --unset https.proxy\n```","source":"_posts/git 配置http代理.md","raw":"---\ntitle: git 配置http代理\ndate: 2022-02-16 15:40:39.152\nupdated: 2022-02-16 15:41:34.617\nurl: /archives/gitpei-zhi-http-dai-li\ncategories: \n- git\ntags: \n- git\n- 代理\n---\n\n设置代理\n\n```bash\ngit config --global https.proxy http://127.0.0.1:1080  \ngit config --global https.proxy https://127.0.0.1:1080\n```\n\n取消代理\n\n```bash\ngit config --global --unset http.proxy\ngit config --global --unset https.proxy\n```","slug":"git 配置http代理","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clgxpu7xr0013vouvh67k6io3","content":"<p>设置代理</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> config --global https.proxy http://127.0.0.1:1080  \n<span class=\"token function\">git</span> config --global https.proxy https://127.0.0.1:1080<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>取消代理</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> config --global --unset http.proxy\n<span class=\"token function\">git</span> config --global --unset https.proxy<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}},"excerpt":"","more":"<p>设置代理</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> config --global https.proxy http://127.0.0.1:1080  \n<span class=\"token function\">git</span> config --global https.proxy https://127.0.0.1:1080<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>取消代理</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> config --global --unset http.proxy\n<span class=\"token function\">git</span> config --global --unset https.proxy<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>"},{"title":"git 配置用户名邮箱","date":"2022-02-16T07:36:50.932Z","updated":"2022-02-16T07:36:50.932Z","url":"/archives/gitpei-zhi-yong-hu-ming-you-xiang","_content":"\n## git全局用户名邮箱配置\n\n```bash\ngit config --global user.name  \"username\"  \ngit config --global user.email  \"email\"\n```\n\n## git局部用户名邮箱配置\n\n```bash\ngit config  user.name  \"username\"  \ngit config  user.email  \"email\"\n```\n\n## 修改已有配置信息\n\n```bash\ngit config --replace-all user.name \"name\"\n\ngit config --replace-all user.email \"123@qq.com\"\n```\n\n### 注意：局部变量覆盖全局变量！！！","source":"_posts/git 配置用户名邮箱.md","raw":"---\ntitle: git 配置用户名邮箱\ndate: 2022-02-16 15:36:50.932\nupdated: 2022-02-16 15:36:50.932\nurl: /archives/gitpei-zhi-yong-hu-ming-you-xiang\ncategories: \n- git\ntags: \n- git\n---\n\n## git全局用户名邮箱配置\n\n```bash\ngit config --global user.name  \"username\"  \ngit config --global user.email  \"email\"\n```\n\n## git局部用户名邮箱配置\n\n```bash\ngit config  user.name  \"username\"  \ngit config  user.email  \"email\"\n```\n\n## 修改已有配置信息\n\n```bash\ngit config --replace-all user.name \"name\"\n\ngit config --replace-all user.email \"123@qq.com\"\n```\n\n### 注意：局部变量覆盖全局变量！！！","slug":"git 配置用户名邮箱","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clgxpu7xt0015vouv6y5zc37a","content":"<h2 id=\"git全局用户名邮箱配置\"><a href=\"#git全局用户名邮箱配置\" class=\"headerlink\" title=\"git全局用户名邮箱配置\"></a>git全局用户名邮箱配置</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> config --global user.name  <span class=\"token string\">\"username\"</span>  \n<span class=\"token function\">git</span> config --global user.email  <span class=\"token string\">\"email\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"git局部用户名邮箱配置\"><a href=\"#git局部用户名邮箱配置\" class=\"headerlink\" title=\"git局部用户名邮箱配置\"></a>git局部用户名邮箱配置</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> config  user.name  <span class=\"token string\">\"username\"</span>  \n<span class=\"token function\">git</span> config  user.email  <span class=\"token string\">\"email\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"修改已有配置信息\"><a href=\"#修改已有配置信息\" class=\"headerlink\" title=\"修改已有配置信息\"></a>修改已有配置信息</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> config --replace-all user.name <span class=\"token string\">\"name\"</span>\n\n<span class=\"token function\">git</span> config --replace-all user.email <span class=\"token string\">\"123@qq.com\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"注意：局部变量覆盖全局变量！！！\"><a href=\"#注意：局部变量覆盖全局变量！！！\" class=\"headerlink\" title=\"注意：局部变量覆盖全局变量！！！\"></a>注意：局部变量覆盖全局变量！！！</h3>","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}},"excerpt":"","more":"<h2 id=\"git全局用户名邮箱配置\"><a href=\"#git全局用户名邮箱配置\" class=\"headerlink\" title=\"git全局用户名邮箱配置\"></a>git全局用户名邮箱配置</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> config --global user.name  <span class=\"token string\">\"username\"</span>  \n<span class=\"token function\">git</span> config --global user.email  <span class=\"token string\">\"email\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"git局部用户名邮箱配置\"><a href=\"#git局部用户名邮箱配置\" class=\"headerlink\" title=\"git局部用户名邮箱配置\"></a>git局部用户名邮箱配置</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> config  user.name  <span class=\"token string\">\"username\"</span>  \n<span class=\"token function\">git</span> config  user.email  <span class=\"token string\">\"email\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"修改已有配置信息\"><a href=\"#修改已有配置信息\" class=\"headerlink\" title=\"修改已有配置信息\"></a>修改已有配置信息</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> config --replace-all user.name <span class=\"token string\">\"name\"</span>\n\n<span class=\"token function\">git</span> config --replace-all user.email <span class=\"token string\">\"123@qq.com\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"注意：局部变量覆盖全局变量！！！\"><a href=\"#注意：局部变量覆盖全局变量！！！\" class=\"headerlink\" title=\"注意：局部变量覆盖全局变量！！！\"></a>注意：局部变量覆盖全局变量！！！</h3>"},{"title":"go mod tidy 报错timeout","date":"2022-05-05T08:33:04.997Z","updated":"2022-05-05T08:39:43.939Z","url":"/archives/gomodtidy报错timeout","_content":"\n# go mod tidy 报错timeout\n当我们设置了GOPROXY代理之后\n```bash\ngo env -w GOPROXY=https://goproxy.io,direct\n```\n或者\n```bash\ngo env -w GOPROXY=https://goproxy.cn,direct\n```\n执行 go mod tidy 命令报错\n```bash\ngo mod tidy\ngithub.com/spf13/viper: github.com/spf13/viper@v1.11.0: verifying module: github.com/spf13/viper@v1.11.0: Get \"https://sum.golang.org/lookup/github.com/spf13/viper@v1.11.0\": dial tcp 142.251.42.241:443: i/o timeout\n```\n报错是因为更改了GOPROXY 导致校验不通过\n解决办法\n1.关闭GOSUMDB 校验\n```bash\ngo env -w GOSUMDB=off\n```\n2.设置另一个国内可用的sum验证服务\n```bash\ngo env -w GOSUMDB=\"sum.golang.google.cn\"\n```\n","source":"_posts/go mod tidy 报错timeout.md","raw":"---\ntitle: go mod tidy 报错timeout\ndate: 2022-05-05 16:33:04.997\nupdated: 2022-05-05 16:39:43.939\nurl: /archives/gomodtidy报错timeout\ncategories: \n- golang\ntags: \n- golang\n---\n\n# go mod tidy 报错timeout\n当我们设置了GOPROXY代理之后\n```bash\ngo env -w GOPROXY=https://goproxy.io,direct\n```\n或者\n```bash\ngo env -w GOPROXY=https://goproxy.cn,direct\n```\n执行 go mod tidy 命令报错\n```bash\ngo mod tidy\ngithub.com/spf13/viper: github.com/spf13/viper@v1.11.0: verifying module: github.com/spf13/viper@v1.11.0: Get \"https://sum.golang.org/lookup/github.com/spf13/viper@v1.11.0\": dial tcp 142.251.42.241:443: i/o timeout\n```\n报错是因为更改了GOPROXY 导致校验不通过\n解决办法\n1.关闭GOSUMDB 校验\n```bash\ngo env -w GOSUMDB=off\n```\n2.设置另一个国内可用的sum验证服务\n```bash\ngo env -w GOSUMDB=\"sum.golang.google.cn\"\n```\n","slug":"go mod tidy 报错timeout","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clgxpu7xu0019vouv2kp75orh","content":"<h1 id=\"go-mod-tidy-报错timeout\"><a href=\"#go-mod-tidy-报错timeout\" class=\"headerlink\" title=\"go mod tidy 报错timeout\"></a>go mod tidy 报错timeout</h1><p>当我们设置了GOPROXY代理之后</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">go <span class=\"token function\">env</span> -w <span class=\"token assign-left variable\">GOPROXY</span><span class=\"token operator\">=</span>https://goproxy.io,direct<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>或者</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">go <span class=\"token function\">env</span> -w <span class=\"token assign-left variable\">GOPROXY</span><span class=\"token operator\">=</span>https://goproxy.cn,direct<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>执行 go mod tidy 命令报错</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">go mod tidy\ngithub.com/spf13/viper: github.com/spf13/viper@v1.11.0: verifying module: github.com/spf13/viper@v1.11.0: Get <span class=\"token string\">\"https://sum.golang.org/lookup/github.com/spf13/viper@v1.11.0\"</span><span class=\"token builtin class-name\">:</span> dial tcp <span class=\"token number\">142.251</span>.42.241:443: i/o <span class=\"token function\">timeout</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>报错是因为更改了GOPROXY 导致校验不通过<br>解决办法<br>1.关闭GOSUMDB 校验</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">go <span class=\"token function\">env</span> -w <span class=\"token assign-left variable\">GOSUMDB</span><span class=\"token operator\">=</span>off<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>2.设置另一个国内可用的sum验证服务</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">go <span class=\"token function\">env</span> -w <span class=\"token assign-left variable\">GOSUMDB</span><span class=\"token operator\">=</span><span class=\"token string\">\"sum.golang.google.cn\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}},"excerpt":"","more":"<h1 id=\"go-mod-tidy-报错timeout\"><a href=\"#go-mod-tidy-报错timeout\" class=\"headerlink\" title=\"go mod tidy 报错timeout\"></a>go mod tidy 报错timeout</h1><p>当我们设置了GOPROXY代理之后</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">go <span class=\"token function\">env</span> -w <span class=\"token assign-left variable\">GOPROXY</span><span class=\"token operator\">=</span>https://goproxy.io,direct<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>或者</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">go <span class=\"token function\">env</span> -w <span class=\"token assign-left variable\">GOPROXY</span><span class=\"token operator\">=</span>https://goproxy.cn,direct<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>执行 go mod tidy 命令报错</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">go mod tidy\ngithub.com/spf13/viper: github.com/spf13/viper@v1.11.0: verifying module: github.com/spf13/viper@v1.11.0: Get <span class=\"token string\">\"https://sum.golang.org/lookup/github.com/spf13/viper@v1.11.0\"</span><span class=\"token builtin class-name\">:</span> dial tcp <span class=\"token number\">142.251</span>.42.241:443: i/o <span class=\"token function\">timeout</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>报错是因为更改了GOPROXY 导致校验不通过<br>解决办法<br>1.关闭GOSUMDB 校验</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">go <span class=\"token function\">env</span> -w <span class=\"token assign-left variable\">GOSUMDB</span><span class=\"token operator\">=</span>off<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>2.设置另一个国内可用的sum验证服务</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">go <span class=\"token function\">env</span> -w <span class=\"token assign-left variable\">GOSUMDB</span><span class=\"token operator\">=</span><span class=\"token string\">\"sum.golang.google.cn\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n"},{"title":"golang AES算法 CBC加密","date":"2022-04-18T10:18:51.280Z","updated":"2022-04-18T10:18:51.280Z","url":"/archives/golangaes-suan-fa-cbc-jia-mi","description":"golang代码实现AES算法 CBC加密","_content":"\n```golang\npackage aes\n\nimport (\n\t\"bytes\"\n\t\"crypto/aes\"\n\t\"crypto/cipher\"\n\t\"encoding/base64\"\n\t\"errors\"\n)\n\n//pkcs7Padding 填充\nfunc pkcs7Padding(data []byte, blockSize int) []byte {\n\t//判断缺少几位长度。最少1，最多 blockSize\n\tpadding := blockSize - len(data)%blockSize\n\t//补足位数。把切片[]byte{byte(padding)}复制padding个\n\tpadText := bytes.Repeat([]byte{byte(padding)}, padding)\n\treturn append(data, padText...)\n}\n\n//pkcs7UnPadding 填充的反向操作\nfunc pkcs7UnPadding(data []byte) ([]byte, error) {\n\tlength := len(data)\n\tif length == 0 {\n\t\treturn nil, errors.New(\"加密字符串错误！\")\n\t}\n\t//获取填充的个数\n\tunPadding := int(data[length-1])\n\treturn data[:(length - unPadding)], nil\n}\n\n//AesEncrypt 加密\nfunc AesEncrypt(data []byte, key []byte) ([]byte, error) {\n\t//创建加密实例\n\tblock, err := aes.NewCipher(key)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\t//判断加密快的大小\n\tblockSize := block.BlockSize()\n\t//填充\n\tencryptBytes := pkcs7Padding(data, blockSize)\n\t//初始化加密数据接收切片\n\tcrypted := make([]byte, len(encryptBytes))\n\t//使用cbc加密模式\n\tblockMode := cipher.NewCBCEncrypter(block, key[:blockSize])\n\t//执行加密\n\tblockMode.CryptBlocks(crypted, encryptBytes)\n\treturn crypted, nil\n}\n\n//AesDecrypt 解密\nfunc AesDecrypt(data []byte, key []byte) ([]byte, error) {\n\t//创建实例\n\tblock, err := aes.NewCipher(key)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\t//获取块的大小\n\tblockSize := block.BlockSize()\n\t//使用cbc\n\tblockMode := cipher.NewCBCDecrypter(block, key[:blockSize])\n\t//初始化解密数据接收切片\n\tcrypted := make([]byte, len(data))\n\t//执行解密\n\tblockMode.CryptBlocks(crypted, data)\n\t//去除填充\n\tcrypted, err = pkcs7UnPadding(crypted)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn crypted, nil\n}\n\n//EncryptByAes Aes加密 后 base64 再加\nfunc EncryptByAes(data, key []byte) (string, error) {\n\tres, err := AesEncrypt(data, key)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\treturn base64.StdEncoding.EncodeToString(res), nil\n}\n\n//DecryptByAes Aes 解密\nfunc DecryptByAes(data, key string) ([]byte, error) {\n\tdataByte, err := base64.StdEncoding.DecodeString(data)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn AesDecrypt(dataByte, []byte(key))\n}\n```\n","source":"_posts/golang AES算法 CBC加密.md","raw":"---\ntitle: golang AES算法 CBC加密\ndate: 2022-04-18 18:18:51.28\nupdated: 2022-04-18 18:18:51.28\nurl: /archives/golangaes-suan-fa-cbc-jia-mi\ndescription: golang代码实现AES算法 CBC加密\ncategories: \n- golang\ntags: \n- golang\n- aes\n- cbc\n---\n\n```golang\npackage aes\n\nimport (\n\t\"bytes\"\n\t\"crypto/aes\"\n\t\"crypto/cipher\"\n\t\"encoding/base64\"\n\t\"errors\"\n)\n\n//pkcs7Padding 填充\nfunc pkcs7Padding(data []byte, blockSize int) []byte {\n\t//判断缺少几位长度。最少1，最多 blockSize\n\tpadding := blockSize - len(data)%blockSize\n\t//补足位数。把切片[]byte{byte(padding)}复制padding个\n\tpadText := bytes.Repeat([]byte{byte(padding)}, padding)\n\treturn append(data, padText...)\n}\n\n//pkcs7UnPadding 填充的反向操作\nfunc pkcs7UnPadding(data []byte) ([]byte, error) {\n\tlength := len(data)\n\tif length == 0 {\n\t\treturn nil, errors.New(\"加密字符串错误！\")\n\t}\n\t//获取填充的个数\n\tunPadding := int(data[length-1])\n\treturn data[:(length - unPadding)], nil\n}\n\n//AesEncrypt 加密\nfunc AesEncrypt(data []byte, key []byte) ([]byte, error) {\n\t//创建加密实例\n\tblock, err := aes.NewCipher(key)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\t//判断加密快的大小\n\tblockSize := block.BlockSize()\n\t//填充\n\tencryptBytes := pkcs7Padding(data, blockSize)\n\t//初始化加密数据接收切片\n\tcrypted := make([]byte, len(encryptBytes))\n\t//使用cbc加密模式\n\tblockMode := cipher.NewCBCEncrypter(block, key[:blockSize])\n\t//执行加密\n\tblockMode.CryptBlocks(crypted, encryptBytes)\n\treturn crypted, nil\n}\n\n//AesDecrypt 解密\nfunc AesDecrypt(data []byte, key []byte) ([]byte, error) {\n\t//创建实例\n\tblock, err := aes.NewCipher(key)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\t//获取块的大小\n\tblockSize := block.BlockSize()\n\t//使用cbc\n\tblockMode := cipher.NewCBCDecrypter(block, key[:blockSize])\n\t//初始化解密数据接收切片\n\tcrypted := make([]byte, len(data))\n\t//执行解密\n\tblockMode.CryptBlocks(crypted, data)\n\t//去除填充\n\tcrypted, err = pkcs7UnPadding(crypted)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn crypted, nil\n}\n\n//EncryptByAes Aes加密 后 base64 再加\nfunc EncryptByAes(data, key []byte) (string, error) {\n\tres, err := AesEncrypt(data, key)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\treturn base64.StdEncoding.EncodeToString(res), nil\n}\n\n//DecryptByAes Aes 解密\nfunc DecryptByAes(data, key string) ([]byte, error) {\n\tdataByte, err := base64.StdEncoding.DecodeString(data)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn AesDecrypt(dataByte, []byte(key))\n}\n```\n","slug":"golang AES算法 CBC加密","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clgxpu7xv001bvouv9x6p56lk","content":"<pre class=\"line-numbers language-golang\" data-language=\"golang\"><code class=\"language-golang\">package aes\n\nimport (\n\t&quot;bytes&quot;\n\t&quot;crypto&#x2F;aes&quot;\n\t&quot;crypto&#x2F;cipher&quot;\n\t&quot;encoding&#x2F;base64&quot;\n\t&quot;errors&quot;\n)\n\n&#x2F;&#x2F;pkcs7Padding 填充\nfunc pkcs7Padding(data []byte, blockSize int) []byte &#123;\n\t&#x2F;&#x2F;判断缺少几位长度。最少1，最多 blockSize\n\tpadding :&#x3D; blockSize - len(data)%blockSize\n\t&#x2F;&#x2F;补足位数。把切片[]byte&#123;byte(padding)&#125;复制padding个\n\tpadText :&#x3D; bytes.Repeat([]byte&#123;byte(padding)&#125;, padding)\n\treturn append(data, padText...)\n&#125;\n\n&#x2F;&#x2F;pkcs7UnPadding 填充的反向操作\nfunc pkcs7UnPadding(data []byte) ([]byte, error) &#123;\n\tlength :&#x3D; len(data)\n\tif length &#x3D;&#x3D; 0 &#123;\n\t\treturn nil, errors.New(&quot;加密字符串错误！&quot;)\n\t&#125;\n\t&#x2F;&#x2F;获取填充的个数\n\tunPadding :&#x3D; int(data[length-1])\n\treturn data[:(length - unPadding)], nil\n&#125;\n\n&#x2F;&#x2F;AesEncrypt 加密\nfunc AesEncrypt(data []byte, key []byte) ([]byte, error) &#123;\n\t&#x2F;&#x2F;创建加密实例\n\tblock, err :&#x3D; aes.NewCipher(key)\n\tif err !&#x3D; nil &#123;\n\t\treturn nil, err\n\t&#125;\n\t&#x2F;&#x2F;判断加密快的大小\n\tblockSize :&#x3D; block.BlockSize()\n\t&#x2F;&#x2F;填充\n\tencryptBytes :&#x3D; pkcs7Padding(data, blockSize)\n\t&#x2F;&#x2F;初始化加密数据接收切片\n\tcrypted :&#x3D; make([]byte, len(encryptBytes))\n\t&#x2F;&#x2F;使用cbc加密模式\n\tblockMode :&#x3D; cipher.NewCBCEncrypter(block, key[:blockSize])\n\t&#x2F;&#x2F;执行加密\n\tblockMode.CryptBlocks(crypted, encryptBytes)\n\treturn crypted, nil\n&#125;\n\n&#x2F;&#x2F;AesDecrypt 解密\nfunc AesDecrypt(data []byte, key []byte) ([]byte, error) &#123;\n\t&#x2F;&#x2F;创建实例\n\tblock, err :&#x3D; aes.NewCipher(key)\n\tif err !&#x3D; nil &#123;\n\t\treturn nil, err\n\t&#125;\n\t&#x2F;&#x2F;获取块的大小\n\tblockSize :&#x3D; block.BlockSize()\n\t&#x2F;&#x2F;使用cbc\n\tblockMode :&#x3D; cipher.NewCBCDecrypter(block, key[:blockSize])\n\t&#x2F;&#x2F;初始化解密数据接收切片\n\tcrypted :&#x3D; make([]byte, len(data))\n\t&#x2F;&#x2F;执行解密\n\tblockMode.CryptBlocks(crypted, data)\n\t&#x2F;&#x2F;去除填充\n\tcrypted, err &#x3D; pkcs7UnPadding(crypted)\n\tif err !&#x3D; nil &#123;\n\t\treturn nil, err\n\t&#125;\n\treturn crypted, nil\n&#125;\n\n&#x2F;&#x2F;EncryptByAes Aes加密 后 base64 再加\nfunc EncryptByAes(data, key []byte) (string, error) &#123;\n\tres, err :&#x3D; AesEncrypt(data, key)\n\tif err !&#x3D; nil &#123;\n\t\treturn &quot;&quot;, err\n\t&#125;\n\treturn base64.StdEncoding.EncodeToString(res), nil\n&#125;\n\n&#x2F;&#x2F;DecryptByAes Aes 解密\nfunc DecryptByAes(data, key string) ([]byte, error) &#123;\n\tdataByte, err :&#x3D; base64.StdEncoding.DecodeString(data)\n\tif err !&#x3D; nil &#123;\n\t\treturn nil, err\n\t&#125;\n\treturn AesDecrypt(dataByte, []byte(key))\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}},"excerpt":"","more":"<pre class=\"line-numbers language-golang\" data-language=\"golang\"><code class=\"language-golang\">package aes\n\nimport (\n\t&quot;bytes&quot;\n\t&quot;crypto&#x2F;aes&quot;\n\t&quot;crypto&#x2F;cipher&quot;\n\t&quot;encoding&#x2F;base64&quot;\n\t&quot;errors&quot;\n)\n\n&#x2F;&#x2F;pkcs7Padding 填充\nfunc pkcs7Padding(data []byte, blockSize int) []byte &#123;\n\t&#x2F;&#x2F;判断缺少几位长度。最少1，最多 blockSize\n\tpadding :&#x3D; blockSize - len(data)%blockSize\n\t&#x2F;&#x2F;补足位数。把切片[]byte&#123;byte(padding)&#125;复制padding个\n\tpadText :&#x3D; bytes.Repeat([]byte&#123;byte(padding)&#125;, padding)\n\treturn append(data, padText...)\n&#125;\n\n&#x2F;&#x2F;pkcs7UnPadding 填充的反向操作\nfunc pkcs7UnPadding(data []byte) ([]byte, error) &#123;\n\tlength :&#x3D; len(data)\n\tif length &#x3D;&#x3D; 0 &#123;\n\t\treturn nil, errors.New(&quot;加密字符串错误！&quot;)\n\t&#125;\n\t&#x2F;&#x2F;获取填充的个数\n\tunPadding :&#x3D; int(data[length-1])\n\treturn data[:(length - unPadding)], nil\n&#125;\n\n&#x2F;&#x2F;AesEncrypt 加密\nfunc AesEncrypt(data []byte, key []byte) ([]byte, error) &#123;\n\t&#x2F;&#x2F;创建加密实例\n\tblock, err :&#x3D; aes.NewCipher(key)\n\tif err !&#x3D; nil &#123;\n\t\treturn nil, err\n\t&#125;\n\t&#x2F;&#x2F;判断加密快的大小\n\tblockSize :&#x3D; block.BlockSize()\n\t&#x2F;&#x2F;填充\n\tencryptBytes :&#x3D; pkcs7Padding(data, blockSize)\n\t&#x2F;&#x2F;初始化加密数据接收切片\n\tcrypted :&#x3D; make([]byte, len(encryptBytes))\n\t&#x2F;&#x2F;使用cbc加密模式\n\tblockMode :&#x3D; cipher.NewCBCEncrypter(block, key[:blockSize])\n\t&#x2F;&#x2F;执行加密\n\tblockMode.CryptBlocks(crypted, encryptBytes)\n\treturn crypted, nil\n&#125;\n\n&#x2F;&#x2F;AesDecrypt 解密\nfunc AesDecrypt(data []byte, key []byte) ([]byte, error) &#123;\n\t&#x2F;&#x2F;创建实例\n\tblock, err :&#x3D; aes.NewCipher(key)\n\tif err !&#x3D; nil &#123;\n\t\treturn nil, err\n\t&#125;\n\t&#x2F;&#x2F;获取块的大小\n\tblockSize :&#x3D; block.BlockSize()\n\t&#x2F;&#x2F;使用cbc\n\tblockMode :&#x3D; cipher.NewCBCDecrypter(block, key[:blockSize])\n\t&#x2F;&#x2F;初始化解密数据接收切片\n\tcrypted :&#x3D; make([]byte, len(data))\n\t&#x2F;&#x2F;执行解密\n\tblockMode.CryptBlocks(crypted, data)\n\t&#x2F;&#x2F;去除填充\n\tcrypted, err &#x3D; pkcs7UnPadding(crypted)\n\tif err !&#x3D; nil &#123;\n\t\treturn nil, err\n\t&#125;\n\treturn crypted, nil\n&#125;\n\n&#x2F;&#x2F;EncryptByAes Aes加密 后 base64 再加\nfunc EncryptByAes(data, key []byte) (string, error) &#123;\n\tres, err :&#x3D; AesEncrypt(data, key)\n\tif err !&#x3D; nil &#123;\n\t\treturn &quot;&quot;, err\n\t&#125;\n\treturn base64.StdEncoding.EncodeToString(res), nil\n&#125;\n\n&#x2F;&#x2F;DecryptByAes Aes 解密\nfunc DecryptByAes(data, key string) ([]byte, error) &#123;\n\tdataByte, err :&#x3D; base64.StdEncoding.DecodeString(data)\n\tif err !&#x3D; nil &#123;\n\t\treturn nil, err\n\t&#125;\n\treturn AesDecrypt(dataByte, []byte(key))\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"golang AES算法 ECB模式加密","date":"2022-04-18T10:18:03.812Z","updated":"2022-04-18T10:18:03.812Z","url":"/archives/golangaes-suan-fa-ecb-mo-shi-jia-mi","description":"golang代码实现AES算法ECB模式加密","_content":"\n```golang\npackage aes\n\nimport (\n\t\"bytes\"\n\t\"crypto/aes\"\n)\n\nfunc EcbDecrypt(data, key []byte) ([]byte, error) {\n\tblock, err := aes.NewCipher(key)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdecrypted := make([]byte, len(data))\n\tsize := block.BlockSize()\n\n\tfor bs, be := 0, size; bs < len(data); bs, be = bs+size, be+size {\n\t\tblock.Decrypt(decrypted[bs:be], data[bs:be])\n\t}\n\n\treturn PKCS5UnPadding(decrypted), nil\n}\n\nfunc EcbEncrypt(data, key []byte) ([]byte, error) {\n\tblock, err := aes.NewCipher(key)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdata = PKCS5Padding(data, block.BlockSize())\n\tdecrypted := make([]byte, len(data))\n\tsize := block.BlockSize()\n\n\tfor bs, be := 0, size; bs < len(data); bs, be = bs+size, be+size {\n\t\tblock.Encrypt(decrypted[bs:be], data[bs:be])\n\t}\n\treturn decrypted, nil\n}\nfunc PKCS5Padding(ciphertext []byte, blockSize int) []byte {\n\tpadding := blockSize - len(ciphertext)%blockSize\n\tpadtext := bytes.Repeat([]byte{byte(padding)}, padding)\n\treturn append(ciphertext, padtext...)\n}\n\nfunc PKCS5UnPadding(origData []byte) []byte {\n\tlength := len(origData)\n\t// 去掉最后一个字节 unpadding 次\n\tunpadding := int(origData[length-1])\n\treturn origData[:(length - unpadding)]\n}\n```\n","source":"_posts/golang AES算法 ECB模式加密.md","raw":"---\ntitle: golang AES算法 ECB模式加密\ndate: 2022-04-18 18:18:03.812\nupdated: 2022-04-18 18:18:03.812\nurl: /archives/golangaes-suan-fa-ecb-mo-shi-jia-mi\ndescription: golang代码实现AES算法ECB模式加密\ncategories: \n- golang\ntags: \n- golang\n- aes\n- ecb\n---\n\n```golang\npackage aes\n\nimport (\n\t\"bytes\"\n\t\"crypto/aes\"\n)\n\nfunc EcbDecrypt(data, key []byte) ([]byte, error) {\n\tblock, err := aes.NewCipher(key)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdecrypted := make([]byte, len(data))\n\tsize := block.BlockSize()\n\n\tfor bs, be := 0, size; bs < len(data); bs, be = bs+size, be+size {\n\t\tblock.Decrypt(decrypted[bs:be], data[bs:be])\n\t}\n\n\treturn PKCS5UnPadding(decrypted), nil\n}\n\nfunc EcbEncrypt(data, key []byte) ([]byte, error) {\n\tblock, err := aes.NewCipher(key)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdata = PKCS5Padding(data, block.BlockSize())\n\tdecrypted := make([]byte, len(data))\n\tsize := block.BlockSize()\n\n\tfor bs, be := 0, size; bs < len(data); bs, be = bs+size, be+size {\n\t\tblock.Encrypt(decrypted[bs:be], data[bs:be])\n\t}\n\treturn decrypted, nil\n}\nfunc PKCS5Padding(ciphertext []byte, blockSize int) []byte {\n\tpadding := blockSize - len(ciphertext)%blockSize\n\tpadtext := bytes.Repeat([]byte{byte(padding)}, padding)\n\treturn append(ciphertext, padtext...)\n}\n\nfunc PKCS5UnPadding(origData []byte) []byte {\n\tlength := len(origData)\n\t// 去掉最后一个字节 unpadding 次\n\tunpadding := int(origData[length-1])\n\treturn origData[:(length - unpadding)]\n}\n```\n","slug":"golang AES算法 ECB模式加密","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clgxpu7xx001gvouv431u2k63","content":"<pre class=\"line-numbers language-golang\" data-language=\"golang\"><code class=\"language-golang\">package aes\n\nimport (\n\t&quot;bytes&quot;\n\t&quot;crypto&#x2F;aes&quot;\n)\n\nfunc EcbDecrypt(data, key []byte) ([]byte, error) &#123;\n\tblock, err :&#x3D; aes.NewCipher(key)\n\tif err !&#x3D; nil &#123;\n\t\treturn nil, err\n\t&#125;\n\tdecrypted :&#x3D; make([]byte, len(data))\n\tsize :&#x3D; block.BlockSize()\n\n\tfor bs, be :&#x3D; 0, size; bs &lt; len(data); bs, be &#x3D; bs+size, be+size &#123;\n\t\tblock.Decrypt(decrypted[bs:be], data[bs:be])\n\t&#125;\n\n\treturn PKCS5UnPadding(decrypted), nil\n&#125;\n\nfunc EcbEncrypt(data, key []byte) ([]byte, error) &#123;\n\tblock, err :&#x3D; aes.NewCipher(key)\n\tif err !&#x3D; nil &#123;\n\t\treturn nil, err\n\t&#125;\n\tdata &#x3D; PKCS5Padding(data, block.BlockSize())\n\tdecrypted :&#x3D; make([]byte, len(data))\n\tsize :&#x3D; block.BlockSize()\n\n\tfor bs, be :&#x3D; 0, size; bs &lt; len(data); bs, be &#x3D; bs+size, be+size &#123;\n\t\tblock.Encrypt(decrypted[bs:be], data[bs:be])\n\t&#125;\n\treturn decrypted, nil\n&#125;\nfunc PKCS5Padding(ciphertext []byte, blockSize int) []byte &#123;\n\tpadding :&#x3D; blockSize - len(ciphertext)%blockSize\n\tpadtext :&#x3D; bytes.Repeat([]byte&#123;byte(padding)&#125;, padding)\n\treturn append(ciphertext, padtext...)\n&#125;\n\nfunc PKCS5UnPadding(origData []byte) []byte &#123;\n\tlength :&#x3D; len(origData)\n\t&#x2F;&#x2F; 去掉最后一个字节 unpadding 次\n\tunpadding :&#x3D; int(origData[length-1])\n\treturn origData[:(length - unpadding)]\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}},"excerpt":"","more":"<pre class=\"line-numbers language-golang\" data-language=\"golang\"><code class=\"language-golang\">package aes\n\nimport (\n\t&quot;bytes&quot;\n\t&quot;crypto&#x2F;aes&quot;\n)\n\nfunc EcbDecrypt(data, key []byte) ([]byte, error) &#123;\n\tblock, err :&#x3D; aes.NewCipher(key)\n\tif err !&#x3D; nil &#123;\n\t\treturn nil, err\n\t&#125;\n\tdecrypted :&#x3D; make([]byte, len(data))\n\tsize :&#x3D; block.BlockSize()\n\n\tfor bs, be :&#x3D; 0, size; bs &lt; len(data); bs, be &#x3D; bs+size, be+size &#123;\n\t\tblock.Decrypt(decrypted[bs:be], data[bs:be])\n\t&#125;\n\n\treturn PKCS5UnPadding(decrypted), nil\n&#125;\n\nfunc EcbEncrypt(data, key []byte) ([]byte, error) &#123;\n\tblock, err :&#x3D; aes.NewCipher(key)\n\tif err !&#x3D; nil &#123;\n\t\treturn nil, err\n\t&#125;\n\tdata &#x3D; PKCS5Padding(data, block.BlockSize())\n\tdecrypted :&#x3D; make([]byte, len(data))\n\tsize :&#x3D; block.BlockSize()\n\n\tfor bs, be :&#x3D; 0, size; bs &lt; len(data); bs, be &#x3D; bs+size, be+size &#123;\n\t\tblock.Encrypt(decrypted[bs:be], data[bs:be])\n\t&#125;\n\treturn decrypted, nil\n&#125;\nfunc PKCS5Padding(ciphertext []byte, blockSize int) []byte &#123;\n\tpadding :&#x3D; blockSize - len(ciphertext)%blockSize\n\tpadtext :&#x3D; bytes.Repeat([]byte&#123;byte(padding)&#125;, padding)\n\treturn append(ciphertext, padtext...)\n&#125;\n\nfunc PKCS5UnPadding(origData []byte) []byte &#123;\n\tlength :&#x3D; len(origData)\n\t&#x2F;&#x2F; 去掉最后一个字节 unpadding 次\n\tunpadding :&#x3D; int(origData[length-1])\n\treturn origData[:(length - unpadding)]\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"git 标签","date":"2022-02-16T07:43:25.337Z","updated":"2022-02-16T07:44:17.602Z","url":"/archives/gitbiao-qian","_content":"\n# git tag\n\n## 打标签\n\n```bash\ngit tag -a v1.2.0 -m \"new version\"\n```\n\n## 显示标签以及备注\n\n```bash\ngit tag -n\n```\n\n## 实现标签以及备注，按照打标签的时间排序\n\n```bash\ngit tag -n --sort=taggerdate\n```\n\n--sort=key\n\n关于key的值可以参考 [https://git-scm.com/docs/git-for-each-ref](https://git-scm.com/docs/git-for-each-ref)\n\n## 同时有时间、tag、备注使用以下命令\n\n```bash\ngit for-each-ref --sort=taggerdate --format '%(refname:short) %(taggerdate:short) %(subject)'\n```\n\n## 对某个版本进行补打标签，commitId 只要填入前7位即可\n\n```bash\ngit tag -a v1.2 423445a\n```\n\n## 删除标签，并不会删除版本，只是删除标签\n\n```bash\ngit tag -d v1.2\n```\n\n## 推送标签\n\n```bash\ngit push origin master --tags\n```","source":"_posts/git tag 标签.md","raw":"---\ntitle: git 标签\ndate: 2022-02-16 15:43:25.337\nupdated: 2022-02-16 15:44:17.602\nurl: /archives/gitbiao-qian\ncategories: \n- git\ntags: \n- git\n- tag\n- 标签\n---\n\n# git tag\n\n## 打标签\n\n```bash\ngit tag -a v1.2.0 -m \"new version\"\n```\n\n## 显示标签以及备注\n\n```bash\ngit tag -n\n```\n\n## 实现标签以及备注，按照打标签的时间排序\n\n```bash\ngit tag -n --sort=taggerdate\n```\n\n--sort=key\n\n关于key的值可以参考 [https://git-scm.com/docs/git-for-each-ref](https://git-scm.com/docs/git-for-each-ref)\n\n## 同时有时间、tag、备注使用以下命令\n\n```bash\ngit for-each-ref --sort=taggerdate --format '%(refname:short) %(taggerdate:short) %(subject)'\n```\n\n## 对某个版本进行补打标签，commitId 只要填入前7位即可\n\n```bash\ngit tag -a v1.2 423445a\n```\n\n## 删除标签，并不会删除版本，只是删除标签\n\n```bash\ngit tag -d v1.2\n```\n\n## 推送标签\n\n```bash\ngit push origin master --tags\n```","slug":"git tag 标签","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clgxpu7xz001ivouvhudbcnfw","content":"<h1 id=\"git-tag\"><a href=\"#git-tag\" class=\"headerlink\" title=\"git tag\"></a>git tag</h1><h2 id=\"打标签\"><a href=\"#打标签\" class=\"headerlink\" title=\"打标签\"></a>打标签</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> tag -a v1.2.0 -m <span class=\"token string\">\"new version\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"显示标签以及备注\"><a href=\"#显示标签以及备注\" class=\"headerlink\" title=\"显示标签以及备注\"></a>显示标签以及备注</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> tag -n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"实现标签以及备注，按照打标签的时间排序\"><a href=\"#实现标签以及备注，按照打标签的时间排序\" class=\"headerlink\" title=\"实现标签以及备注，按照打标签的时间排序\"></a>实现标签以及备注，按照打标签的时间排序</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> tag -n --sort<span class=\"token operator\">=</span>taggerdate<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>–sort&#x3D;key</p>\n<p>关于key的值可以参考 <a href=\"https://git-scm.com/docs/git-for-each-ref\">https://git-scm.com/docs/git-for-each-ref</a></p>\n<h2 id=\"同时有时间、tag、备注使用以下命令\"><a href=\"#同时有时间、tag、备注使用以下命令\" class=\"headerlink\" title=\"同时有时间、tag、备注使用以下命令\"></a>同时有时间、tag、备注使用以下命令</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> for-each-ref --sort<span class=\"token operator\">=</span>taggerdate --format <span class=\"token string\">'%(refname:short) %(taggerdate:short) %(subject)'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"对某个版本进行补打标签，commitId-只要填入前7位即可\"><a href=\"#对某个版本进行补打标签，commitId-只要填入前7位即可\" class=\"headerlink\" title=\"对某个版本进行补打标签，commitId 只要填入前7位即可\"></a>对某个版本进行补打标签，commitId 只要填入前7位即可</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> tag -a v1.2 423445a<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"删除标签，并不会删除版本，只是删除标签\"><a href=\"#删除标签，并不会删除版本，只是删除标签\" class=\"headerlink\" title=\"删除标签，并不会删除版本，只是删除标签\"></a>删除标签，并不会删除版本，只是删除标签</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> tag -d v1.2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"推送标签\"><a href=\"#推送标签\" class=\"headerlink\" title=\"推送标签\"></a>推送标签</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> push origin master --tags<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}},"excerpt":"","more":"<h1 id=\"git-tag\"><a href=\"#git-tag\" class=\"headerlink\" title=\"git tag\"></a>git tag</h1><h2 id=\"打标签\"><a href=\"#打标签\" class=\"headerlink\" title=\"打标签\"></a>打标签</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> tag -a v1.2.0 -m <span class=\"token string\">\"new version\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"显示标签以及备注\"><a href=\"#显示标签以及备注\" class=\"headerlink\" title=\"显示标签以及备注\"></a>显示标签以及备注</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> tag -n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"实现标签以及备注，按照打标签的时间排序\"><a href=\"#实现标签以及备注，按照打标签的时间排序\" class=\"headerlink\" title=\"实现标签以及备注，按照打标签的时间排序\"></a>实现标签以及备注，按照打标签的时间排序</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> tag -n --sort<span class=\"token operator\">=</span>taggerdate<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>–sort&#x3D;key</p>\n<p>关于key的值可以参考 <a href=\"https://git-scm.com/docs/git-for-each-ref\">https://git-scm.com/docs/git-for-each-ref</a></p>\n<h2 id=\"同时有时间、tag、备注使用以下命令\"><a href=\"#同时有时间、tag、备注使用以下命令\" class=\"headerlink\" title=\"同时有时间、tag、备注使用以下命令\"></a>同时有时间、tag、备注使用以下命令</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> for-each-ref --sort<span class=\"token operator\">=</span>taggerdate --format <span class=\"token string\">'%(refname:short) %(taggerdate:short) %(subject)'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"对某个版本进行补打标签，commitId-只要填入前7位即可\"><a href=\"#对某个版本进行补打标签，commitId-只要填入前7位即可\" class=\"headerlink\" title=\"对某个版本进行补打标签，commitId 只要填入前7位即可\"></a>对某个版本进行补打标签，commitId 只要填入前7位即可</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> tag -a v1.2 423445a<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"删除标签，并不会删除版本，只是删除标签\"><a href=\"#删除标签，并不会删除版本，只是删除标签\" class=\"headerlink\" title=\"删除标签，并不会删除版本，只是删除标签\"></a>删除标签，并不会删除版本，只是删除标签</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> tag -d v1.2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"推送标签\"><a href=\"#推送标签\" class=\"headerlink\" title=\"推送标签\"></a>推送标签</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> push origin master --tags<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>"},{"title":"golang 获取系统相关信息","date":"2022-03-01T02:21:26.058Z","updated":"2022-03-01T02:21:26.058Z","url":"/archives/golanghuo-qu-xi-tong-xiang-guan-xin-xi","_content":"\n```go\npackage main\n\nimport (\n    \"os\"\n    \"runtime\"\n)\n\nfunc main() {\n    println(`系统类型：`, runtime.GOOS)\n\n    println(`系统架构：`, runtime.GOARCH)\n\n    println(`CPU 核数：`, runtime.GOMAXPROCS(0))\n\n    name, err := os.Hostname()\n    if err != nil {\n        panic(err)\n    }\n    println(`电脑名称：`, name)\n}\n```","source":"_posts/golang 获取系统相关信息.md","raw":"---\ntitle: golang 获取系统相关信息\ndate: 2022-03-01 10:21:26.058\nupdated: 2022-03-01 10:21:26.058\nurl: /archives/golanghuo-qu-xi-tong-xiang-guan-xin-xi\ncategories: \n- golang\ntags: \n- golang\n---\n\n```go\npackage main\n\nimport (\n    \"os\"\n    \"runtime\"\n)\n\nfunc main() {\n    println(`系统类型：`, runtime.GOOS)\n\n    println(`系统架构：`, runtime.GOARCH)\n\n    println(`CPU 核数：`, runtime.GOMAXPROCS(0))\n\n    name, err := os.Hostname()\n    if err != nil {\n        panic(err)\n    }\n    println(`电脑名称：`, name)\n}\n```","slug":"golang 获取系统相关信息","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clgxpu7y1001mvouv406pdaje","content":"<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"os\"</span>\n    <span class=\"token string\">\"runtime\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">`系统类型：`</span><span class=\"token punctuation\">,</span> runtime<span class=\"token punctuation\">.</span>GOOS<span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">`系统架构：`</span><span class=\"token punctuation\">,</span> runtime<span class=\"token punctuation\">.</span>GOARCH<span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">`CPU 核数：`</span><span class=\"token punctuation\">,</span> runtime<span class=\"token punctuation\">.</span><span class=\"token function\">GOMAXPROCS</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    name<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">Hostname</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">`电脑名称：`</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}},"excerpt":"","more":"<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"os\"</span>\n    <span class=\"token string\">\"runtime\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">`系统类型：`</span><span class=\"token punctuation\">,</span> runtime<span class=\"token punctuation\">.</span>GOOS<span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">`系统架构：`</span><span class=\"token punctuation\">,</span> runtime<span class=\"token punctuation\">.</span>GOARCH<span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">`CPU 核数：`</span><span class=\"token punctuation\">,</span> runtime<span class=\"token punctuation\">.</span><span class=\"token function\">GOMAXPROCS</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    name<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">Hostname</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">`电脑名称：`</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>"},{"title":"golang 使用pprof 进行性能分析","date":"2022-02-16T07:58:29.707Z","updated":"2022-02-16T07:58:29.707Z","url":"/archives/golangshi-yong-pprofjin-xing-xing-neng-fen-xi","_content":"\n# golang 性能分析\n\n## 性能分析web地址\n\nhttp://ip:port/debug/pprof/\n<!--more-->\n## go tool 命令\n\ntop 排序\n\nlist 列出调用栈\n\n## 内存分析\n\n- -insue_space 生成当前程序内存占用图\n- --alloc_space 生成历史内存占用图\n\n### 命令行生成svg图片分析\n\n- go tool pprof -inuse_space -cum -svg http://ip:port/debug/pprof/heap > heap_inuse1.svg\n\n## cpu占用分析\n\n### 命令行分析\n\n- go tool pprof im_gate cpu.prof # im_gate 是程序名字\n\n### 生成图片分析\n\n- go tool pprof -png http://127.0.0.1:8888/debug/pprof/profile > cpu.png\n","source":"_posts/golang使用pprof进行性能分析.md","raw":"---\ntitle: golang 使用pprof 进行性能分析\ndate: 2022-02-16 15:58:29.707\nupdated: 2022-02-16 15:58:29.707\nurl: /archives/golangshi-yong-pprofjin-xing-xing-neng-fen-xi\ncategories: \n- golang\ntags: \n- pprof\n- golang\n---\n\n# golang 性能分析\n\n## 性能分析web地址\n\nhttp://ip:port/debug/pprof/\n<!--more-->\n## go tool 命令\n\ntop 排序\n\nlist 列出调用栈\n\n## 内存分析\n\n- -insue_space 生成当前程序内存占用图\n- --alloc_space 生成历史内存占用图\n\n### 命令行生成svg图片分析\n\n- go tool pprof -inuse_space -cum -svg http://ip:port/debug/pprof/heap > heap_inuse1.svg\n\n## cpu占用分析\n\n### 命令行分析\n\n- go tool pprof im_gate cpu.prof # im_gate 是程序名字\n\n### 生成图片分析\n\n- go tool pprof -png http://127.0.0.1:8888/debug/pprof/profile > cpu.png\n","slug":"golang使用pprof进行性能分析","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clgxpu7y2001pvouvevo91rvc","content":"<h1 id=\"golang-性能分析\"><a href=\"#golang-性能分析\" class=\"headerlink\" title=\"golang 性能分析\"></a>golang 性能分析</h1><h2 id=\"性能分析web地址\"><a href=\"#性能分析web地址\" class=\"headerlink\" title=\"性能分析web地址\"></a>性能分析web地址</h2><p><a href=\"http://ip:port/debug/pprof/\">http://ip:port/debug/pprof/</a></p>\n<span id=\"more\"></span>\n<h2 id=\"go-tool-命令\"><a href=\"#go-tool-命令\" class=\"headerlink\" title=\"go tool 命令\"></a>go tool 命令</h2><p>top 排序</p>\n<p>list 列出调用栈</p>\n<h2 id=\"内存分析\"><a href=\"#内存分析\" class=\"headerlink\" title=\"内存分析\"></a>内存分析</h2><ul>\n<li>-insue_space 生成当前程序内存占用图</li>\n<li>–alloc_space 生成历史内存占用图</li>\n</ul>\n<h3 id=\"命令行生成svg图片分析\"><a href=\"#命令行生成svg图片分析\" class=\"headerlink\" title=\"命令行生成svg图片分析\"></a>命令行生成svg图片分析</h3><ul>\n<li>go tool pprof -inuse_space -cum -svg <a href=\"http://ip:port/debug/pprof/heap\">http://ip:port/debug/pprof/heap</a> &gt; heap_inuse1.svg</li>\n</ul>\n<h2 id=\"cpu占用分析\"><a href=\"#cpu占用分析\" class=\"headerlink\" title=\"cpu占用分析\"></a>cpu占用分析</h2><h3 id=\"命令行分析\"><a href=\"#命令行分析\" class=\"headerlink\" title=\"命令行分析\"></a>命令行分析</h3><ul>\n<li>go tool pprof im_gate cpu.prof # im_gate 是程序名字</li>\n</ul>\n<h3 id=\"生成图片分析\"><a href=\"#生成图片分析\" class=\"headerlink\" title=\"生成图片分析\"></a>生成图片分析</h3><ul>\n<li>go tool pprof -png <a href=\"http://127.0.0.1:8888/debug/pprof/profile\">http://127.0.0.1:8888/debug/pprof/profile</a> &gt; cpu.png</li>\n</ul>\n","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}},"excerpt":"<h1 id=\"golang-性能分析\"><a href=\"#golang-性能分析\" class=\"headerlink\" title=\"golang 性能分析\"></a>golang 性能分析</h1><h2 id=\"性能分析web地址\"><a href=\"#性能分析web地址\" class=\"headerlink\" title=\"性能分析web地址\"></a>性能分析web地址</h2><p><a href=\"http://ip:port/debug/pprof/\">http://ip:port/debug/pprof/</a></p>","more":"<h2 id=\"go-tool-命令\"><a href=\"#go-tool-命令\" class=\"headerlink\" title=\"go tool 命令\"></a>go tool 命令</h2><p>top 排序</p>\n<p>list 列出调用栈</p>\n<h2 id=\"内存分析\"><a href=\"#内存分析\" class=\"headerlink\" title=\"内存分析\"></a>内存分析</h2><ul>\n<li>-insue_space 生成当前程序内存占用图</li>\n<li>–alloc_space 生成历史内存占用图</li>\n</ul>\n<h3 id=\"命令行生成svg图片分析\"><a href=\"#命令行生成svg图片分析\" class=\"headerlink\" title=\"命令行生成svg图片分析\"></a>命令行生成svg图片分析</h3><ul>\n<li>go tool pprof -inuse_space -cum -svg <a href=\"http://ip:port/debug/pprof/heap\">http://ip:port/debug/pprof/heap</a> &gt; heap_inuse1.svg</li>\n</ul>\n<h2 id=\"cpu占用分析\"><a href=\"#cpu占用分析\" class=\"headerlink\" title=\"cpu占用分析\"></a>cpu占用分析</h2><h3 id=\"命令行分析\"><a href=\"#命令行分析\" class=\"headerlink\" title=\"命令行分析\"></a>命令行分析</h3><ul>\n<li>go tool pprof im_gate cpu.prof # im_gate 是程序名字</li>\n</ul>\n<h3 id=\"生成图片分析\"><a href=\"#生成图片分析\" class=\"headerlink\" title=\"生成图片分析\"></a>生成图片分析</h3><ul>\n<li>go tool pprof -png <a href=\"http://127.0.0.1:8888/debug/pprof/profile\">http://127.0.0.1:8888/debug/pprof/profile</a> &gt; cpu.png</li>\n</ul>"},{"title":"golang 字符串、json、map之间转换","date":"2022-02-16T07:59:20.154Z","updated":"2022-02-16T08:08:13.914Z","url":"/archives/golangzi-fu-chuan-jsonmap-zhi-jian-zhuan-huan","_content":"\n# golang 字符串、json、map之间的转换\n<!--more-->\n```go\nimport (\n\"encoding/json\"\n\"fmt\"\n\"os\"\n)\n\ntype ConfigStruct struct {\n   Host              string   `json:\"host\"`\n   Port              int      `json:\"port\"`\n   AnalyticsFile     string   `json:\"analytics_file\"`\n   StaticFileVersion int      `json:\"static_file_version\"`\n   StaticDir         string   `json:\"static_dir\"`\n   TemplatesDir      string   `json:\"templates_dir\"`\n   SerTcpSocketHost  string   `json:\"serTcpSocketHost\"`\n   SerTcpSocketPort  int      `json:\"serTcpSocketPort\"`\n   Fruits            []string `json:\"fruits\"`\n}\n\ntype Other struct {\n   SerTcpSocketHost string   `json:\"serTcpSocketHost\"`\n   SerTcpSocketPort int      `json:\"serTcpSocketPort\"`\n   Fruits           []string `json:\"fruits\"`\n}\n\nfunc main() {\n   jsonStr := `{\"host\": \"http://localhost:9090\",\"port\": 9090,\"analytics_file\": \"\",\"static_file_version\": 1,\"static_dir\": \"E:/Project/goTest/src/\",\"templates_dir\": \"E:/Project/goTest/src/templates/\",\"serTcpSocketHost\": \":12340\",\"serTcpSocketPort\": 12340,\"fruits\": [\"apple\", \"peach\"]}`\n\n   //json str 转map\n   var dat map[string]interface{}\n   if err := json.Unmarshal([]byte(jsonStr), &dat); err == nil {\n      fmt.Println(\"==============json str 转map=======================\")\n      fmt.Println(dat)\n      fmt.Println(dat[\"host\"])\n   }\n\n   //json str 转struct\n   var config ConfigStruct\n   if err := json.Unmarshal([]byte(jsonStr), &config); err == nil {\n      fmt.Println(\"================json str 转struct==\")\n      fmt.Println(config)\n      fmt.Println(config.Host)\n   }\n\n   //json str 转struct(部份字段)\n   var part Other\n   if err := json.Unmarshal([]byte(jsonStr), &part); err == nil {\n      fmt.Println(\"================json str 转struct==\")\n      fmt.Println(part)\n      fmt.Println(part.SerTcpSocketPort)\n   }\n\n   //struct 到json str\n   if b, err := json.Marshal(config); err == nil {\n      fmt.Println(\"================struct 到json str==\")\n      fmt.Println(string(b))\n   }\n\n   //map 到json str\n   fmt.Println(\"================map 到json str=====================\")\n   enc := json.NewEncoder(os.Stdout)\n   enc.Encode(dat)\n\n   //array 到 json str\n   arr := []string{\"hello\", \"apple\", \"python\", \"golang\", \"base\", \"peach\", \"pear\"}\n   lang, err := json.Marshal(arr)\n   if err == nil {\n      fmt.Println(\"================array 到 json str==\")\n      fmt.Println(string(lang))\n   }\n\n   //json 到 []string\n   var wo []string\n   if err := json.Unmarshal(lang, &wo); err == nil {\n      fmt.Println(\"================json 到 []string==\")\n      fmt.Println(wo)\n   }\n}\n```\n","source":"_posts/golang字符串、json、map之间转换.md","raw":"---\ntitle: golang 字符串、json、map之间转换\ndate: 2022-02-16 15:59:20.154\nupdated: 2022-02-16 16:08:13.914\nurl: /archives/golangzi-fu-chuan-jsonmap-zhi-jian-zhuan-huan\ncategories: \n- golang\ntags: \n- 字符串\n- json\n- map\n---\n\n# golang 字符串、json、map之间的转换\n<!--more-->\n```go\nimport (\n\"encoding/json\"\n\"fmt\"\n\"os\"\n)\n\ntype ConfigStruct struct {\n   Host              string   `json:\"host\"`\n   Port              int      `json:\"port\"`\n   AnalyticsFile     string   `json:\"analytics_file\"`\n   StaticFileVersion int      `json:\"static_file_version\"`\n   StaticDir         string   `json:\"static_dir\"`\n   TemplatesDir      string   `json:\"templates_dir\"`\n   SerTcpSocketHost  string   `json:\"serTcpSocketHost\"`\n   SerTcpSocketPort  int      `json:\"serTcpSocketPort\"`\n   Fruits            []string `json:\"fruits\"`\n}\n\ntype Other struct {\n   SerTcpSocketHost string   `json:\"serTcpSocketHost\"`\n   SerTcpSocketPort int      `json:\"serTcpSocketPort\"`\n   Fruits           []string `json:\"fruits\"`\n}\n\nfunc main() {\n   jsonStr := `{\"host\": \"http://localhost:9090\",\"port\": 9090,\"analytics_file\": \"\",\"static_file_version\": 1,\"static_dir\": \"E:/Project/goTest/src/\",\"templates_dir\": \"E:/Project/goTest/src/templates/\",\"serTcpSocketHost\": \":12340\",\"serTcpSocketPort\": 12340,\"fruits\": [\"apple\", \"peach\"]}`\n\n   //json str 转map\n   var dat map[string]interface{}\n   if err := json.Unmarshal([]byte(jsonStr), &dat); err == nil {\n      fmt.Println(\"==============json str 转map=======================\")\n      fmt.Println(dat)\n      fmt.Println(dat[\"host\"])\n   }\n\n   //json str 转struct\n   var config ConfigStruct\n   if err := json.Unmarshal([]byte(jsonStr), &config); err == nil {\n      fmt.Println(\"================json str 转struct==\")\n      fmt.Println(config)\n      fmt.Println(config.Host)\n   }\n\n   //json str 转struct(部份字段)\n   var part Other\n   if err := json.Unmarshal([]byte(jsonStr), &part); err == nil {\n      fmt.Println(\"================json str 转struct==\")\n      fmt.Println(part)\n      fmt.Println(part.SerTcpSocketPort)\n   }\n\n   //struct 到json str\n   if b, err := json.Marshal(config); err == nil {\n      fmt.Println(\"================struct 到json str==\")\n      fmt.Println(string(b))\n   }\n\n   //map 到json str\n   fmt.Println(\"================map 到json str=====================\")\n   enc := json.NewEncoder(os.Stdout)\n   enc.Encode(dat)\n\n   //array 到 json str\n   arr := []string{\"hello\", \"apple\", \"python\", \"golang\", \"base\", \"peach\", \"pear\"}\n   lang, err := json.Marshal(arr)\n   if err == nil {\n      fmt.Println(\"================array 到 json str==\")\n      fmt.Println(string(lang))\n   }\n\n   //json 到 []string\n   var wo []string\n   if err := json.Unmarshal(lang, &wo); err == nil {\n      fmt.Println(\"================json 到 []string==\")\n      fmt.Println(wo)\n   }\n}\n```\n","slug":"golang字符串、json、map之间转换","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clgxpu7y3001tvouv9lupb238","content":"<h1 id=\"golang-字符串、json、map之间的转换\"><a href=\"#golang-字符串、json、map之间的转换\" class=\"headerlink\" title=\"golang 字符串、json、map之间的转换\"></a>golang 字符串、json、map之间的转换</h1><span id=\"more\"></span>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n<span class=\"token string\">\"encoding/json\"</span>\n<span class=\"token string\">\"fmt\"</span>\n<span class=\"token string\">\"os\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">type</span> ConfigStruct <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n   Host              <span class=\"token builtin\">string</span>   <span class=\"token string\">`json:\"host\"`</span>\n   Port              <span class=\"token builtin\">int</span>      <span class=\"token string\">`json:\"port\"`</span>\n   AnalyticsFile     <span class=\"token builtin\">string</span>   <span class=\"token string\">`json:\"analytics_file\"`</span>\n   StaticFileVersion <span class=\"token builtin\">int</span>      <span class=\"token string\">`json:\"static_file_version\"`</span>\n   StaticDir         <span class=\"token builtin\">string</span>   <span class=\"token string\">`json:\"static_dir\"`</span>\n   TemplatesDir      <span class=\"token builtin\">string</span>   <span class=\"token string\">`json:\"templates_dir\"`</span>\n   SerTcpSocketHost  <span class=\"token builtin\">string</span>   <span class=\"token string\">`json:\"serTcpSocketHost\"`</span>\n   SerTcpSocketPort  <span class=\"token builtin\">int</span>      <span class=\"token string\">`json:\"serTcpSocketPort\"`</span>\n   Fruits            <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span> <span class=\"token string\">`json:\"fruits\"`</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">type</span> Other <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n   SerTcpSocketHost <span class=\"token builtin\">string</span>   <span class=\"token string\">`json:\"serTcpSocketHost\"`</span>\n   SerTcpSocketPort <span class=\"token builtin\">int</span>      <span class=\"token string\">`json:\"serTcpSocketPort\"`</span>\n   Fruits           <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span> <span class=\"token string\">`json:\"fruits\"`</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   jsonStr <span class=\"token operator\">:=</span> <span class=\"token string\">`&#123;\"host\": \"http://localhost:9090\",\"port\": 9090,\"analytics_file\": \"\",\"static_file_version\": 1,\"static_dir\": \"E:/Project/goTest/src/\",\"templates_dir\": \"E:/Project/goTest/src/templates/\",\"serTcpSocketHost\": \":12340\",\"serTcpSocketPort\": 12340,\"fruits\": [\"apple\", \"peach\"]&#125;`</span>\n\n   <span class=\"token comment\">//json str 转map</span>\n   <span class=\"token keyword\">var</span> dat <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n   <span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">Unmarshal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span>jsonStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>dat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n      fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"==============json str 转map=======================\"</span><span class=\"token punctuation\">)</span>\n      fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>dat<span class=\"token punctuation\">)</span>\n      fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>dat<span class=\"token punctuation\">[</span><span class=\"token string\">\"host\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n\n   <span class=\"token comment\">//json str 转struct</span>\n   <span class=\"token keyword\">var</span> config ConfigStruct\n   <span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">Unmarshal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span>jsonStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n      fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"================json str 转struct==\"</span><span class=\"token punctuation\">)</span>\n      fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span>\n      fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>Host<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n\n   <span class=\"token comment\">//json str 转struct(部份字段)</span>\n   <span class=\"token keyword\">var</span> part Other\n   <span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">Unmarshal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span>jsonStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>part<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n      fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"================json str 转struct==\"</span><span class=\"token punctuation\">)</span>\n      fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>part<span class=\"token punctuation\">)</span>\n      fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>part<span class=\"token punctuation\">.</span>SerTcpSocketPort<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n\n   <span class=\"token comment\">//struct 到json str</span>\n   <span class=\"token keyword\">if</span> b<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">Marshal</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n      fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"================struct 到json str==\"</span><span class=\"token punctuation\">)</span>\n      fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n\n   <span class=\"token comment\">//map 到json str</span>\n   fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"================map 到json str=====================\"</span><span class=\"token punctuation\">)</span>\n   enc <span class=\"token operator\">:=</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">NewEncoder</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>Stdout<span class=\"token punctuation\">)</span>\n   enc<span class=\"token punctuation\">.</span><span class=\"token function\">Encode</span><span class=\"token punctuation\">(</span>dat<span class=\"token punctuation\">)</span>\n\n   <span class=\"token comment\">//array 到 json str</span>\n   arr <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"python\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"golang\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"base\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"peach\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pear\"</span><span class=\"token punctuation\">&#125;</span>\n   lang<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">Marshal</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">if</span> err <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n      fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"================array 到 json str==\"</span><span class=\"token punctuation\">)</span>\n      fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span>lang<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n\n   <span class=\"token comment\">//json 到 []string</span>\n   <span class=\"token keyword\">var</span> wo <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span>\n   <span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">Unmarshal</span><span class=\"token punctuation\">(</span>lang<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>wo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n      fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"================json 到 []string==\"</span><span class=\"token punctuation\">)</span>\n      fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>wo<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}},"excerpt":"<h1 id=\"golang-字符串、json、map之间的转换\"><a href=\"#golang-字符串、json、map之间的转换\" class=\"headerlink\" title=\"golang 字符串、json、map之间的转换\"></a>golang 字符串、json、map之间的转换</h1>","more":"<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n<span class=\"token string\">\"encoding/json\"</span>\n<span class=\"token string\">\"fmt\"</span>\n<span class=\"token string\">\"os\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">type</span> ConfigStruct <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n   Host              <span class=\"token builtin\">string</span>   <span class=\"token string\">`json:\"host\"`</span>\n   Port              <span class=\"token builtin\">int</span>      <span class=\"token string\">`json:\"port\"`</span>\n   AnalyticsFile     <span class=\"token builtin\">string</span>   <span class=\"token string\">`json:\"analytics_file\"`</span>\n   StaticFileVersion <span class=\"token builtin\">int</span>      <span class=\"token string\">`json:\"static_file_version\"`</span>\n   StaticDir         <span class=\"token builtin\">string</span>   <span class=\"token string\">`json:\"static_dir\"`</span>\n   TemplatesDir      <span class=\"token builtin\">string</span>   <span class=\"token string\">`json:\"templates_dir\"`</span>\n   SerTcpSocketHost  <span class=\"token builtin\">string</span>   <span class=\"token string\">`json:\"serTcpSocketHost\"`</span>\n   SerTcpSocketPort  <span class=\"token builtin\">int</span>      <span class=\"token string\">`json:\"serTcpSocketPort\"`</span>\n   Fruits            <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span> <span class=\"token string\">`json:\"fruits\"`</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">type</span> Other <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n   SerTcpSocketHost <span class=\"token builtin\">string</span>   <span class=\"token string\">`json:\"serTcpSocketHost\"`</span>\n   SerTcpSocketPort <span class=\"token builtin\">int</span>      <span class=\"token string\">`json:\"serTcpSocketPort\"`</span>\n   Fruits           <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span> <span class=\"token string\">`json:\"fruits\"`</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   jsonStr <span class=\"token operator\">:=</span> <span class=\"token string\">`&#123;\"host\": \"http://localhost:9090\",\"port\": 9090,\"analytics_file\": \"\",\"static_file_version\": 1,\"static_dir\": \"E:/Project/goTest/src/\",\"templates_dir\": \"E:/Project/goTest/src/templates/\",\"serTcpSocketHost\": \":12340\",\"serTcpSocketPort\": 12340,\"fruits\": [\"apple\", \"peach\"]&#125;`</span>\n\n   <span class=\"token comment\">//json str 转map</span>\n   <span class=\"token keyword\">var</span> dat <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n   <span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">Unmarshal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span>jsonStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>dat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n      fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"==============json str 转map=======================\"</span><span class=\"token punctuation\">)</span>\n      fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>dat<span class=\"token punctuation\">)</span>\n      fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>dat<span class=\"token punctuation\">[</span><span class=\"token string\">\"host\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n\n   <span class=\"token comment\">//json str 转struct</span>\n   <span class=\"token keyword\">var</span> config ConfigStruct\n   <span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">Unmarshal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span>jsonStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n      fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"================json str 转struct==\"</span><span class=\"token punctuation\">)</span>\n      fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span>\n      fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>Host<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n\n   <span class=\"token comment\">//json str 转struct(部份字段)</span>\n   <span class=\"token keyword\">var</span> part Other\n   <span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">Unmarshal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span>jsonStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>part<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n      fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"================json str 转struct==\"</span><span class=\"token punctuation\">)</span>\n      fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>part<span class=\"token punctuation\">)</span>\n      fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>part<span class=\"token punctuation\">.</span>SerTcpSocketPort<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n\n   <span class=\"token comment\">//struct 到json str</span>\n   <span class=\"token keyword\">if</span> b<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">Marshal</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n      fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"================struct 到json str==\"</span><span class=\"token punctuation\">)</span>\n      fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n\n   <span class=\"token comment\">//map 到json str</span>\n   fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"================map 到json str=====================\"</span><span class=\"token punctuation\">)</span>\n   enc <span class=\"token operator\">:=</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">NewEncoder</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>Stdout<span class=\"token punctuation\">)</span>\n   enc<span class=\"token punctuation\">.</span><span class=\"token function\">Encode</span><span class=\"token punctuation\">(</span>dat<span class=\"token punctuation\">)</span>\n\n   <span class=\"token comment\">//array 到 json str</span>\n   arr <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"python\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"golang\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"base\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"peach\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pear\"</span><span class=\"token punctuation\">&#125;</span>\n   lang<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">Marshal</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">if</span> err <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n      fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"================array 到 json str==\"</span><span class=\"token punctuation\">)</span>\n      fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span>lang<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n\n   <span class=\"token comment\">//json 到 []string</span>\n   <span class=\"token keyword\">var</span> wo <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span>\n   <span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">Unmarshal</span><span class=\"token punctuation\">(</span>lang<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>wo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n      fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"================json 到 []string==\"</span><span class=\"token punctuation\">)</span>\n      fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>wo<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>"},{"title":"golang cmd命令执行","date":"2022-03-01T02:12:39.003Z","updated":"2022-03-01T02:12:39.003Z","url":"/archives/golangcmd-ming-ling-zhi-xing","description":"golang执行cmd命令.demo","_content":"\n\n1.golang cmd命令执行\n（１．）执行命令并获取执行结果\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"os/exec\"\n)\n\nfunc main() {\n\t// 通过exec.Command函数执行命令或者shell\n\t// 第一个参数是命令路径，当然如果PATH路径可以搜索到命令，可以不用输入完整的路径\n\t// 第二到第N个参数是命令的参数\n\t// 下面语句等价于执行命令: ls -l /var/\n\tcmd := exec.Command(\"/bin/ls\", \"-l\", \"/var/\")\n\t// 执行命令，并返回结果\n\toutput,err := cmd.Output()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\t// 因为结果是字节数组，需要转换成string\n\tfmt.Println(string(output))\n\n}\n```\n（２．）执行命令不返回结果\n```go\npackage main\n\nimport (\n\t\"os/exec\"\n)\n\nfunc main() {\n\tcmd := exec.Command(\"/bin/ls\", \"-l\", \"/var/\")\n\t// 执行命令，返回命令是否执行成功\n\terr := cmd.Run()\n\t\n\tif err != nil {\n\t\t// 命令执行失败\n\t\tpanic(err)\n\t}\n}\n```\n","source":"_posts/golang执行cmd命令.md","raw":"---\ntitle: golang cmd命令执行\ndate: 2022-03-01 10:12:39.003\nupdated: 2022-03-01 10:12:39.003\nurl: /archives/golangcmd-ming-ling-zhi-xing\ndescription: golang执行cmd命令.demo\ncategories: \n- golang\ntags: \n- golang\n- cmd\n---\n\n\n1.golang cmd命令执行\n（１．）执行命令并获取执行结果\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"os/exec\"\n)\n\nfunc main() {\n\t// 通过exec.Command函数执行命令或者shell\n\t// 第一个参数是命令路径，当然如果PATH路径可以搜索到命令，可以不用输入完整的路径\n\t// 第二到第N个参数是命令的参数\n\t// 下面语句等价于执行命令: ls -l /var/\n\tcmd := exec.Command(\"/bin/ls\", \"-l\", \"/var/\")\n\t// 执行命令，并返回结果\n\toutput,err := cmd.Output()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\t// 因为结果是字节数组，需要转换成string\n\tfmt.Println(string(output))\n\n}\n```\n（２．）执行命令不返回结果\n```go\npackage main\n\nimport (\n\t\"os/exec\"\n)\n\nfunc main() {\n\tcmd := exec.Command(\"/bin/ls\", \"-l\", \"/var/\")\n\t// 执行命令，返回命令是否执行成功\n\terr := cmd.Run()\n\t\n\tif err != nil {\n\t\t// 命令执行失败\n\t\tpanic(err)\n\t}\n}\n```\n","slug":"golang执行cmd命令","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clgxpu7y5001xvouvhre20uvs","content":"<p>1.golang cmd命令执行<br>（１．）执行命令并获取执行结果</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"os/exec\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// 通过exec.Command函数执行命令或者shell</span>\n\t<span class=\"token comment\">// 第一个参数是命令路径，当然如果PATH路径可以搜索到命令，可以不用输入完整的路径</span>\n\t<span class=\"token comment\">// 第二到第N个参数是命令的参数</span>\n\t<span class=\"token comment\">// 下面语句等价于执行命令: ls -l /var/</span>\n\tcmd <span class=\"token operator\">:=</span> exec<span class=\"token punctuation\">.</span><span class=\"token function\">Command</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/bin/ls\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-l\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/var/\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// 执行命令，并返回结果</span>\n\toutput<span class=\"token punctuation\">,</span>err <span class=\"token operator\">:=</span> cmd<span class=\"token punctuation\">.</span><span class=\"token function\">Output</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// 因为结果是字节数组，需要转换成string</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>（２．）执行命令不返回结果</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"os/exec\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tcmd <span class=\"token operator\">:=</span> exec<span class=\"token punctuation\">.</span><span class=\"token function\">Command</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/bin/ls\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-l\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/var/\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// 执行命令，返回命令是否执行成功</span>\n\terr <span class=\"token operator\">:=</span> cmd<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// 命令执行失败</span>\n\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}},"excerpt":"","more":"<p>1.golang cmd命令执行<br>（１．）执行命令并获取执行结果</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"os/exec\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// 通过exec.Command函数执行命令或者shell</span>\n\t<span class=\"token comment\">// 第一个参数是命令路径，当然如果PATH路径可以搜索到命令，可以不用输入完整的路径</span>\n\t<span class=\"token comment\">// 第二到第N个参数是命令的参数</span>\n\t<span class=\"token comment\">// 下面语句等价于执行命令: ls -l /var/</span>\n\tcmd <span class=\"token operator\">:=</span> exec<span class=\"token punctuation\">.</span><span class=\"token function\">Command</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/bin/ls\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-l\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/var/\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// 执行命令，并返回结果</span>\n\toutput<span class=\"token punctuation\">,</span>err <span class=\"token operator\">:=</span> cmd<span class=\"token punctuation\">.</span><span class=\"token function\">Output</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// 因为结果是字节数组，需要转换成string</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>（２．）执行命令不返回结果</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"os/exec\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tcmd <span class=\"token operator\">:=</span> exec<span class=\"token punctuation\">.</span><span class=\"token function\">Command</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/bin/ls\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-l\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/var/\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// 执行命令，返回命令是否执行成功</span>\n\terr <span class=\"token operator\">:=</span> cmd<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// 命令执行失败</span>\n\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"golang 操作redis","date":"2022-02-21T04:29:11.229Z","updated":"2022-02-21T04:54:07.966Z","url":"/archives/golangcao-zuo-redis","_content":"golang操作redis库\n<!--more-->\n```go\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/go-redis/redis/v8\"\n\t\"log\"\n)\n\nvar rdb *redis.Client\n\nfunc main() {\n\tOpenDB()\n\tSetKeyValue(\"key\", \"value\")\n\tv1, err := GetValueByValue(\"key\")\n\tif err != nil {\n\t\tlog.Fatal(err.Error())\n\t}\n\tfmt.Println(\"v1:\", v1)\n\n\tv2, err := GetValueByValue(\"key\")\n\tif err != nil {\n\t\tlog.Fatal(err.Error())\n\t}\n\tfmt.Println(\"v2:\", v2)\n}\nfunc OpenDB() {\n\trdb = redis.NewClient(&redis.Options{\n\t\tAddr:     \"localhost:6379\",\n\t\tPassword: \"\", // no password set\n\t\tDB:       0,  // use default DB\n\t})\n\n}\nfunc SetKeyValue(key, value string) {\n\terr := rdb.Set(context.Background(), key, value, 0).Err()\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\nfunc GetValueByValue(key string) (string, error) {\n\tv, err := rdb.Get(context.Background(), key).Result()\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t\treturn \"\", err\n\t}\n\treturn v, nil\n}\n\n\n```\n","source":"_posts/golang操作redis.md","raw":"---\ntitle: golang 操作redis\ndate: 2022-02-21 12:29:11.229\nupdated: 2022-02-21 12:54:07.966\nurl: /archives/golangcao-zuo-redis\ncategories: \n- golang\ntags: \n- golang\n- redis\n---\ngolang操作redis库\n<!--more-->\n```go\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/go-redis/redis/v8\"\n\t\"log\"\n)\n\nvar rdb *redis.Client\n\nfunc main() {\n\tOpenDB()\n\tSetKeyValue(\"key\", \"value\")\n\tv1, err := GetValueByValue(\"key\")\n\tif err != nil {\n\t\tlog.Fatal(err.Error())\n\t}\n\tfmt.Println(\"v1:\", v1)\n\n\tv2, err := GetValueByValue(\"key\")\n\tif err != nil {\n\t\tlog.Fatal(err.Error())\n\t}\n\tfmt.Println(\"v2:\", v2)\n}\nfunc OpenDB() {\n\trdb = redis.NewClient(&redis.Options{\n\t\tAddr:     \"localhost:6379\",\n\t\tPassword: \"\", // no password set\n\t\tDB:       0,  // use default DB\n\t})\n\n}\nfunc SetKeyValue(key, value string) {\n\terr := rdb.Set(context.Background(), key, value, 0).Err()\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\nfunc GetValueByValue(key string) (string, error) {\n\tv, err := rdb.Get(context.Background(), key).Result()\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t\treturn \"\", err\n\t}\n\treturn v, nil\n}\n\n\n```\n","slug":"golang操作redis","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clgxpu7y60020vouv4ddv0d2h","content":"<p>golang操作redis库</p>\n<span id=\"more\"></span>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"context\"</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"github.com/go-redis/redis/v8\"</span>\n\t<span class=\"token string\">\"log\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">var</span> rdb <span class=\"token operator\">*</span>redis<span class=\"token punctuation\">.</span>Client\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">OpenDB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">SetKeyValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"value\"</span><span class=\"token punctuation\">)</span>\n\tv1<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> <span class=\"token function\">GetValueByValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"v1:\"</span><span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">)</span>\n\n\tv2<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> <span class=\"token function\">GetValueByValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"v2:\"</span><span class=\"token punctuation\">,</span> v2<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">OpenDB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\trdb <span class=\"token operator\">=</span> redis<span class=\"token punctuation\">.</span><span class=\"token function\">NewClient</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>redis<span class=\"token punctuation\">.</span>Options<span class=\"token punctuation\">&#123;</span>\n\t\tAddr<span class=\"token punctuation\">:</span>     <span class=\"token string\">\"localhost:6379\"</span><span class=\"token punctuation\">,</span>\n\t\tPassword<span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// no password set</span>\n\t\tDB<span class=\"token punctuation\">:</span>       <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// use default DB</span>\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">SetKeyValue</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\terr <span class=\"token operator\">:=</span> rdb<span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">Background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Err</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">GetValueByValue</span><span class=\"token punctuation\">(</span>key <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tv<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> rdb<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">Background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Result</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> err\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> v<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}},"excerpt":"<p>golang操作redis库</p>","more":"<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"context\"</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"github.com/go-redis/redis/v8\"</span>\n\t<span class=\"token string\">\"log\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">var</span> rdb <span class=\"token operator\">*</span>redis<span class=\"token punctuation\">.</span>Client\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">OpenDB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">SetKeyValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"value\"</span><span class=\"token punctuation\">)</span>\n\tv1<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> <span class=\"token function\">GetValueByValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"v1:\"</span><span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">)</span>\n\n\tv2<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> <span class=\"token function\">GetValueByValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"v2:\"</span><span class=\"token punctuation\">,</span> v2<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">OpenDB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\trdb <span class=\"token operator\">=</span> redis<span class=\"token punctuation\">.</span><span class=\"token function\">NewClient</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>redis<span class=\"token punctuation\">.</span>Options<span class=\"token punctuation\">&#123;</span>\n\t\tAddr<span class=\"token punctuation\">:</span>     <span class=\"token string\">\"localhost:6379\"</span><span class=\"token punctuation\">,</span>\n\t\tPassword<span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// no password set</span>\n\t\tDB<span class=\"token punctuation\">:</span>       <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// use default DB</span>\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">SetKeyValue</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\terr <span class=\"token operator\">:=</span> rdb<span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">Background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Err</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">GetValueByValue</span><span class=\"token punctuation\">(</span>key <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tv<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> rdb<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">Background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Result</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> err\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> v<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>"},{"title":"golang 换行读写","date":"2022-03-02T08:19:40.729Z","updated":"2022-03-02T08:19:40.729Z","url":"/archives/golanghuan-xing-du-xie","description":"golang换行读写示例代码","_content":"\n```go\npackage utils\n\nimport (\n\t\"bufio\"\n\t\"bytes\"\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n\t\"strings\"\n)\nfunc ReadLines(path string) (lines []string, err error) {\n\tvar (\n\t\tfile   *os.File\n\t\tpart   []byte\n\t\tprefix bool\n\t)\n\n\tif file, err = os.Open(path); err != nil {\n\t\treturn\n\t}\n\n\treader := bufio.NewReader(file)\n\tbuffer := bytes.NewBuffer(make([]byte, 1024))\n\n\tfor {\n\t\tif part, prefix, err = reader.ReadLine(); err != nil {\n\t\t\tbreak\n\t\t}\n\t\tbuffer.Write(part)\n\t\tif !prefix {\n\t\t\tlines = append(lines, buffer.String())\n\t\t\tbuffer.Reset()\n\t\t}\n\t}\n\tif err == io.EOF {\n\t\terr = nil\n\t}\n\treturn\n}\n\nfunc WriteLines(lines []string, path string) (err error) {\n\tvar file *os.File\n\n\tif file, err = os.Create(path); err != nil {\n\t\treturn\n\t}\n\n\tdefer file.Close()\n\n\tfor _, elem := range lines {\n\t\t_, err := file.WriteString(strings.TrimSpace(elem) + \"\\n\")\n\t\tif err != nil {\n\t\t\tfmt.Println(err)\n\t\t\tbreak\n\t\t}\n\t}\n\treturn\n}\n```\n","source":"_posts/golang换行读写.md","raw":"---\ntitle: golang 换行读写\ndate: 2022-03-02 16:19:40.729\nupdated: 2022-03-02 16:19:40.729\nurl: /archives/golanghuan-xing-du-xie\ndescription: golang换行读写示例代码\ncategories: \n- golang\ntags: \n- golang\n---\n\n```go\npackage utils\n\nimport (\n\t\"bufio\"\n\t\"bytes\"\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n\t\"strings\"\n)\nfunc ReadLines(path string) (lines []string, err error) {\n\tvar (\n\t\tfile   *os.File\n\t\tpart   []byte\n\t\tprefix bool\n\t)\n\n\tif file, err = os.Open(path); err != nil {\n\t\treturn\n\t}\n\n\treader := bufio.NewReader(file)\n\tbuffer := bytes.NewBuffer(make([]byte, 1024))\n\n\tfor {\n\t\tif part, prefix, err = reader.ReadLine(); err != nil {\n\t\t\tbreak\n\t\t}\n\t\tbuffer.Write(part)\n\t\tif !prefix {\n\t\t\tlines = append(lines, buffer.String())\n\t\t\tbuffer.Reset()\n\t\t}\n\t}\n\tif err == io.EOF {\n\t\terr = nil\n\t}\n\treturn\n}\n\nfunc WriteLines(lines []string, path string) (err error) {\n\tvar file *os.File\n\n\tif file, err = os.Create(path); err != nil {\n\t\treturn\n\t}\n\n\tdefer file.Close()\n\n\tfor _, elem := range lines {\n\t\t_, err := file.WriteString(strings.TrimSpace(elem) + \"\\n\")\n\t\tif err != nil {\n\t\t\tfmt.Println(err)\n\t\t\tbreak\n\t\t}\n\t}\n\treturn\n}\n```\n","slug":"golang换行读写","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clgxpu7y80024vouvf4vpbk9s","content":"<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> utils\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"bufio\"</span>\n\t<span class=\"token string\">\"bytes\"</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"io\"</span>\n\t<span class=\"token string\">\"os\"</span>\n\t<span class=\"token string\">\"strings\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">ReadLines</span><span class=\"token punctuation\">(</span>path <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>lines <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">var</span> <span class=\"token punctuation\">(</span>\n\t\tfile   <span class=\"token operator\">*</span>os<span class=\"token punctuation\">.</span>File\n\t\tpart   <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span>\n\t\tprefix <span class=\"token builtin\">bool</span>\n\t<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">if</span> file<span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">Open</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\treader <span class=\"token operator\">:=</span> bufio<span class=\"token punctuation\">.</span><span class=\"token function\">NewReader</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span>\n\tbuffer <span class=\"token operator\">:=</span> bytes<span class=\"token punctuation\">.</span><span class=\"token function\">NewBuffer</span><span class=\"token punctuation\">(</span><span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span> part<span class=\"token punctuation\">,</span> prefix<span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> reader<span class=\"token punctuation\">.</span><span class=\"token function\">ReadLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">break</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\tbuffer<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span>part<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>prefix <span class=\"token punctuation\">&#123;</span>\n\t\t\tlines <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>lines<span class=\"token punctuation\">,</span> buffer<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\tbuffer<span class=\"token punctuation\">.</span><span class=\"token function\">Reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">==</span> io<span class=\"token punctuation\">.</span>EOF <span class=\"token punctuation\">&#123;</span>\n\t\terr <span class=\"token operator\">=</span> <span class=\"token boolean\">nil</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">WriteLines</span><span class=\"token punctuation\">(</span>lines <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> path <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">var</span> file <span class=\"token operator\">*</span>os<span class=\"token punctuation\">.</span>File\n\n\t<span class=\"token keyword\">if</span> file<span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token keyword\">defer</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> elem <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> lines <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">WriteString</span><span class=\"token punctuation\">(</span>strings<span class=\"token punctuation\">.</span><span class=\"token function\">TrimSpace</span><span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">break</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}},"excerpt":"","more":"<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> utils\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"bufio\"</span>\n\t<span class=\"token string\">\"bytes\"</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"io\"</span>\n\t<span class=\"token string\">\"os\"</span>\n\t<span class=\"token string\">\"strings\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">ReadLines</span><span class=\"token punctuation\">(</span>path <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>lines <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">var</span> <span class=\"token punctuation\">(</span>\n\t\tfile   <span class=\"token operator\">*</span>os<span class=\"token punctuation\">.</span>File\n\t\tpart   <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span>\n\t\tprefix <span class=\"token builtin\">bool</span>\n\t<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">if</span> file<span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">Open</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\treader <span class=\"token operator\">:=</span> bufio<span class=\"token punctuation\">.</span><span class=\"token function\">NewReader</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span>\n\tbuffer <span class=\"token operator\">:=</span> bytes<span class=\"token punctuation\">.</span><span class=\"token function\">NewBuffer</span><span class=\"token punctuation\">(</span><span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span> part<span class=\"token punctuation\">,</span> prefix<span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> reader<span class=\"token punctuation\">.</span><span class=\"token function\">ReadLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">break</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\tbuffer<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span>part<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>prefix <span class=\"token punctuation\">&#123;</span>\n\t\t\tlines <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>lines<span class=\"token punctuation\">,</span> buffer<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\tbuffer<span class=\"token punctuation\">.</span><span class=\"token function\">Reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">==</span> io<span class=\"token punctuation\">.</span>EOF <span class=\"token punctuation\">&#123;</span>\n\t\terr <span class=\"token operator\">=</span> <span class=\"token boolean\">nil</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">WriteLines</span><span class=\"token punctuation\">(</span>lines <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> path <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">var</span> file <span class=\"token operator\">*</span>os<span class=\"token punctuation\">.</span>File\n\n\t<span class=\"token keyword\">if</span> file<span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token keyword\">defer</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> elem <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> lines <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">WriteString</span><span class=\"token punctuation\">(</span>strings<span class=\"token punctuation\">.</span><span class=\"token function\">TrimSpace</span><span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">break</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"golang 用两个栈实现队列","date":"2022-03-15T03:09:43.187Z","updated":"2022-03-15T03:09:43.187Z","url":"/archives/golangyong-liang-ge-zhan-shi-xian-dui-lie","description":"golang用栈实现队列代码","_content":"\n```go\npackage main\n\n\nimport (\n\t\"container/list\"\n\t\"fmt\"\n)\n\nfunc main() {\n\tc := Constructor()\n\tc.AppendTail(3)\n\te := c.DeleteHead()\n\tfmt.Println(e)\n\te = c.DeleteHead()\n\tfmt.Println(e)\n\te = c.DeleteHead()\n\tfmt.Println(e)\n}\n\ntype CQueue struct {\n\tstack1, stack2 *list.List\n}\n\nfunc Constructor() CQueue {\n\treturn CQueue{\n\t\tstack1: list.New(),\n\t\tstack2: list.New(),\n\t}\n}\n\nfunc (this *CQueue) AppendTail(value int) {\n\tthis.stack1.PushBack(value)\n}\n\nfunc (this *CQueue) DeleteHead() int {\n\tif this.stack2.Len() == 0 {\n\t\tfor this.stack1.Len() > 0 {\n\t\t\tthis.stack2.PushBack(this.stack1.Remove(this.stack1.Back()))\n\t\t}\n\t}\n\tif this.stack2.Len() != 0 {\n\t\treturn this.stack2.Remove(this.stack2.Back()).(int)\n\t}\n\treturn -1\n}\n\n/**\n* Your CQueue object will be instantiated and called as such:\n* obj := Constructor();\n* obj.AppendTail(value);\n* param_2 := obj.DeleteHead();\n*/\n```\n","source":"_posts/golang用两个栈实现队列.md","raw":"---\ntitle: golang 用两个栈实现队列\ndate: 2022-03-15 11:09:43.187\nupdated: 2022-03-15 11:09:43.187\nurl: /archives/golangyong-liang-ge-zhan-shi-xian-dui-lie\ndescription: golang用栈实现队列代码\ncategories: \n- golang\ntags: \n- golang\n---\n\n```go\npackage main\n\n\nimport (\n\t\"container/list\"\n\t\"fmt\"\n)\n\nfunc main() {\n\tc := Constructor()\n\tc.AppendTail(3)\n\te := c.DeleteHead()\n\tfmt.Println(e)\n\te = c.DeleteHead()\n\tfmt.Println(e)\n\te = c.DeleteHead()\n\tfmt.Println(e)\n}\n\ntype CQueue struct {\n\tstack1, stack2 *list.List\n}\n\nfunc Constructor() CQueue {\n\treturn CQueue{\n\t\tstack1: list.New(),\n\t\tstack2: list.New(),\n\t}\n}\n\nfunc (this *CQueue) AppendTail(value int) {\n\tthis.stack1.PushBack(value)\n}\n\nfunc (this *CQueue) DeleteHead() int {\n\tif this.stack2.Len() == 0 {\n\t\tfor this.stack1.Len() > 0 {\n\t\t\tthis.stack2.PushBack(this.stack1.Remove(this.stack1.Back()))\n\t\t}\n\t}\n\tif this.stack2.Len() != 0 {\n\t\treturn this.stack2.Remove(this.stack2.Back()).(int)\n\t}\n\treturn -1\n}\n\n/**\n* Your CQueue object will be instantiated and called as such:\n* obj := Constructor();\n* obj.AppendTail(value);\n* param_2 := obj.DeleteHead();\n*/\n```\n","slug":"golang用两个栈实现队列","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clgxpu7ya0027vouvcyqd0xqb","content":"<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"container/list\"</span>\n\t<span class=\"token string\">\"fmt\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tc <span class=\"token operator\">:=</span> <span class=\"token function\">Constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tc<span class=\"token punctuation\">.</span><span class=\"token function\">AppendTail</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\te <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">DeleteHead</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n\te <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">DeleteHead</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n\te <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">DeleteHead</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">type</span> CQueue <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\tstack1<span class=\"token punctuation\">,</span> stack2 <span class=\"token operator\">*</span>list<span class=\"token punctuation\">.</span>List\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">Constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> CQueue <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> CQueue<span class=\"token punctuation\">&#123;</span>\n\t\tstack1<span class=\"token punctuation\">:</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\tstack2<span class=\"token punctuation\">:</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>this <span class=\"token operator\">*</span>CQueue<span class=\"token punctuation\">)</span> <span class=\"token function\">AppendTail</span><span class=\"token punctuation\">(</span>value <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tthis<span class=\"token punctuation\">.</span>stack1<span class=\"token punctuation\">.</span><span class=\"token function\">PushBack</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>this <span class=\"token operator\">*</span>CQueue<span class=\"token punctuation\">)</span> <span class=\"token function\">DeleteHead</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> this<span class=\"token punctuation\">.</span>stack2<span class=\"token punctuation\">.</span><span class=\"token function\">Len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">for</span> this<span class=\"token punctuation\">.</span>stack1<span class=\"token punctuation\">.</span><span class=\"token function\">Len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\tthis<span class=\"token punctuation\">.</span>stack2<span class=\"token punctuation\">.</span><span class=\"token function\">PushBack</span><span class=\"token punctuation\">(</span>this<span class=\"token punctuation\">.</span>stack1<span class=\"token punctuation\">.</span><span class=\"token function\">Remove</span><span class=\"token punctuation\">(</span>this<span class=\"token punctuation\">.</span>stack1<span class=\"token punctuation\">.</span><span class=\"token function\">Back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">if</span> this<span class=\"token punctuation\">.</span>stack2<span class=\"token punctuation\">.</span><span class=\"token function\">Len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> this<span class=\"token punctuation\">.</span>stack2<span class=\"token punctuation\">.</span><span class=\"token function\">Remove</span><span class=\"token punctuation\">(</span>this<span class=\"token punctuation\">.</span>stack2<span class=\"token punctuation\">.</span><span class=\"token function\">Back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">/**\n* Your CQueue object will be instantiated and called as such:\n* obj := Constructor();\n* obj.AppendTail(value);\n* param_2 := obj.DeleteHead();\n*/</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}},"excerpt":"","more":"<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"container/list\"</span>\n\t<span class=\"token string\">\"fmt\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tc <span class=\"token operator\">:=</span> <span class=\"token function\">Constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tc<span class=\"token punctuation\">.</span><span class=\"token function\">AppendTail</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\te <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">DeleteHead</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n\te <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">DeleteHead</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n\te <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">DeleteHead</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">type</span> CQueue <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\tstack1<span class=\"token punctuation\">,</span> stack2 <span class=\"token operator\">*</span>list<span class=\"token punctuation\">.</span>List\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">Constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> CQueue <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> CQueue<span class=\"token punctuation\">&#123;</span>\n\t\tstack1<span class=\"token punctuation\">:</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\tstack2<span class=\"token punctuation\">:</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>this <span class=\"token operator\">*</span>CQueue<span class=\"token punctuation\">)</span> <span class=\"token function\">AppendTail</span><span class=\"token punctuation\">(</span>value <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tthis<span class=\"token punctuation\">.</span>stack1<span class=\"token punctuation\">.</span><span class=\"token function\">PushBack</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>this <span class=\"token operator\">*</span>CQueue<span class=\"token punctuation\">)</span> <span class=\"token function\">DeleteHead</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> this<span class=\"token punctuation\">.</span>stack2<span class=\"token punctuation\">.</span><span class=\"token function\">Len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">for</span> this<span class=\"token punctuation\">.</span>stack1<span class=\"token punctuation\">.</span><span class=\"token function\">Len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\tthis<span class=\"token punctuation\">.</span>stack2<span class=\"token punctuation\">.</span><span class=\"token function\">PushBack</span><span class=\"token punctuation\">(</span>this<span class=\"token punctuation\">.</span>stack1<span class=\"token punctuation\">.</span><span class=\"token function\">Remove</span><span class=\"token punctuation\">(</span>this<span class=\"token punctuation\">.</span>stack1<span class=\"token punctuation\">.</span><span class=\"token function\">Back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">if</span> this<span class=\"token punctuation\">.</span>stack2<span class=\"token punctuation\">.</span><span class=\"token function\">Len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> this<span class=\"token punctuation\">.</span>stack2<span class=\"token punctuation\">.</span><span class=\"token function\">Remove</span><span class=\"token punctuation\">(</span>this<span class=\"token punctuation\">.</span>stack2<span class=\"token punctuation\">.</span><span class=\"token function\">Back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">/**\n* Your CQueue object will be instantiated and called as such:\n* obj := Constructor();\n* obj.AppendTail(value);\n* param_2 := obj.DeleteHead();\n*/</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"golang私有仓库配置","date":"2022-08-23T07:19:20.000Z","updated":"2022-08-23T07:19:20.000Z","_content":"golang设置\n```golang\ngo env -w GOPRIVATE=\"gitlab.xxx.com/xxxx/*\"\n```\ngit设置\n```bash\ngit config --global url.\"git@gitlab.xxxx.com:\".insteadOf \"http://gitlab.xxxx.com/\"\n```\n","source":"_posts/golang私有仓库配置.md","raw":"title: golang私有仓库配置\ndate: 2022-08-23 15:19:20\nupdated: 2022-08-23 15:19:20\ncategories:\n\n- golang \n\ntags:\n\n- golang\n---\ngolang设置\n```golang\ngo env -w GOPRIVATE=\"gitlab.xxx.com/xxxx/*\"\n```\ngit设置\n```bash\ngit config --global url.\"git@gitlab.xxxx.com:\".insteadOf \"http://gitlab.xxxx.com/\"\n```\n","slug":"golang私有仓库配置","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clgxpu7yc002bvouvhdsbbtv3","content":"<p>golang设置</p>\n<pre class=\"line-numbers language-golang\" data-language=\"golang\"><code class=\"language-golang\">go env -w GOPRIVATE&#x3D;&quot;gitlab.xxx.com&#x2F;xxxx&#x2F;*&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>git设置</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> config --global url.<span class=\"token string\">\"git@gitlab.xxxx.com:\"</span>.insteadOf <span class=\"token string\">\"http://gitlab.xxxx.com/\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}},"excerpt":"","more":"<p>golang设置</p>\n<pre class=\"line-numbers language-golang\" data-language=\"golang\"><code class=\"language-golang\">go env -w GOPRIVATE&#x3D;&quot;gitlab.xxx.com&#x2F;xxxx&#x2F;*&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>git设置</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> config --global url.<span class=\"token string\">\"git@gitlab.xxxx.com:\"</span>.insteadOf <span class=\"token string\">\"http://gitlab.xxxx.com/\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n"},{"title":"golang远程调试","date":"2023-04-11T15:44:01.404Z","updated":"2023-04-11T07:56:01.404Z","url":"/archives/golang-remote-debug","_content":"# golang远程调试\n\n## 第一步：安装go\n\n\n\n```shell\n#下载go\nwget https://dl.google.com/go/go1.20.3.linux-amd64.tar.gz\n#解压\ntar -xzf go1.20.3.linux-amd64.tar.gz\n#移动解压的目录到/usr/local/src目录下\nmv go /usr/local/src\n#配置环境变量\nexport PATH=$PATH:/usr/local/src/go/bin\n#使profile配置立即生效\nsource /etc/profile\n#查看go版本\ngo version\n#若显示 go version go1.20.3 linux/amd64 则成功\n# 查看环境变量\ngo env \n#设置 goproxy\ngo env -w GOPROXY=https://goproxy.io,direct\n```\n\n## 第二步：安装dlv\n\n```shell\ngo install github.com/go-delve/delve/cmd/dlv@latest\n#移动dlv工具到bin目录下\nmv dlv /usr/local/src/go/bin\n```\n\n## 第三步 启动dlv 实例\n\n### 1、编译运行程序\n\n```shell\n#编译运行文件\ngo build -gcflags='all -N -l' main.go\n```\n\n- -N:禁止编译器优化\n- -l:关闭内联结\n\n### 2、dlv attach\n\n这个相当于gdb -p 或者 gdb attach ，即跟踪一个正在运行的程序。这中用法也是很常见，对于一个后台程序，它已经运行很久了，此时你需要查看程序内部的一些状态，只能借助attach.\n\n```shell\ndlv attach --headless --listen \":2345\" --log --api-version 2  4977 ## 后面的进程的ID\n```\n\n### 3、dlv直接运行\n\n```shell\n dlv --listen=:2345 --headless=true --api-version=2 --accept-multiclient exec ./main\n```\n\n\n\n\n## goland 远程调试\n\n打开goland配置 选择go remote 填写服务器地址和端口\n\n![](../pictures\\1681230165886.jpg)\n\n","source":"_posts/golang远程调试.md","raw":"---\ntitle: golang远程调试\ndate: 2023-04-11 23:44:01.404\nupdated: 2023-04-11 15:56:01.404\nurl: /archives/golang-remote-debug\ncategories: \n- golang\ntags: \n- golang\n---\n# golang远程调试\n\n## 第一步：安装go\n\n\n\n```shell\n#下载go\nwget https://dl.google.com/go/go1.20.3.linux-amd64.tar.gz\n#解压\ntar -xzf go1.20.3.linux-amd64.tar.gz\n#移动解压的目录到/usr/local/src目录下\nmv go /usr/local/src\n#配置环境变量\nexport PATH=$PATH:/usr/local/src/go/bin\n#使profile配置立即生效\nsource /etc/profile\n#查看go版本\ngo version\n#若显示 go version go1.20.3 linux/amd64 则成功\n# 查看环境变量\ngo env \n#设置 goproxy\ngo env -w GOPROXY=https://goproxy.io,direct\n```\n\n## 第二步：安装dlv\n\n```shell\ngo install github.com/go-delve/delve/cmd/dlv@latest\n#移动dlv工具到bin目录下\nmv dlv /usr/local/src/go/bin\n```\n\n## 第三步 启动dlv 实例\n\n### 1、编译运行程序\n\n```shell\n#编译运行文件\ngo build -gcflags='all -N -l' main.go\n```\n\n- -N:禁止编译器优化\n- -l:关闭内联结\n\n### 2、dlv attach\n\n这个相当于gdb -p 或者 gdb attach ，即跟踪一个正在运行的程序。这中用法也是很常见，对于一个后台程序，它已经运行很久了，此时你需要查看程序内部的一些状态，只能借助attach.\n\n```shell\ndlv attach --headless --listen \":2345\" --log --api-version 2  4977 ## 后面的进程的ID\n```\n\n### 3、dlv直接运行\n\n```shell\n dlv --listen=:2345 --headless=true --api-version=2 --accept-multiclient exec ./main\n```\n\n\n\n\n## goland 远程调试\n\n打开goland配置 选择go remote 填写服务器地址和端口\n\n![](../pictures\\1681230165886.jpg)\n\n","slug":"golang远程调试","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clgxpu7yd002fvouv8iqu57iv","content":"<h1 id=\"golang远程调试\"><a href=\"#golang远程调试\" class=\"headerlink\" title=\"golang远程调试\"></a>golang远程调试</h1><h2 id=\"第一步：安装go\"><a href=\"#第一步：安装go\" class=\"headerlink\" title=\"第一步：安装go\"></a>第一步：安装go</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#下载go</span>\n<span class=\"token function\">wget</span> https://dl.google.com/go/go1.20.3.linux-amd64.tar.gz\n<span class=\"token comment\">#解压</span>\n<span class=\"token function\">tar</span> -xzf go1.20.3.linux-amd64.tar.gz\n<span class=\"token comment\">#移动解压的目录到/usr/local/src目录下</span>\n<span class=\"token function\">mv</span> go /usr/local/src\n<span class=\"token comment\">#配置环境变量</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span><span class=\"token environment constant\">$PATH</span>:/usr/local/src/go/bin\n<span class=\"token comment\">#使profile配置立即生效</span>\n<span class=\"token builtin class-name\">source</span> /etc/profile\n<span class=\"token comment\">#查看go版本</span>\ngo version\n<span class=\"token comment\">#若显示 go version go1.20.3 linux/amd64 则成功</span>\n<span class=\"token comment\"># 查看环境变量</span>\ngo <span class=\"token function\">env</span> \n<span class=\"token comment\">#设置 goproxy</span>\ngo <span class=\"token function\">env</span> -w <span class=\"token assign-left variable\">GOPROXY</span><span class=\"token operator\">=</span>https://goproxy.io,direct<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"第二步：安装dlv\"><a href=\"#第二步：安装dlv\" class=\"headerlink\" title=\"第二步：安装dlv\"></a>第二步：安装dlv</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">go <span class=\"token function\">install</span> github.com/go-delve/delve/cmd/dlv@latest\n<span class=\"token comment\">#移动dlv工具到bin目录下</span>\n<span class=\"token function\">mv</span> dlv /usr/local/src/go/bin<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"第三步-启动dlv-实例\"><a href=\"#第三步-启动dlv-实例\" class=\"headerlink\" title=\"第三步 启动dlv 实例\"></a>第三步 启动dlv 实例</h2><h3 id=\"1、编译运行程序\"><a href=\"#1、编译运行程序\" class=\"headerlink\" title=\"1、编译运行程序\"></a>1、编译运行程序</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#编译运行文件</span>\ngo build -gcflags<span class=\"token operator\">=</span><span class=\"token string\">'all -N -l'</span> main.go<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<ul>\n<li>-N:禁止编译器优化</li>\n<li>-l:关闭内联结</li>\n</ul>\n<h3 id=\"2、dlv-attach\"><a href=\"#2、dlv-attach\" class=\"headerlink\" title=\"2、dlv attach\"></a>2、dlv attach</h3><p>这个相当于gdb -p 或者 gdb attach ，即跟踪一个正在运行的程序。这中用法也是很常见，对于一个后台程序，它已经运行很久了，此时你需要查看程序内部的一些状态，只能借助attach.</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">dlv attach --headless --listen <span class=\"token string\">\":2345\"</span> --log --api-version <span class=\"token number\">2</span>  <span class=\"token number\">4977</span> <span class=\"token comment\">## 后面的进程的ID</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"3、dlv直接运行\"><a href=\"#3、dlv直接运行\" class=\"headerlink\" title=\"3、dlv直接运行\"></a>3、dlv直接运行</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">dlv --listen<span class=\"token operator\">=</span>:2345 --headless<span class=\"token operator\">=</span>true --api-version<span class=\"token operator\">=</span><span class=\"token number\">2</span> --accept-multiclient <span class=\"token builtin class-name\">exec</span> ./main<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n\n<h2 id=\"goland-远程调试\"><a href=\"#goland-远程调试\" class=\"headerlink\" title=\"goland 远程调试\"></a>goland 远程调试</h2><p>打开goland配置 选择go remote 填写服务器地址和端口</p>\n<p><img src=\"/../pictures%5C1681230165886.jpg\"></p>\n","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}},"excerpt":"","more":"<h1 id=\"golang远程调试\"><a href=\"#golang远程调试\" class=\"headerlink\" title=\"golang远程调试\"></a>golang远程调试</h1><h2 id=\"第一步：安装go\"><a href=\"#第一步：安装go\" class=\"headerlink\" title=\"第一步：安装go\"></a>第一步：安装go</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#下载go</span>\n<span class=\"token function\">wget</span> https://dl.google.com/go/go1.20.3.linux-amd64.tar.gz\n<span class=\"token comment\">#解压</span>\n<span class=\"token function\">tar</span> -xzf go1.20.3.linux-amd64.tar.gz\n<span class=\"token comment\">#移动解压的目录到/usr/local/src目录下</span>\n<span class=\"token function\">mv</span> go /usr/local/src\n<span class=\"token comment\">#配置环境变量</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span><span class=\"token environment constant\">$PATH</span>:/usr/local/src/go/bin\n<span class=\"token comment\">#使profile配置立即生效</span>\n<span class=\"token builtin class-name\">source</span> /etc/profile\n<span class=\"token comment\">#查看go版本</span>\ngo version\n<span class=\"token comment\">#若显示 go version go1.20.3 linux/amd64 则成功</span>\n<span class=\"token comment\"># 查看环境变量</span>\ngo <span class=\"token function\">env</span> \n<span class=\"token comment\">#设置 goproxy</span>\ngo <span class=\"token function\">env</span> -w <span class=\"token assign-left variable\">GOPROXY</span><span class=\"token operator\">=</span>https://goproxy.io,direct<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"第二步：安装dlv\"><a href=\"#第二步：安装dlv\" class=\"headerlink\" title=\"第二步：安装dlv\"></a>第二步：安装dlv</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">go <span class=\"token function\">install</span> github.com/go-delve/delve/cmd/dlv@latest\n<span class=\"token comment\">#移动dlv工具到bin目录下</span>\n<span class=\"token function\">mv</span> dlv /usr/local/src/go/bin<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"第三步-启动dlv-实例\"><a href=\"#第三步-启动dlv-实例\" class=\"headerlink\" title=\"第三步 启动dlv 实例\"></a>第三步 启动dlv 实例</h2><h3 id=\"1、编译运行程序\"><a href=\"#1、编译运行程序\" class=\"headerlink\" title=\"1、编译运行程序\"></a>1、编译运行程序</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#编译运行文件</span>\ngo build -gcflags<span class=\"token operator\">=</span><span class=\"token string\">'all -N -l'</span> main.go<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<ul>\n<li>-N:禁止编译器优化</li>\n<li>-l:关闭内联结</li>\n</ul>\n<h3 id=\"2、dlv-attach\"><a href=\"#2、dlv-attach\" class=\"headerlink\" title=\"2、dlv attach\"></a>2、dlv attach</h3><p>这个相当于gdb -p 或者 gdb attach ，即跟踪一个正在运行的程序。这中用法也是很常见，对于一个后台程序，它已经运行很久了，此时你需要查看程序内部的一些状态，只能借助attach.</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">dlv attach --headless --listen <span class=\"token string\">\":2345\"</span> --log --api-version <span class=\"token number\">2</span>  <span class=\"token number\">4977</span> <span class=\"token comment\">## 后面的进程的ID</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"3、dlv直接运行\"><a href=\"#3、dlv直接运行\" class=\"headerlink\" title=\"3、dlv直接运行\"></a>3、dlv直接运行</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">dlv --listen<span class=\"token operator\">=</span>:2345 --headless<span class=\"token operator\">=</span>true --api-version<span class=\"token operator\">=</span><span class=\"token number\">2</span> --accept-multiclient <span class=\"token builtin class-name\">exec</span> ./main<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n\n<h2 id=\"goland-远程调试\"><a href=\"#goland-远程调试\" class=\"headerlink\" title=\"goland 远程调试\"></a>goland 远程调试</h2><p>打开goland配置 选择go remote 填写服务器地址和端口</p>\n<p><img src=\"/../pictures%5C1681230165886.jpg\"></p>\n"},{"title":"go 中context的使用","date":"2022-05-07T07:28:52.002Z","updated":"2022-05-07T07:38:13.718Z","url":"/archives/go中context的使用","description":null,"_content":"\n# go中context的使用\n版权声明：本文为CSDN博主「Word哥」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。\n原文链接：https://blog.csdn.net/finghting321/article/details/106012673/\n————————————————\n\n## 1. 为什么需要context\n在并发程序中，由于超时、取消操作或者一些异常情况，往往需要进行抢占操作或者中断后续操作。\n\n举个例子：在 Go http包的Server中，每一个请求在都有一个对应的 goroutine 去处理。请求处理函数通常会启动额外的 goroutine 用来访问后端服务，比如数据库和RPC服务，用来处理一个请求的 goroutine 通常需要访问一些与请求特定的数据，比如终端用户的身份认证信息、验证相关的token、请求的截止时间。 当一个请求被取消或超时时，所有用来处理该请求的 goroutine 都应该迅速中断退出，然后系统才能释放这些 goroutine 占用的资源。context深入理解可参考\n<!--more-->\ncontext常用的使用场景：\n1. 一个请求对应多个goroutine之间的数据交互\n2. 超时控制\n3. 上下文控制\n\n## 2. context包简介\ncontext.Context接口：\n```go\ntype Context interface {\n    // 返回Context的超时时间（超时返回场景）\n    Deadline() (deadline time.Time, ok bool)\n \n    // 在Context超时或取消时（即结束了）返回一个关闭的channel\n    // 即如果当前Context超时或取消时，Done方法会返回一个channel，然后其他地方就可以通过判断Done方法是否有返回（channel），如果有则说明Context已结束\n    // 故其可以作为广播通知其他相关方本Context已结束，请做相关处理。\n    Done() <-chan struct{}\n \n    // 返回Context取消的原因\n    Err() error\n    \n    // 返回Context相关数据\n    Value(key interface{}) interface{}\n}\n```\n继承的Context，BackGound是所有Context的root，不能够被cancel。context包提供了三种context，分别是是普通context，超时context以及带值的context：\n```go\n// 普通context，通常这样调用： ctx, cancel := context.WithCancel(context.Background())\nfunc WithCancel(parent Context) (ctx Context, cancel CancelFunc)\n \n// 带超时的context，超时之后会自动close对象的Done，与调用CancelFunc的效果一样\n// WithDeadline 明确地设置一个d指定的系统时钟时间，如果超过就触发超时\n// WithTimeout 设置一个相对的超时时间，也就是deadline设为timeout加上当前的系统时间\n// 因为两者事实上都依赖于系统时钟，所以可能存在微小的误差，所以官方不推荐把超时间隔设置得太小\n// 通常这样调用：ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\nfunc WithDeadline(parent Context, d time.Time) (Context, CancelFunc)\nfunc WithTimeout(parent Context, timeout time.Duration) (Context, CancelFunc)\n \n// 带有值的context，没有CancelFunc，所以它只用于值的多goroutine传递和共享\n// 通常这样调用：ctx := context.WithValue(context.Background(), \"key\", myValue)\nfunc WithValue(parent Context, key, val interface{}) Context\n```\n## 3. 场景举例—等待组\n```go\npackage main\n \nimport (\n    \"fmt\"\n    \"sync\"\n    \"time\"\n)\n \n//数据接收服务主协程同子协程同步变量\nvar wg sync.WaitGroup\n \nfunc run(i int) {\n    fmt.Println(\"start 任务ID：\", i)\n    time.Sleep(time.Second * 1)\n    wg.Done() // 每个goroutine运行完毕后就释放等待组的计数器\n}\n \nfunc main() {\n    countThread := 2 //runtime.NumCPU()\n    for i := 0; i < countThread; i++ {\n        go run(i)\n    }\n    wg.Add(countThread) // 需要开启的goroutine等待组的计数器\n \n    //等待所有的任务都释放\n    wg.Wait()\n    fmt.Println(\"任务全部结束,退出\")\n}\n```\n**运行结果：** \n\n<img align=\"left\" src=\"http://rd7bcspti.hn-bkt.clouddn.com/02.png\">  \n\n**分析：**  对于等待组控制多并发的情况，只有所有的goroutine都结束了才算结束，只要有一个goroutine没有结束， 那么就会一直等，这显然对资源的释放是缓慢的；\n**优点：** 使用等待组的并发控制模型，适用于好多个goroutine协同做一件事情，因为每个goroutine做的都是这件事情的一部分，只有当全部的goroutine都完成，这件事情才算完成；\n**缺点：** 需要主动的通知某一个 goroutine 结束。\n**疑问：** 如果开启一个后台 goroutine 一直做事情，现在不需要了，那么就需要通知这个goroutine 结束，否则它会一直跑。\n\n## 4. 场景举例—通道+select\n针对等待组场景遗留的问题，解决办法：\n> 1. 设置全局变量，在通知goroutine要停止时，为全局变量赋值，但是这样必须保证线程安全，不可避免的必须为全局变量加锁，显得有失便利；\n> 2. 使用chan + select多路复用的方式，就会优雅许多；\n```go\npackage main\n \nimport (\n    \"fmt\"\n    \"time\"\n)\n \nfunc run(stop chan bool) {\n    for {\n        select {\n        case <-stop:\n            fmt.Println(\"任务1结束退出\")\n            return\n        default:\n            fmt.Println(\"任务1正在运行中\")\n            time.Sleep(time.Second * 2)\n        }\n    }\n}\n \nfunc main() {\n    stop := make(chan bool)\n    go run(stop) // 开启goroutine\n \n    // 运行一段时间后停止\n    time.Sleep(time.Second * 10)\n    fmt.Println(\"停止任务1。。。\")\n    stop <- true\n    time.Sleep(time.Second * 3)\n    return\n}\n```\n**运行结果：** \n![image-1651908425418](/upload/2022/05/image-1651908425418.png)\n**优点：** 优雅、简单\n**不足：** 如果有很多 goroutine 都需要控制结束，并且这些 goroutine 又开启其它更多的goroutine ？\n\n## 5. 场景举例—普通context\n```go\npackage main\n \nimport (\n    \"context\"\n    \"fmt\"\n    \"time\"\n)\n \nfunc run(ctx context.Context, id int) {\n    for {\n        select {\n        case <-ctx.Done():\n            fmt.Printf(\"任务%v结束退出\\n\", id)\n            return\n        default:\n            fmt.Printf(\"任务%v正在运行中\\n\", id)\n            time.Sleep(time.Second * 2)\n        }\n    }\n}\n \nfunc main() {\n    //管理启动的协程\n    ctx, cancel := context.WithCancel(context.Background())\n    // 开启多个goroutine，传入ctx\n    go run(ctx, 1)\n    go run(ctx, 2)\n    // 运行一段时间后停止\n    time.Sleep(time.Second * 10)\n    fmt.Println(\"停止任务1\")\n    cancel() // 使用context的cancel函数停止goroutine\n    // 为了检测监控过是否停止，如果没有监控输出，表示停止\n    time.Sleep(time.Second * 3)\n    return\n}\n```\n**说明：** context.Background() 返回一个空的 Context，这个空的 Context 一般用于整个 Context 树的根节点。然后使用 context.WithCancel(parent) 函数，创建一个可取消的子 Context，然后当作参数传给 goroutine 使用，这样就可以使用这个子 Context 跟踪这个 goroutine。\n\n**运行结果：**\n![image-1651908618179](/upload/2022/05/image-1651908618179.png)\n\n## 6. 场景举例—Context超时\n```go\npackage main\n \nimport (\n    \"context\"\n    \"fmt\"\n    \"sync\"\n    \"time\"\n)\n \nfunc coroutine(ctx context.Context, duration time.Duration, id int, wg *sync.WaitGroup) {\n    for {\n        select {\n        case <-ctx.Done():\n            fmt.Printf(\"协程 %d 退出\\n\", id)\n            wg.Done()\n            return\n        case <-time.After(duration):\n            fmt.Printf(\"消息来自协程 %d\\n\", id)\n        }\n    }\n}\n \nfunc main() {\n    //使用WaitGroup等待所有的goroutine执行完毕，在收到<-ctx.Done()的终止信号后使wg中需要等待的goroutine数量减一。\n    // 因为context只负责取消goroutine，不负责等待goroutine运行，所以需要配合一点辅助手段\n    //管理启动的协程\n    wg := &sync.WaitGroup{}\n    ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\n    defer cancel()\n    for i := 0; i < 3; i++ {\n        wg.Add(1)\n        go coroutine(ctx, 1*time.Second, i, wg)\n    }\n    wg.Wait()\n }\n```\n**说明：** 代码中使用WaitGroup等待所有的goroutine执行完毕，在收到<-ctx.Done()的终止信号后使wg中需要等待的goroutine数量减一， 因为context只负责取消goroutine，不负责等待goroutine运行，需要配合一点辅助手段\n**运行结果：** \n\n![image-1651908781361](/upload/2022/05/image-1651908781361.png)\n\n## 7. 场景举例—Context传递元数据\n```go\npackage main\n \nimport (\n    \"context\"\n    \"fmt\"\n    \"time\"\n)\n \nvar key string = \"name\"\n \nfunc run(ctx context.Context) {\n    for {\n        select {\n        case <-ctx.Done():\n            fmt.Printf(\"任务%v结束退出\\n\", ctx.Value(key))\n            return\n        default:\n            fmt.Printf(\"任务%v正在运行中\\n\", ctx.Value(key))\n            time.Sleep(time.Second * 2)\n        }\n    }\n}\n \nfunc main() {\n    //管理启动的协程\n    ctx, cancel := context.WithCancel(context.Background())\n    // 给ctx绑定键值，传递给goroutine\n    valuectx := context.WithValue(ctx, key, \"【监控1】\")\n    // 开启goroutine，传入ctx\n    go run(valuectx)\n    // 运行一段时间后停止\n    time.Sleep(time.Second * 10)\n    fmt.Println(\"停止任务\")\n    cancel() // 使用context的cancel函数停止goroutine\n    // 为了检测监控过是否停止，如果没有监控输出，表示停止\n    time.Sleep(time.Second * 3)\n}\n```\n**运行结果：** \n![image-1651908878817](/upload/2022/05/image-1651908878817.png)\n\n## 8. context总结\n\n> 1. 不要把 Context 放在结构体中，要以参数的方式传递\n> 2. 以 Context 作为参数的函数方法，应该把 Context 作为第一个参数，放在第一位\n>3. 给一个函数方法传递 Context 的时候，不要传递 nil，如果不知道传递什么，就使用 context.TODO\n>4. Context 的 Value 相关方法应该传递必须的数据，不要什么数据都使用这个传递\n>5. Context 是线程安全的，可以放心的在多个 goroutine 中传递\n","source":"_posts/go中context的使用.md","raw":"---\ntitle: go 中context的使用\ndate: 2022-05-07 15:28:52.002\nupdated: 2022-05-07 15:38:13.718\nurl: /archives/go中context的使用\ndescription: \ncategories: \n- golang\ntags: \n- golang\n---\n\n# go中context的使用\n版权声明：本文为CSDN博主「Word哥」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。\n原文链接：https://blog.csdn.net/finghting321/article/details/106012673/\n————————————————\n\n## 1. 为什么需要context\n在并发程序中，由于超时、取消操作或者一些异常情况，往往需要进行抢占操作或者中断后续操作。\n\n举个例子：在 Go http包的Server中，每一个请求在都有一个对应的 goroutine 去处理。请求处理函数通常会启动额外的 goroutine 用来访问后端服务，比如数据库和RPC服务，用来处理一个请求的 goroutine 通常需要访问一些与请求特定的数据，比如终端用户的身份认证信息、验证相关的token、请求的截止时间。 当一个请求被取消或超时时，所有用来处理该请求的 goroutine 都应该迅速中断退出，然后系统才能释放这些 goroutine 占用的资源。context深入理解可参考\n<!--more-->\ncontext常用的使用场景：\n1. 一个请求对应多个goroutine之间的数据交互\n2. 超时控制\n3. 上下文控制\n\n## 2. context包简介\ncontext.Context接口：\n```go\ntype Context interface {\n    // 返回Context的超时时间（超时返回场景）\n    Deadline() (deadline time.Time, ok bool)\n \n    // 在Context超时或取消时（即结束了）返回一个关闭的channel\n    // 即如果当前Context超时或取消时，Done方法会返回一个channel，然后其他地方就可以通过判断Done方法是否有返回（channel），如果有则说明Context已结束\n    // 故其可以作为广播通知其他相关方本Context已结束，请做相关处理。\n    Done() <-chan struct{}\n \n    // 返回Context取消的原因\n    Err() error\n    \n    // 返回Context相关数据\n    Value(key interface{}) interface{}\n}\n```\n继承的Context，BackGound是所有Context的root，不能够被cancel。context包提供了三种context，分别是是普通context，超时context以及带值的context：\n```go\n// 普通context，通常这样调用： ctx, cancel := context.WithCancel(context.Background())\nfunc WithCancel(parent Context) (ctx Context, cancel CancelFunc)\n \n// 带超时的context，超时之后会自动close对象的Done，与调用CancelFunc的效果一样\n// WithDeadline 明确地设置一个d指定的系统时钟时间，如果超过就触发超时\n// WithTimeout 设置一个相对的超时时间，也就是deadline设为timeout加上当前的系统时间\n// 因为两者事实上都依赖于系统时钟，所以可能存在微小的误差，所以官方不推荐把超时间隔设置得太小\n// 通常这样调用：ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\nfunc WithDeadline(parent Context, d time.Time) (Context, CancelFunc)\nfunc WithTimeout(parent Context, timeout time.Duration) (Context, CancelFunc)\n \n// 带有值的context，没有CancelFunc，所以它只用于值的多goroutine传递和共享\n// 通常这样调用：ctx := context.WithValue(context.Background(), \"key\", myValue)\nfunc WithValue(parent Context, key, val interface{}) Context\n```\n## 3. 场景举例—等待组\n```go\npackage main\n \nimport (\n    \"fmt\"\n    \"sync\"\n    \"time\"\n)\n \n//数据接收服务主协程同子协程同步变量\nvar wg sync.WaitGroup\n \nfunc run(i int) {\n    fmt.Println(\"start 任务ID：\", i)\n    time.Sleep(time.Second * 1)\n    wg.Done() // 每个goroutine运行完毕后就释放等待组的计数器\n}\n \nfunc main() {\n    countThread := 2 //runtime.NumCPU()\n    for i := 0; i < countThread; i++ {\n        go run(i)\n    }\n    wg.Add(countThread) // 需要开启的goroutine等待组的计数器\n \n    //等待所有的任务都释放\n    wg.Wait()\n    fmt.Println(\"任务全部结束,退出\")\n}\n```\n**运行结果：** \n\n<img align=\"left\" src=\"http://rd7bcspti.hn-bkt.clouddn.com/02.png\">  \n\n**分析：**  对于等待组控制多并发的情况，只有所有的goroutine都结束了才算结束，只要有一个goroutine没有结束， 那么就会一直等，这显然对资源的释放是缓慢的；\n**优点：** 使用等待组的并发控制模型，适用于好多个goroutine协同做一件事情，因为每个goroutine做的都是这件事情的一部分，只有当全部的goroutine都完成，这件事情才算完成；\n**缺点：** 需要主动的通知某一个 goroutine 结束。\n**疑问：** 如果开启一个后台 goroutine 一直做事情，现在不需要了，那么就需要通知这个goroutine 结束，否则它会一直跑。\n\n## 4. 场景举例—通道+select\n针对等待组场景遗留的问题，解决办法：\n> 1. 设置全局变量，在通知goroutine要停止时，为全局变量赋值，但是这样必须保证线程安全，不可避免的必须为全局变量加锁，显得有失便利；\n> 2. 使用chan + select多路复用的方式，就会优雅许多；\n```go\npackage main\n \nimport (\n    \"fmt\"\n    \"time\"\n)\n \nfunc run(stop chan bool) {\n    for {\n        select {\n        case <-stop:\n            fmt.Println(\"任务1结束退出\")\n            return\n        default:\n            fmt.Println(\"任务1正在运行中\")\n            time.Sleep(time.Second * 2)\n        }\n    }\n}\n \nfunc main() {\n    stop := make(chan bool)\n    go run(stop) // 开启goroutine\n \n    // 运行一段时间后停止\n    time.Sleep(time.Second * 10)\n    fmt.Println(\"停止任务1。。。\")\n    stop <- true\n    time.Sleep(time.Second * 3)\n    return\n}\n```\n**运行结果：** \n![image-1651908425418](/upload/2022/05/image-1651908425418.png)\n**优点：** 优雅、简单\n**不足：** 如果有很多 goroutine 都需要控制结束，并且这些 goroutine 又开启其它更多的goroutine ？\n\n## 5. 场景举例—普通context\n```go\npackage main\n \nimport (\n    \"context\"\n    \"fmt\"\n    \"time\"\n)\n \nfunc run(ctx context.Context, id int) {\n    for {\n        select {\n        case <-ctx.Done():\n            fmt.Printf(\"任务%v结束退出\\n\", id)\n            return\n        default:\n            fmt.Printf(\"任务%v正在运行中\\n\", id)\n            time.Sleep(time.Second * 2)\n        }\n    }\n}\n \nfunc main() {\n    //管理启动的协程\n    ctx, cancel := context.WithCancel(context.Background())\n    // 开启多个goroutine，传入ctx\n    go run(ctx, 1)\n    go run(ctx, 2)\n    // 运行一段时间后停止\n    time.Sleep(time.Second * 10)\n    fmt.Println(\"停止任务1\")\n    cancel() // 使用context的cancel函数停止goroutine\n    // 为了检测监控过是否停止，如果没有监控输出，表示停止\n    time.Sleep(time.Second * 3)\n    return\n}\n```\n**说明：** context.Background() 返回一个空的 Context，这个空的 Context 一般用于整个 Context 树的根节点。然后使用 context.WithCancel(parent) 函数，创建一个可取消的子 Context，然后当作参数传给 goroutine 使用，这样就可以使用这个子 Context 跟踪这个 goroutine。\n\n**运行结果：**\n![image-1651908618179](/upload/2022/05/image-1651908618179.png)\n\n## 6. 场景举例—Context超时\n```go\npackage main\n \nimport (\n    \"context\"\n    \"fmt\"\n    \"sync\"\n    \"time\"\n)\n \nfunc coroutine(ctx context.Context, duration time.Duration, id int, wg *sync.WaitGroup) {\n    for {\n        select {\n        case <-ctx.Done():\n            fmt.Printf(\"协程 %d 退出\\n\", id)\n            wg.Done()\n            return\n        case <-time.After(duration):\n            fmt.Printf(\"消息来自协程 %d\\n\", id)\n        }\n    }\n}\n \nfunc main() {\n    //使用WaitGroup等待所有的goroutine执行完毕，在收到<-ctx.Done()的终止信号后使wg中需要等待的goroutine数量减一。\n    // 因为context只负责取消goroutine，不负责等待goroutine运行，所以需要配合一点辅助手段\n    //管理启动的协程\n    wg := &sync.WaitGroup{}\n    ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\n    defer cancel()\n    for i := 0; i < 3; i++ {\n        wg.Add(1)\n        go coroutine(ctx, 1*time.Second, i, wg)\n    }\n    wg.Wait()\n }\n```\n**说明：** 代码中使用WaitGroup等待所有的goroutine执行完毕，在收到<-ctx.Done()的终止信号后使wg中需要等待的goroutine数量减一， 因为context只负责取消goroutine，不负责等待goroutine运行，需要配合一点辅助手段\n**运行结果：** \n\n![image-1651908781361](/upload/2022/05/image-1651908781361.png)\n\n## 7. 场景举例—Context传递元数据\n```go\npackage main\n \nimport (\n    \"context\"\n    \"fmt\"\n    \"time\"\n)\n \nvar key string = \"name\"\n \nfunc run(ctx context.Context) {\n    for {\n        select {\n        case <-ctx.Done():\n            fmt.Printf(\"任务%v结束退出\\n\", ctx.Value(key))\n            return\n        default:\n            fmt.Printf(\"任务%v正在运行中\\n\", ctx.Value(key))\n            time.Sleep(time.Second * 2)\n        }\n    }\n}\n \nfunc main() {\n    //管理启动的协程\n    ctx, cancel := context.WithCancel(context.Background())\n    // 给ctx绑定键值，传递给goroutine\n    valuectx := context.WithValue(ctx, key, \"【监控1】\")\n    // 开启goroutine，传入ctx\n    go run(valuectx)\n    // 运行一段时间后停止\n    time.Sleep(time.Second * 10)\n    fmt.Println(\"停止任务\")\n    cancel() // 使用context的cancel函数停止goroutine\n    // 为了检测监控过是否停止，如果没有监控输出，表示停止\n    time.Sleep(time.Second * 3)\n}\n```\n**运行结果：** \n![image-1651908878817](/upload/2022/05/image-1651908878817.png)\n\n## 8. context总结\n\n> 1. 不要把 Context 放在结构体中，要以参数的方式传递\n> 2. 以 Context 作为参数的函数方法，应该把 Context 作为第一个参数，放在第一位\n>3. 给一个函数方法传递 Context 的时候，不要传递 nil，如果不知道传递什么，就使用 context.TODO\n>4. Context 的 Value 相关方法应该传递必须的数据，不要什么数据都使用这个传递\n>5. Context 是线程安全的，可以放心的在多个 goroutine 中传递\n","slug":"go中context的使用","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clgxpu7yg002jvouv5dhabd8h","content":"<h1 id=\"go中context的使用\"><a href=\"#go中context的使用\" class=\"headerlink\" title=\"go中context的使用\"></a>go中context的使用</h1><p>版权声明：本文为CSDN博主「Word哥」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href=\"https://blog.csdn.net/finghting321/article/details/106012673/\">https://blog.csdn.net/finghting321/article/details/106012673/</a><br>————————————————</p>\n<h2 id=\"1-为什么需要context\"><a href=\"#1-为什么需要context\" class=\"headerlink\" title=\"1. 为什么需要context\"></a>1. 为什么需要context</h2><p>在并发程序中，由于超时、取消操作或者一些异常情况，往往需要进行抢占操作或者中断后续操作。</p>\n<p>举个例子：在 Go http包的Server中，每一个请求在都有一个对应的 goroutine 去处理。请求处理函数通常会启动额外的 goroutine 用来访问后端服务，比如数据库和RPC服务，用来处理一个请求的 goroutine 通常需要访问一些与请求特定的数据，比如终端用户的身份认证信息、验证相关的token、请求的截止时间。 当一个请求被取消或超时时，所有用来处理该请求的 goroutine 都应该迅速中断退出，然后系统才能释放这些 goroutine 占用的资源。context深入理解可参考</p>\n<span id=\"more\"></span>\n<p>context常用的使用场景：</p>\n<ol>\n<li>一个请求对应多个goroutine之间的数据交互</li>\n<li>超时控制</li>\n<li>上下文控制</li>\n</ol>\n<h2 id=\"2-context包简介\"><a href=\"#2-context包简介\" class=\"headerlink\" title=\"2. context包简介\"></a>2. context包简介</h2><p>context.Context接口：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Context <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 返回Context的超时时间（超时返回场景）</span>\n    <span class=\"token function\">Deadline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>deadline time<span class=\"token punctuation\">.</span>Time<span class=\"token punctuation\">,</span> ok <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span>\n \n    <span class=\"token comment\">// 在Context超时或取消时（即结束了）返回一个关闭的channel</span>\n    <span class=\"token comment\">// 即如果当前Context超时或取消时，Done方法会返回一个channel，然后其他地方就可以通过判断Done方法是否有返回（channel），如果有则说明Context已结束</span>\n    <span class=\"token comment\">// 故其可以作为广播通知其他相关方本Context已结束，请做相关处理。</span>\n    <span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;-</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n \n    <span class=\"token comment\">// 返回Context取消的原因</span>\n    <span class=\"token function\">Err</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span>\n    \n    <span class=\"token comment\">// 返回Context相关数据</span>\n    <span class=\"token function\">Value</span><span class=\"token punctuation\">(</span>key <span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>继承的Context，BackGound是所有Context的root，不能够被cancel。context包提供了三种context，分别是是普通context，超时context以及带值的context：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// 普通context，通常这样调用： ctx, cancel := context.WithCancel(context.Background())</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">WithCancel</span><span class=\"token punctuation\">(</span>parent Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>ctx Context<span class=\"token punctuation\">,</span> cancel CancelFunc<span class=\"token punctuation\">)</span>\n \n<span class=\"token comment\">// 带超时的context，超时之后会自动close对象的Done，与调用CancelFunc的效果一样</span>\n<span class=\"token comment\">// WithDeadline 明确地设置一个d指定的系统时钟时间，如果超过就触发超时</span>\n<span class=\"token comment\">// WithTimeout 设置一个相对的超时时间，也就是deadline设为timeout加上当前的系统时间</span>\n<span class=\"token comment\">// 因为两者事实上都依赖于系统时钟，所以可能存在微小的误差，所以官方不推荐把超时间隔设置得太小</span>\n<span class=\"token comment\">// 通常这样调用：ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">WithDeadline</span><span class=\"token punctuation\">(</span>parent Context<span class=\"token punctuation\">,</span> d time<span class=\"token punctuation\">.</span>Time<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>Context<span class=\"token punctuation\">,</span> CancelFunc<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">WithTimeout</span><span class=\"token punctuation\">(</span>parent Context<span class=\"token punctuation\">,</span> timeout time<span class=\"token punctuation\">.</span>Duration<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>Context<span class=\"token punctuation\">,</span> CancelFunc<span class=\"token punctuation\">)</span>\n \n<span class=\"token comment\">// 带有值的context，没有CancelFunc，所以它只用于值的多goroutine传递和共享</span>\n<span class=\"token comment\">// 通常这样调用：ctx := context.WithValue(context.Background(), \"key\", myValue)</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">WithValue</span><span class=\"token punctuation\">(</span>parent Context<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> val <span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> Context<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"3-场景举例—等待组\"><a href=\"#3-场景举例—等待组\" class=\"headerlink\" title=\"3. 场景举例—等待组\"></a>3. 场景举例—等待组</h2><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n \n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"fmt\"</span>\n    <span class=\"token string\">\"sync\"</span>\n    <span class=\"token string\">\"time\"</span>\n<span class=\"token punctuation\">)</span>\n \n<span class=\"token comment\">//数据接收服务主协程同子协程同步变量</span>\n<span class=\"token keyword\">var</span> wg sync<span class=\"token punctuation\">.</span>WaitGroup\n \n<span class=\"token keyword\">func</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>i <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"start 任务ID：\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span>\n    time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second <span class=\"token operator\">*</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    wg<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 每个goroutine运行完毕后就释放等待组的计数器</span>\n<span class=\"token punctuation\">&#125;</span>\n \n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    countThread <span class=\"token operator\">:=</span> <span class=\"token number\">2</span> <span class=\"token comment\">//runtime.NumCPU()</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> countThread<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">go</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n    wg<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>countThread<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 需要开启的goroutine等待组的计数器</span>\n \n    <span class=\"token comment\">//等待所有的任务都释放</span>\n    wg<span class=\"token punctuation\">.</span><span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"任务全部结束,退出\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>运行结果：</strong> </p>\n<img align=\"left\" src=\"http://rd7bcspti.hn-bkt.clouddn.com/02.png\">  \n\n<p><strong>分析：</strong>  对于等待组控制多并发的情况，只有所有的goroutine都结束了才算结束，只要有一个goroutine没有结束， 那么就会一直等，这显然对资源的释放是缓慢的；<br><strong>优点：</strong> 使用等待组的并发控制模型，适用于好多个goroutine协同做一件事情，因为每个goroutine做的都是这件事情的一部分，只有当全部的goroutine都完成，这件事情才算完成；<br><strong>缺点：</strong> 需要主动的通知某一个 goroutine 结束。<br><strong>疑问：</strong> 如果开启一个后台 goroutine 一直做事情，现在不需要了，那么就需要通知这个goroutine 结束，否则它会一直跑。</p>\n<h2 id=\"4-场景举例—通道-select\"><a href=\"#4-场景举例—通道-select\" class=\"headerlink\" title=\"4. 场景举例—通道+select\"></a>4. 场景举例—通道+select</h2><p>针对等待组场景遗留的问题，解决办法：</p>\n<blockquote>\n<ol>\n<li>设置全局变量，在通知goroutine要停止时，为全局变量赋值，但是这样必须保证线程安全，不可避免的必须为全局变量加锁，显得有失便利；</li>\n<li>使用chan + select多路复用的方式，就会优雅许多；</li>\n</ol>\n</blockquote>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n \n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"fmt\"</span>\n    <span class=\"token string\">\"time\"</span>\n<span class=\"token punctuation\">)</span>\n \n<span class=\"token keyword\">func</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>stop <span class=\"token keyword\">chan</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">select</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>stop<span class=\"token punctuation\">:</span>\n            fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"任务1结束退出\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span>\n        <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n            fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"任务1正在运行中\"</span><span class=\"token punctuation\">)</span>\n            time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n \n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    stop <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">go</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>stop<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 开启goroutine</span>\n \n    <span class=\"token comment\">// 运行一段时间后停止</span>\n    time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"停止任务1。。。\"</span><span class=\"token punctuation\">)</span>\n    stop <span class=\"token operator\">&lt;-</span> <span class=\"token boolean\">true</span>\n    time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>运行结果：</strong><br><img src=\"/upload/2022/05/image-1651908425418.png\" alt=\"image-1651908425418\"><br><strong>优点：</strong> 优雅、简单<br><strong>不足：</strong> 如果有很多 goroutine 都需要控制结束，并且这些 goroutine 又开启其它更多的goroutine ？</p>\n<h2 id=\"5-场景举例—普通context\"><a href=\"#5-场景举例—普通context\" class=\"headerlink\" title=\"5. 场景举例—普通context\"></a>5. 场景举例—普通context</h2><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n \n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"context\"</span>\n    <span class=\"token string\">\"fmt\"</span>\n    <span class=\"token string\">\"time\"</span>\n<span class=\"token punctuation\">)</span>\n \n<span class=\"token keyword\">func</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> id <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">select</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>ctx<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"任务%v结束退出\\n\"</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span>\n        <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n            fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"任务%v正在运行中\\n\"</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span>\n            time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n \n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//管理启动的协程</span>\n    ctx<span class=\"token punctuation\">,</span> cancel <span class=\"token operator\">:=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">WithCancel</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">Background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 开启多个goroutine，传入ctx</span>\n    <span class=\"token keyword\">go</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">go</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 运行一段时间后停止</span>\n    time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"停止任务1\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 使用context的cancel函数停止goroutine</span>\n    <span class=\"token comment\">// 为了检测监控过是否停止，如果没有监控输出，表示停止</span>\n    time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>说明：</strong> context.Background() 返回一个空的 Context，这个空的 Context 一般用于整个 Context 树的根节点。然后使用 context.WithCancel(parent) 函数，创建一个可取消的子 Context，然后当作参数传给 goroutine 使用，这样就可以使用这个子 Context 跟踪这个 goroutine。</p>\n<p><strong>运行结果：</strong><br><img src=\"/upload/2022/05/image-1651908618179.png\" alt=\"image-1651908618179\"></p>\n<h2 id=\"6-场景举例—Context超时\"><a href=\"#6-场景举例—Context超时\" class=\"headerlink\" title=\"6. 场景举例—Context超时\"></a>6. 场景举例—Context超时</h2><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n \n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"context\"</span>\n    <span class=\"token string\">\"fmt\"</span>\n    <span class=\"token string\">\"sync\"</span>\n    <span class=\"token string\">\"time\"</span>\n<span class=\"token punctuation\">)</span>\n \n<span class=\"token keyword\">func</span> <span class=\"token function\">coroutine</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> duration time<span class=\"token punctuation\">.</span>Duration<span class=\"token punctuation\">,</span> id <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> wg <span class=\"token operator\">*</span>sync<span class=\"token punctuation\">.</span>WaitGroup<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">select</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>ctx<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"协程 %d 退出\\n\"</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span>\n            wg<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span>\n        <span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>time<span class=\"token punctuation\">.</span><span class=\"token function\">After</span><span class=\"token punctuation\">(</span>duration<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"消息来自协程 %d\\n\"</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n \n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//使用WaitGroup等待所有的goroutine执行完毕，在收到&lt;-ctx.Done()的终止信号后使wg中需要等待的goroutine数量减一。</span>\n    <span class=\"token comment\">// 因为context只负责取消goroutine，不负责等待goroutine运行，所以需要配合一点辅助手段</span>\n    <span class=\"token comment\">//管理启动的协程</span>\n    wg <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>sync<span class=\"token punctuation\">.</span>WaitGroup<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n    ctx<span class=\"token punctuation\">,</span> cancel <span class=\"token operator\">:=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">WithTimeout</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">Background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token operator\">*</span>time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">defer</span> <span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span>\n        wg<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">go</span> <span class=\"token function\">coroutine</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token operator\">*</span>time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> wg<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n    wg<span class=\"token punctuation\">.</span><span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>说明：</strong> 代码中使用WaitGroup等待所有的goroutine执行完毕，在收到&lt;-ctx.Done()的终止信号后使wg中需要等待的goroutine数量减一， 因为context只负责取消goroutine，不负责等待goroutine运行，需要配合一点辅助手段<br><strong>运行结果：</strong> </p>\n<p><img src=\"/upload/2022/05/image-1651908781361.png\" alt=\"image-1651908781361\"></p>\n<h2 id=\"7-场景举例—Context传递元数据\"><a href=\"#7-场景举例—Context传递元数据\" class=\"headerlink\" title=\"7. 场景举例—Context传递元数据\"></a>7. 场景举例—Context传递元数据</h2><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n \n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"context\"</span>\n    <span class=\"token string\">\"fmt\"</span>\n    <span class=\"token string\">\"time\"</span>\n<span class=\"token punctuation\">)</span>\n \n<span class=\"token keyword\">var</span> key <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"name\"</span>\n \n<span class=\"token keyword\">func</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">select</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>ctx<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"任务%v结束退出\\n\"</span><span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">Value</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span>\n        <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n            fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"任务%v正在运行中\\n\"</span><span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">Value</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n \n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//管理启动的协程</span>\n    ctx<span class=\"token punctuation\">,</span> cancel <span class=\"token operator\">:=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">WithCancel</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">Background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 给ctx绑定键值，传递给goroutine</span>\n    valuectx <span class=\"token operator\">:=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">WithValue</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> <span class=\"token string\">\"【监控1】\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 开启goroutine，传入ctx</span>\n    <span class=\"token keyword\">go</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>valuectx<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 运行一段时间后停止</span>\n    time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"停止任务\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 使用context的cancel函数停止goroutine</span>\n    <span class=\"token comment\">// 为了检测监控过是否停止，如果没有监控输出，表示停止</span>\n    time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>运行结果：</strong><br><img src=\"/upload/2022/05/image-1651908878817.png\" alt=\"image-1651908878817\"></p>\n<h2 id=\"8-context总结\"><a href=\"#8-context总结\" class=\"headerlink\" title=\"8. context总结\"></a>8. context总结</h2><blockquote>\n<ol>\n<li>不要把 Context 放在结构体中，要以参数的方式传递</li>\n<li>以 Context 作为参数的函数方法，应该把 Context 作为第一个参数，放在第一位</li>\n<li>给一个函数方法传递 Context 的时候，不要传递 nil，如果不知道传递什么，就使用 context.TODO</li>\n<li>Context 的 Value 相关方法应该传递必须的数据，不要什么数据都使用这个传递</li>\n<li>Context 是线程安全的，可以放心的在多个 goroutine 中传递</li>\n</ol>\n</blockquote>\n","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}},"excerpt":"<h1 id=\"go中context的使用\"><a href=\"#go中context的使用\" class=\"headerlink\" title=\"go中context的使用\"></a>go中context的使用</h1><p>版权声明：本文为CSDN博主「Word哥」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href=\"https://blog.csdn.net/finghting321/article/details/106012673/\">https://blog.csdn.net/finghting321/article/details/106012673/</a><br>————————————————</p>\n<h2 id=\"1-为什么需要context\"><a href=\"#1-为什么需要context\" class=\"headerlink\" title=\"1. 为什么需要context\"></a>1. 为什么需要context</h2><p>在并发程序中，由于超时、取消操作或者一些异常情况，往往需要进行抢占操作或者中断后续操作。</p>\n<p>举个例子：在 Go http包的Server中，每一个请求在都有一个对应的 goroutine 去处理。请求处理函数通常会启动额外的 goroutine 用来访问后端服务，比如数据库和RPC服务，用来处理一个请求的 goroutine 通常需要访问一些与请求特定的数据，比如终端用户的身份认证信息、验证相关的token、请求的截止时间。 当一个请求被取消或超时时，所有用来处理该请求的 goroutine 都应该迅速中断退出，然后系统才能释放这些 goroutine 占用的资源。context深入理解可参考</p>","more":"<p>context常用的使用场景：</p>\n<ol>\n<li>一个请求对应多个goroutine之间的数据交互</li>\n<li>超时控制</li>\n<li>上下文控制</li>\n</ol>\n<h2 id=\"2-context包简介\"><a href=\"#2-context包简介\" class=\"headerlink\" title=\"2. context包简介\"></a>2. context包简介</h2><p>context.Context接口：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Context <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 返回Context的超时时间（超时返回场景）</span>\n    <span class=\"token function\">Deadline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>deadline time<span class=\"token punctuation\">.</span>Time<span class=\"token punctuation\">,</span> ok <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span>\n \n    <span class=\"token comment\">// 在Context超时或取消时（即结束了）返回一个关闭的channel</span>\n    <span class=\"token comment\">// 即如果当前Context超时或取消时，Done方法会返回一个channel，然后其他地方就可以通过判断Done方法是否有返回（channel），如果有则说明Context已结束</span>\n    <span class=\"token comment\">// 故其可以作为广播通知其他相关方本Context已结束，请做相关处理。</span>\n    <span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;-</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n \n    <span class=\"token comment\">// 返回Context取消的原因</span>\n    <span class=\"token function\">Err</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span>\n    \n    <span class=\"token comment\">// 返回Context相关数据</span>\n    <span class=\"token function\">Value</span><span class=\"token punctuation\">(</span>key <span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>继承的Context，BackGound是所有Context的root，不能够被cancel。context包提供了三种context，分别是是普通context，超时context以及带值的context：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// 普通context，通常这样调用： ctx, cancel := context.WithCancel(context.Background())</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">WithCancel</span><span class=\"token punctuation\">(</span>parent Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>ctx Context<span class=\"token punctuation\">,</span> cancel CancelFunc<span class=\"token punctuation\">)</span>\n \n<span class=\"token comment\">// 带超时的context，超时之后会自动close对象的Done，与调用CancelFunc的效果一样</span>\n<span class=\"token comment\">// WithDeadline 明确地设置一个d指定的系统时钟时间，如果超过就触发超时</span>\n<span class=\"token comment\">// WithTimeout 设置一个相对的超时时间，也就是deadline设为timeout加上当前的系统时间</span>\n<span class=\"token comment\">// 因为两者事实上都依赖于系统时钟，所以可能存在微小的误差，所以官方不推荐把超时间隔设置得太小</span>\n<span class=\"token comment\">// 通常这样调用：ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">WithDeadline</span><span class=\"token punctuation\">(</span>parent Context<span class=\"token punctuation\">,</span> d time<span class=\"token punctuation\">.</span>Time<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>Context<span class=\"token punctuation\">,</span> CancelFunc<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">WithTimeout</span><span class=\"token punctuation\">(</span>parent Context<span class=\"token punctuation\">,</span> timeout time<span class=\"token punctuation\">.</span>Duration<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>Context<span class=\"token punctuation\">,</span> CancelFunc<span class=\"token punctuation\">)</span>\n \n<span class=\"token comment\">// 带有值的context，没有CancelFunc，所以它只用于值的多goroutine传递和共享</span>\n<span class=\"token comment\">// 通常这样调用：ctx := context.WithValue(context.Background(), \"key\", myValue)</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">WithValue</span><span class=\"token punctuation\">(</span>parent Context<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> val <span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> Context<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"3-场景举例—等待组\"><a href=\"#3-场景举例—等待组\" class=\"headerlink\" title=\"3. 场景举例—等待组\"></a>3. 场景举例—等待组</h2><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n \n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"fmt\"</span>\n    <span class=\"token string\">\"sync\"</span>\n    <span class=\"token string\">\"time\"</span>\n<span class=\"token punctuation\">)</span>\n \n<span class=\"token comment\">//数据接收服务主协程同子协程同步变量</span>\n<span class=\"token keyword\">var</span> wg sync<span class=\"token punctuation\">.</span>WaitGroup\n \n<span class=\"token keyword\">func</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>i <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"start 任务ID：\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span>\n    time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second <span class=\"token operator\">*</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    wg<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 每个goroutine运行完毕后就释放等待组的计数器</span>\n<span class=\"token punctuation\">&#125;</span>\n \n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    countThread <span class=\"token operator\">:=</span> <span class=\"token number\">2</span> <span class=\"token comment\">//runtime.NumCPU()</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> countThread<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">go</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n    wg<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>countThread<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 需要开启的goroutine等待组的计数器</span>\n \n    <span class=\"token comment\">//等待所有的任务都释放</span>\n    wg<span class=\"token punctuation\">.</span><span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"任务全部结束,退出\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>运行结果：</strong> </p>\n<img align=\"left\" src=\"http://rd7bcspti.hn-bkt.clouddn.com/02.png\">  \n\n<p><strong>分析：</strong>  对于等待组控制多并发的情况，只有所有的goroutine都结束了才算结束，只要有一个goroutine没有结束， 那么就会一直等，这显然对资源的释放是缓慢的；<br><strong>优点：</strong> 使用等待组的并发控制模型，适用于好多个goroutine协同做一件事情，因为每个goroutine做的都是这件事情的一部分，只有当全部的goroutine都完成，这件事情才算完成；<br><strong>缺点：</strong> 需要主动的通知某一个 goroutine 结束。<br><strong>疑问：</strong> 如果开启一个后台 goroutine 一直做事情，现在不需要了，那么就需要通知这个goroutine 结束，否则它会一直跑。</p>\n<h2 id=\"4-场景举例—通道-select\"><a href=\"#4-场景举例—通道-select\" class=\"headerlink\" title=\"4. 场景举例—通道+select\"></a>4. 场景举例—通道+select</h2><p>针对等待组场景遗留的问题，解决办法：</p>\n<blockquote>\n<ol>\n<li>设置全局变量，在通知goroutine要停止时，为全局变量赋值，但是这样必须保证线程安全，不可避免的必须为全局变量加锁，显得有失便利；</li>\n<li>使用chan + select多路复用的方式，就会优雅许多；</li>\n</ol>\n</blockquote>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n \n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"fmt\"</span>\n    <span class=\"token string\">\"time\"</span>\n<span class=\"token punctuation\">)</span>\n \n<span class=\"token keyword\">func</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>stop <span class=\"token keyword\">chan</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">select</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>stop<span class=\"token punctuation\">:</span>\n            fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"任务1结束退出\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span>\n        <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n            fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"任务1正在运行中\"</span><span class=\"token punctuation\">)</span>\n            time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n \n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    stop <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">go</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>stop<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 开启goroutine</span>\n \n    <span class=\"token comment\">// 运行一段时间后停止</span>\n    time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"停止任务1。。。\"</span><span class=\"token punctuation\">)</span>\n    stop <span class=\"token operator\">&lt;-</span> <span class=\"token boolean\">true</span>\n    time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>运行结果：</strong><br><img src=\"/upload/2022/05/image-1651908425418.png\" alt=\"image-1651908425418\"><br><strong>优点：</strong> 优雅、简单<br><strong>不足：</strong> 如果有很多 goroutine 都需要控制结束，并且这些 goroutine 又开启其它更多的goroutine ？</p>\n<h2 id=\"5-场景举例—普通context\"><a href=\"#5-场景举例—普通context\" class=\"headerlink\" title=\"5. 场景举例—普通context\"></a>5. 场景举例—普通context</h2><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n \n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"context\"</span>\n    <span class=\"token string\">\"fmt\"</span>\n    <span class=\"token string\">\"time\"</span>\n<span class=\"token punctuation\">)</span>\n \n<span class=\"token keyword\">func</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> id <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">select</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>ctx<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"任务%v结束退出\\n\"</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span>\n        <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n            fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"任务%v正在运行中\\n\"</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span>\n            time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n \n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//管理启动的协程</span>\n    ctx<span class=\"token punctuation\">,</span> cancel <span class=\"token operator\">:=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">WithCancel</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">Background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 开启多个goroutine，传入ctx</span>\n    <span class=\"token keyword\">go</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">go</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 运行一段时间后停止</span>\n    time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"停止任务1\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 使用context的cancel函数停止goroutine</span>\n    <span class=\"token comment\">// 为了检测监控过是否停止，如果没有监控输出，表示停止</span>\n    time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>说明：</strong> context.Background() 返回一个空的 Context，这个空的 Context 一般用于整个 Context 树的根节点。然后使用 context.WithCancel(parent) 函数，创建一个可取消的子 Context，然后当作参数传给 goroutine 使用，这样就可以使用这个子 Context 跟踪这个 goroutine。</p>\n<p><strong>运行结果：</strong><br><img src=\"/upload/2022/05/image-1651908618179.png\" alt=\"image-1651908618179\"></p>\n<h2 id=\"6-场景举例—Context超时\"><a href=\"#6-场景举例—Context超时\" class=\"headerlink\" title=\"6. 场景举例—Context超时\"></a>6. 场景举例—Context超时</h2><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n \n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"context\"</span>\n    <span class=\"token string\">\"fmt\"</span>\n    <span class=\"token string\">\"sync\"</span>\n    <span class=\"token string\">\"time\"</span>\n<span class=\"token punctuation\">)</span>\n \n<span class=\"token keyword\">func</span> <span class=\"token function\">coroutine</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> duration time<span class=\"token punctuation\">.</span>Duration<span class=\"token punctuation\">,</span> id <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> wg <span class=\"token operator\">*</span>sync<span class=\"token punctuation\">.</span>WaitGroup<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">select</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>ctx<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"协程 %d 退出\\n\"</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span>\n            wg<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span>\n        <span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>time<span class=\"token punctuation\">.</span><span class=\"token function\">After</span><span class=\"token punctuation\">(</span>duration<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"消息来自协程 %d\\n\"</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n \n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//使用WaitGroup等待所有的goroutine执行完毕，在收到&lt;-ctx.Done()的终止信号后使wg中需要等待的goroutine数量减一。</span>\n    <span class=\"token comment\">// 因为context只负责取消goroutine，不负责等待goroutine运行，所以需要配合一点辅助手段</span>\n    <span class=\"token comment\">//管理启动的协程</span>\n    wg <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>sync<span class=\"token punctuation\">.</span>WaitGroup<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n    ctx<span class=\"token punctuation\">,</span> cancel <span class=\"token operator\">:=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">WithTimeout</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">Background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token operator\">*</span>time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">defer</span> <span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span>\n        wg<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">go</span> <span class=\"token function\">coroutine</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token operator\">*</span>time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> wg<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n    wg<span class=\"token punctuation\">.</span><span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>说明：</strong> 代码中使用WaitGroup等待所有的goroutine执行完毕，在收到&lt;-ctx.Done()的终止信号后使wg中需要等待的goroutine数量减一， 因为context只负责取消goroutine，不负责等待goroutine运行，需要配合一点辅助手段<br><strong>运行结果：</strong> </p>\n<p><img src=\"/upload/2022/05/image-1651908781361.png\" alt=\"image-1651908781361\"></p>\n<h2 id=\"7-场景举例—Context传递元数据\"><a href=\"#7-场景举例—Context传递元数据\" class=\"headerlink\" title=\"7. 场景举例—Context传递元数据\"></a>7. 场景举例—Context传递元数据</h2><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n \n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"context\"</span>\n    <span class=\"token string\">\"fmt\"</span>\n    <span class=\"token string\">\"time\"</span>\n<span class=\"token punctuation\">)</span>\n \n<span class=\"token keyword\">var</span> key <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"name\"</span>\n \n<span class=\"token keyword\">func</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">select</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>ctx<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"任务%v结束退出\\n\"</span><span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">Value</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span>\n        <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n            fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"任务%v正在运行中\\n\"</span><span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">Value</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n \n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//管理启动的协程</span>\n    ctx<span class=\"token punctuation\">,</span> cancel <span class=\"token operator\">:=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">WithCancel</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">Background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 给ctx绑定键值，传递给goroutine</span>\n    valuectx <span class=\"token operator\">:=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">WithValue</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> <span class=\"token string\">\"【监控1】\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 开启goroutine，传入ctx</span>\n    <span class=\"token keyword\">go</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>valuectx<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 运行一段时间后停止</span>\n    time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"停止任务\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 使用context的cancel函数停止goroutine</span>\n    <span class=\"token comment\">// 为了检测监控过是否停止，如果没有监控输出，表示停止</span>\n    time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>运行结果：</strong><br><img src=\"/upload/2022/05/image-1651908878817.png\" alt=\"image-1651908878817\"></p>\n<h2 id=\"8-context总结\"><a href=\"#8-context总结\" class=\"headerlink\" title=\"8. context总结\"></a>8. context总结</h2><blockquote>\n<ol>\n<li>不要把 Context 放在结构体中，要以参数的方式传递</li>\n<li>以 Context 作为参数的函数方法，应该把 Context 作为第一个参数，放在第一位</li>\n<li>给一个函数方法传递 Context 的时候，不要传递 nil，如果不知道传递什么，就使用 context.TODO</li>\n<li>Context 的 Value 相关方法应该传递必须的数据，不要什么数据都使用这个传递</li>\n<li>Context 是线程安全的，可以放心的在多个 goroutine 中传递</li>\n</ol>\n</blockquote>"},{"title":"go 中 new和make的区别","date":"2022-05-07T06:16:01.018Z","updated":"2022-05-07T06:16:01.018Z","url":"/archives/go-zhong-new-he-make-de-qu-bie","_content":"\n# go中new和make的区别\n\nnew和make是用于go中分配内存的，简单来说，new只分配内存，make用于初始化slice、map以及channel。\n\nGo语言中的 new 和 make 主要区别如下：\nmake 只能用来分配及初始化类型为 slice、map、chan 的数据。new 可以分配任意类型的数据；\nnew 分配返回的是指针，即类型 *Type。make 返回引用，即 Type；\nnew 分配的空间被清零。make 分配空间后，会进行初始化；\n","source":"_posts/go中new和make的区别.md","raw":"---\ntitle: go 中 new和make的区别\ndate: 2022-05-07 14:16:01.018\nupdated: 2022-05-07 14:16:01.018\nurl: /archives/go-zhong-new-he-make-de-qu-bie\ncategories: \n- golang\ntags: \n- golang\n---\n\n# go中new和make的区别\n\nnew和make是用于go中分配内存的，简单来说，new只分配内存，make用于初始化slice、map以及channel。\n\nGo语言中的 new 和 make 主要区别如下：\nmake 只能用来分配及初始化类型为 slice、map、chan 的数据。new 可以分配任意类型的数据；\nnew 分配返回的是指针，即类型 *Type。make 返回引用，即 Type；\nnew 分配的空间被清零。make 分配空间后，会进行初始化；\n","slug":"go中new和make的区别","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clgxpu7yh002nvouv4boscji6","content":"<h1 id=\"go中new和make的区别\"><a href=\"#go中new和make的区别\" class=\"headerlink\" title=\"go中new和make的区别\"></a>go中new和make的区别</h1><p>new和make是用于go中分配内存的，简单来说，new只分配内存，make用于初始化slice、map以及channel。</p>\n<p>Go语言中的 new 和 make 主要区别如下：<br>make 只能用来分配及初始化类型为 slice、map、chan 的数据。new 可以分配任意类型的数据；<br>new 分配返回的是指针，即类型 *Type。make 返回引用，即 Type；<br>new 分配的空间被清零。make 分配空间后，会进行初始化；</p>\n","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}},"excerpt":"","more":"<h1 id=\"go中new和make的区别\"><a href=\"#go中new和make的区别\" class=\"headerlink\" title=\"go中new和make的区别\"></a>go中new和make的区别</h1><p>new和make是用于go中分配内存的，简单来说，new只分配内存，make用于初始化slice、map以及channel。</p>\n<p>Go语言中的 new 和 make 主要区别如下：<br>make 只能用来分配及初始化类型为 slice、map、chan 的数据。new 可以分配任意类型的数据；<br>new 分配返回的是指针，即类型 *Type。make 返回引用，即 Type；<br>new 分配的空间被清零。make 分配空间后，会进行初始化；</p>\n"},{"title":"linux 命令行配置代理","date":"2022-02-16T07:52:21.277Z","updated":"2022-02-16T07:52:21.277Z","url":"/archives/linuxming-ling-xing-pei-zhi-dai-li","_content":"\n# 命令行配置代理\n\n```bash\nexport http_proxy=http://127.0.0.1:1087\n\nexport https_proxy=$http_proxy\n```\n\n## 此处的IP和端口需要根据具体你代理的实际信息填写，可查看VPN客户端的config.json\n\n```json\n\"inbounds\": [\n {\n \"listen\": \"127.0.0.1\",\n \"protocol\": \"socks\",\n \"settings\": {\n \"udp\": false,\n \"auth\": \"noauth\"\n },\n \"port\": \"1080\"\n },\n {\n \"listen\": \"127.0.0.1\",\n \"protocol\": \"http\",\n \"settings\": {\n \"timeout\": 360\n },\n \"port\": \"1087\"\n }\n```\n\n检查命令行配置是否完成\n\n```bash\ncurl -i www.google.com\n```\n\n收到200响应表示成功","source":"_posts/linux 命令行配置代理.md","raw":"---\ntitle: linux 命令行配置代理\ndate: 2022-02-16 15:52:21.277\nupdated: 2022-02-16 15:52:21.277\nurl: /archives/linuxming-ling-xing-pei-zhi-dai-li\ncategories: \n- linux\ntags: \n- 代理\n- linux\n- bash\n---\n\n# 命令行配置代理\n\n```bash\nexport http_proxy=http://127.0.0.1:1087\n\nexport https_proxy=$http_proxy\n```\n\n## 此处的IP和端口需要根据具体你代理的实际信息填写，可查看VPN客户端的config.json\n\n```json\n\"inbounds\": [\n {\n \"listen\": \"127.0.0.1\",\n \"protocol\": \"socks\",\n \"settings\": {\n \"udp\": false,\n \"auth\": \"noauth\"\n },\n \"port\": \"1080\"\n },\n {\n \"listen\": \"127.0.0.1\",\n \"protocol\": \"http\",\n \"settings\": {\n \"timeout\": 360\n },\n \"port\": \"1087\"\n }\n```\n\n检查命令行配置是否完成\n\n```bash\ncurl -i www.google.com\n```\n\n收到200响应表示成功","slug":"linux 命令行配置代理","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clgxpu7yj002rvouv9wvs6g4y","content":"<h1 id=\"命令行配置代理\"><a href=\"#命令行配置代理\" class=\"headerlink\" title=\"命令行配置代理\"></a>命令行配置代理</h1><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">http_proxy</span><span class=\"token operator\">=</span>http://127.0.0.1:1087\n\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">https_proxy</span><span class=\"token operator\">=</span><span class=\"token variable\">$http_proxy</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"此处的IP和端口需要根据具体你代理的实际信息填写，可查看VPN客户端的config-json\"><a href=\"#此处的IP和端口需要根据具体你代理的实际信息填写，可查看VPN客户端的config-json\" class=\"headerlink\" title=\"此处的IP和端口需要根据具体你代理的实际信息填写，可查看VPN客户端的config.json\"></a>此处的IP和端口需要根据具体你代理的实际信息填写，可查看VPN客户端的config.json</h2><pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token property\">\"inbounds\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n <span class=\"token punctuation\">&#123;</span>\n <span class=\"token property\">\"listen\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">,</span>\n <span class=\"token property\">\"protocol\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"socks\"</span><span class=\"token punctuation\">,</span>\n <span class=\"token property\">\"settings\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n <span class=\"token property\">\"udp\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n <span class=\"token property\">\"auth\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"noauth\"</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n <span class=\"token property\">\"port\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1080\"</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">&#123;</span>\n <span class=\"token property\">\"listen\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">,</span>\n <span class=\"token property\">\"protocol\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"http\"</span><span class=\"token punctuation\">,</span>\n <span class=\"token property\">\"settings\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n <span class=\"token property\">\"timeout\"</span><span class=\"token operator\">:</span> <span class=\"token number\">360</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n <span class=\"token property\">\"port\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1087\"</span>\n <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>检查命令行配置是否完成</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> -i www.google.com<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>收到200响应表示成功</p>\n","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}},"excerpt":"","more":"<h1 id=\"命令行配置代理\"><a href=\"#命令行配置代理\" class=\"headerlink\" title=\"命令行配置代理\"></a>命令行配置代理</h1><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">http_proxy</span><span class=\"token operator\">=</span>http://127.0.0.1:1087\n\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">https_proxy</span><span class=\"token operator\">=</span><span class=\"token variable\">$http_proxy</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"此处的IP和端口需要根据具体你代理的实际信息填写，可查看VPN客户端的config-json\"><a href=\"#此处的IP和端口需要根据具体你代理的实际信息填写，可查看VPN客户端的config-json\" class=\"headerlink\" title=\"此处的IP和端口需要根据具体你代理的实际信息填写，可查看VPN客户端的config.json\"></a>此处的IP和端口需要根据具体你代理的实际信息填写，可查看VPN客户端的config.json</h2><pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token property\">\"inbounds\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n <span class=\"token punctuation\">&#123;</span>\n <span class=\"token property\">\"listen\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">,</span>\n <span class=\"token property\">\"protocol\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"socks\"</span><span class=\"token punctuation\">,</span>\n <span class=\"token property\">\"settings\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n <span class=\"token property\">\"udp\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n <span class=\"token property\">\"auth\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"noauth\"</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n <span class=\"token property\">\"port\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1080\"</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">&#123;</span>\n <span class=\"token property\">\"listen\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">,</span>\n <span class=\"token property\">\"protocol\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"http\"</span><span class=\"token punctuation\">,</span>\n <span class=\"token property\">\"settings\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n <span class=\"token property\">\"timeout\"</span><span class=\"token operator\">:</span> <span class=\"token number\">360</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n <span class=\"token property\">\"port\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1087\"</span>\n <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>检查命令行配置是否完成</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> -i www.google.com<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>收到200响应表示成功</p>\n"},{"title":"mysql 命令行备份数据","date":"2022-02-16T07:56:50.464Z","updated":"2022-02-16T07:57:00.450Z","url":"/archives/mysqlming-ling-xing-bei-fen-shu-ju","description":"mysql通过命令行进行备份数据库、表以及恢复数据","_content":"\n[桄椿](https://www.cnblogs.com/gcixx/)\n\n## [mysql命令行备份方法](https://www.cnblogs.com/gcixx/p/11145473.html)\n\n一、mysql备份\n\n1、备份命令\n\n格式：mysqldump -h主机IP -P端口 -u用户名 -p密码 --database 数据库名 > 文件名.sql\n\n```\n# 本地备份可以不添加端口和主机IP，username、passward是数据库用户名和密码\nmysqldump -h *.*.*.* -p 3306 -u username -p password --database mysql > /data/backup/mysql.sql\n```\n\n2、备份压缩\n\n格式：mysqldump -h主机IP -P端口 -u用户名 -p密码 --database 数据库名 | gzip > 文件名.sql.gz\n\n```\n# 导出的数据有可能比较大，不好备份到远程，这时候就需要进行压缩\nmysqldump -h *.*.*.* -p 3306 -u username -p password --database mysql | gzip > /data/backup/mysql.sql.gz\n```\n\n3、备份同个库多个表\n\n格式：mysqldump -h主机IP -P端口 -u用户名 -p密码 --database 数据库名 表1 表2 .... > 文件名.sql\n\n```\nmysqldump -h *.*.*.* -p 3306 -u username -p password mysql1 mysql2 mysql3> /data/backup/mysql_db.sql\n```\n\n4、同时备份多个库\n\n格式：mysqldump -h主机IP -P端口 -u用户名 -p密码 --databases 数据库名1 数据库名2 数据库名3 > 文件名.sql\n\n```\nmysqldump -h *.*.*.* -p 3306 -u username -p password --databases mysql1 mysql2 mysql3 > /data/backup/mysql_db.sql\n```\n\n5、备份实例上所有的数据库\n\n格式：mysqldump -h主机IP -P端口 -u用户名 -p密码 --all-databases > 文件名.sql\n\n```\nmysqldump -h *.*.*.* -p 3306 -u username -p password --all-databases > /data/backup/mysql_db.sql\n```\n\n6、备份数据出带删除数据库或者表的sql备份\n\n格式：mysqldump -h主机IP -P端口 -u用户名 -p密码 --add-drop-table --add-drop-database 数据库名 > 文件名.sql\n\n```\nmysqldump -h *.*.*.* -p 3306 -u username -p password --add-drop-table --add-drop-database mysql > /data/backup/mysql_db.sql\n```\n\n7、备份数据库结构，不备份数据\n\n格式：mysqldump -h主机IP -P端口 -u用户名 -p密码 --no-data 数据库名1 数据库名2 数据库名3 > 文件名.sql\n\n```\nmysqldump -h *.*.*.* -p 3306 -u username -p password --no-data –databases mysql1 mysql2 mysql3 > /data/backup/structure_db.sql\n```\n\n8、还原MySQL数据库的命令\n\n```\n# database为数据库名\nmysql -h *.*.*.* -u username -p password database < backupfile.sql\n```\n\n9、还原压缩的MySQL数据库\n\n```\n# database为数据库名\ngunzip < backupfile.sql.gz | mysql -u username -p password database\n```\n\n10、将数据库转移到新服务器\n\n```\n# database为数据库名\nmysqldump -u username -p password database | mysql –host=*.*.*.* -C database\n```\n\n11、--master-data 和--single-transaction\n\n 在mysqldump中使用--master-data=2，会记录binlog文件和position的信息 。\n\n --single-transaction会将隔离级别设置成repeatable-commited。\n\n12、导入数据库\n\n 常用source命令，用use进入到某个数据库，mysql>source d:\\test.sql，后面的参数为脚本文件。\n\n13、查看binlog日志\n\n 查看binlog日志可用命令 mysqlbinlog binlog日志名称|more\n\n14、general_log\n\n General_log记录数据库的任何操作，查看general_log 的状态和位置可以用命令show variables like \"general_log%\" ,开启general_log可以用命令set global general_log=on\n\n二、增量备份\n\n1、首先做一次完整备份：\n\n```\n# 这时候就会得到一个全备文件test.sql\nmysqldump -h *.*.*.* -u username -p passward  -p 3310 --single-transaction  --master-data=2  test>test.sql\n```\n\n在sql文件中我们会看到：\n\n```\n-- 是指备份后所有的更改将会保存到bin-log.000002二进制文件中。\nCHANGE MASTER TO MASTER_LOG_FILE='bin-log.000002', MASTER_LOG_POS=107;\n```\n\n2、在test库的t_student表中增加两条记录，然后执行flush logs命令。\n\n 这时将会产生一个新的二进制日志文件bin-log.000003，bin-log.000002则保存了全备过后的所有更改，既增加记录的操作也保存在了bin-log.00002中。\n\n3、再在test库中的a表中增加两条记录，然后误删除t_student表和a表。\n\n a中增加记录的操作和删除表a和t_student的操作都记录在bin-log.000003中。\n\n## 三、恢复\n\n1、首先导入全备数据\n\n```\n# 也可以直接在mysql命令行下面用source导入\nmysql -h *.*.*.* -u username -p passward  -p 3310 < test.sql\n```\n\n2、恢复bin-log.000002\n\n```\nmysqlbinlog bin-log.000002 |mysql -h *.*.*.* -u username -p passward -p 3310\n```\n\n3、恢复部分 bin-log.000003\n\n在general_log中找到误删除的时间点，然后更加对应的时间点到bin-log.000003中找到相应的position点，需要恢复到误删除的前面一个position点。\n\n可以用如下参数来控制binlog的区间\n\n--start-position 开始点 --stop-position 结束点\n\n--start-date 开始时间 --stop-date 结束时间\n\n找到恢复点后，既可以开始恢复。\n\n```\nmysqlbinlog mysql-bin.000003 --stop-position=208 |mysql -h *.*.*.* -u username -p passward -p 3310 \n```\n","source":"_posts/mysql命令行备份数据.md","raw":"---\ntitle: mysql 命令行备份数据\ndate: 2022-02-16 15:56:50.464\nupdated: 2022-02-16 15:57:00.45\nurl: /archives/mysqlming-ling-xing-bei-fen-shu-ju\ndescription: mysql通过命令行进行备份数据库、表以及恢复数据\ncategories: \n- mysql\ntags: \n- 备份\n- 恢复\n- mysql\n---\n\n[桄椿](https://www.cnblogs.com/gcixx/)\n\n## [mysql命令行备份方法](https://www.cnblogs.com/gcixx/p/11145473.html)\n\n一、mysql备份\n\n1、备份命令\n\n格式：mysqldump -h主机IP -P端口 -u用户名 -p密码 --database 数据库名 > 文件名.sql\n\n```\n# 本地备份可以不添加端口和主机IP，username、passward是数据库用户名和密码\nmysqldump -h *.*.*.* -p 3306 -u username -p password --database mysql > /data/backup/mysql.sql\n```\n\n2、备份压缩\n\n格式：mysqldump -h主机IP -P端口 -u用户名 -p密码 --database 数据库名 | gzip > 文件名.sql.gz\n\n```\n# 导出的数据有可能比较大，不好备份到远程，这时候就需要进行压缩\nmysqldump -h *.*.*.* -p 3306 -u username -p password --database mysql | gzip > /data/backup/mysql.sql.gz\n```\n\n3、备份同个库多个表\n\n格式：mysqldump -h主机IP -P端口 -u用户名 -p密码 --database 数据库名 表1 表2 .... > 文件名.sql\n\n```\nmysqldump -h *.*.*.* -p 3306 -u username -p password mysql1 mysql2 mysql3> /data/backup/mysql_db.sql\n```\n\n4、同时备份多个库\n\n格式：mysqldump -h主机IP -P端口 -u用户名 -p密码 --databases 数据库名1 数据库名2 数据库名3 > 文件名.sql\n\n```\nmysqldump -h *.*.*.* -p 3306 -u username -p password --databases mysql1 mysql2 mysql3 > /data/backup/mysql_db.sql\n```\n\n5、备份实例上所有的数据库\n\n格式：mysqldump -h主机IP -P端口 -u用户名 -p密码 --all-databases > 文件名.sql\n\n```\nmysqldump -h *.*.*.* -p 3306 -u username -p password --all-databases > /data/backup/mysql_db.sql\n```\n\n6、备份数据出带删除数据库或者表的sql备份\n\n格式：mysqldump -h主机IP -P端口 -u用户名 -p密码 --add-drop-table --add-drop-database 数据库名 > 文件名.sql\n\n```\nmysqldump -h *.*.*.* -p 3306 -u username -p password --add-drop-table --add-drop-database mysql > /data/backup/mysql_db.sql\n```\n\n7、备份数据库结构，不备份数据\n\n格式：mysqldump -h主机IP -P端口 -u用户名 -p密码 --no-data 数据库名1 数据库名2 数据库名3 > 文件名.sql\n\n```\nmysqldump -h *.*.*.* -p 3306 -u username -p password --no-data –databases mysql1 mysql2 mysql3 > /data/backup/structure_db.sql\n```\n\n8、还原MySQL数据库的命令\n\n```\n# database为数据库名\nmysql -h *.*.*.* -u username -p password database < backupfile.sql\n```\n\n9、还原压缩的MySQL数据库\n\n```\n# database为数据库名\ngunzip < backupfile.sql.gz | mysql -u username -p password database\n```\n\n10、将数据库转移到新服务器\n\n```\n# database为数据库名\nmysqldump -u username -p password database | mysql –host=*.*.*.* -C database\n```\n\n11、--master-data 和--single-transaction\n\n 在mysqldump中使用--master-data=2，会记录binlog文件和position的信息 。\n\n --single-transaction会将隔离级别设置成repeatable-commited。\n\n12、导入数据库\n\n 常用source命令，用use进入到某个数据库，mysql>source d:\\test.sql，后面的参数为脚本文件。\n\n13、查看binlog日志\n\n 查看binlog日志可用命令 mysqlbinlog binlog日志名称|more\n\n14、general_log\n\n General_log记录数据库的任何操作，查看general_log 的状态和位置可以用命令show variables like \"general_log%\" ,开启general_log可以用命令set global general_log=on\n\n二、增量备份\n\n1、首先做一次完整备份：\n\n```\n# 这时候就会得到一个全备文件test.sql\nmysqldump -h *.*.*.* -u username -p passward  -p 3310 --single-transaction  --master-data=2  test>test.sql\n```\n\n在sql文件中我们会看到：\n\n```\n-- 是指备份后所有的更改将会保存到bin-log.000002二进制文件中。\nCHANGE MASTER TO MASTER_LOG_FILE='bin-log.000002', MASTER_LOG_POS=107;\n```\n\n2、在test库的t_student表中增加两条记录，然后执行flush logs命令。\n\n 这时将会产生一个新的二进制日志文件bin-log.000003，bin-log.000002则保存了全备过后的所有更改，既增加记录的操作也保存在了bin-log.00002中。\n\n3、再在test库中的a表中增加两条记录，然后误删除t_student表和a表。\n\n a中增加记录的操作和删除表a和t_student的操作都记录在bin-log.000003中。\n\n## 三、恢复\n\n1、首先导入全备数据\n\n```\n# 也可以直接在mysql命令行下面用source导入\nmysql -h *.*.*.* -u username -p passward  -p 3310 < test.sql\n```\n\n2、恢复bin-log.000002\n\n```\nmysqlbinlog bin-log.000002 |mysql -h *.*.*.* -u username -p passward -p 3310\n```\n\n3、恢复部分 bin-log.000003\n\n在general_log中找到误删除的时间点，然后更加对应的时间点到bin-log.000003中找到相应的position点，需要恢复到误删除的前面一个position点。\n\n可以用如下参数来控制binlog的区间\n\n--start-position 开始点 --stop-position 结束点\n\n--start-date 开始时间 --stop-date 结束时间\n\n找到恢复点后，既可以开始恢复。\n\n```\nmysqlbinlog mysql-bin.000003 --stop-position=208 |mysql -h *.*.*.* -u username -p passward -p 3310 \n```\n","slug":"mysql命令行备份数据","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clgxpu7yk002uvouv67fzbj91","content":"<p><a href=\"https://www.cnblogs.com/gcixx/\">桄椿</a></p>\n<h2 id=\"mysql命令行备份方法\"><a href=\"#mysql命令行备份方法\" class=\"headerlink\" title=\"mysql命令行备份方法\"></a><a href=\"https://www.cnblogs.com/gcixx/p/11145473.html\">mysql命令行备份方法</a></h2><p>一、mysql备份</p>\n<p>1、备份命令</p>\n<p>格式：mysqldump -h主机IP -P端口 -u用户名 -p密码 –database 数据库名 &gt; 文件名.sql</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># 本地备份可以不添加端口和主机IP，username、passward是数据库用户名和密码\nmysqldump -h *.*.*.* -p 3306 -u username -p password --database mysql &gt; &#x2F;data&#x2F;backup&#x2F;mysql.sql<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>2、备份压缩</p>\n<p>格式：mysqldump -h主机IP -P端口 -u用户名 -p密码 –database 数据库名 | gzip &gt; 文件名.sql.gz</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># 导出的数据有可能比较大，不好备份到远程，这时候就需要进行压缩\nmysqldump -h *.*.*.* -p 3306 -u username -p password --database mysql | gzip &gt; &#x2F;data&#x2F;backup&#x2F;mysql.sql.gz<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>3、备份同个库多个表</p>\n<p>格式：mysqldump -h主机IP -P端口 -u用户名 -p密码 –database 数据库名 表1 表2 …. &gt; 文件名.sql</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">mysqldump -h *.*.*.* -p 3306 -u username -p password mysql1 mysql2 mysql3&gt; &#x2F;data&#x2F;backup&#x2F;mysql_db.sql<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>4、同时备份多个库</p>\n<p>格式：mysqldump -h主机IP -P端口 -u用户名 -p密码 –databases 数据库名1 数据库名2 数据库名3 &gt; 文件名.sql</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">mysqldump -h *.*.*.* -p 3306 -u username -p password --databases mysql1 mysql2 mysql3 &gt; &#x2F;data&#x2F;backup&#x2F;mysql_db.sql<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>5、备份实例上所有的数据库</p>\n<p>格式：mysqldump -h主机IP -P端口 -u用户名 -p密码 –all-databases &gt; 文件名.sql</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">mysqldump -h *.*.*.* -p 3306 -u username -p password --all-databases &gt; &#x2F;data&#x2F;backup&#x2F;mysql_db.sql<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>6、备份数据出带删除数据库或者表的sql备份</p>\n<p>格式：mysqldump -h主机IP -P端口 -u用户名 -p密码 –add-drop-table –add-drop-database 数据库名 &gt; 文件名.sql</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">mysqldump -h *.*.*.* -p 3306 -u username -p password --add-drop-table --add-drop-database mysql &gt; &#x2F;data&#x2F;backup&#x2F;mysql_db.sql<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>7、备份数据库结构，不备份数据</p>\n<p>格式：mysqldump -h主机IP -P端口 -u用户名 -p密码 –no-data 数据库名1 数据库名2 数据库名3 &gt; 文件名.sql</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">mysqldump -h *.*.*.* -p 3306 -u username -p password --no-data –databases mysql1 mysql2 mysql3 &gt; &#x2F;data&#x2F;backup&#x2F;structure_db.sql<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>8、还原MySQL数据库的命令</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># database为数据库名\nmysql -h *.*.*.* -u username -p password database &lt; backupfile.sql<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>9、还原压缩的MySQL数据库</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># database为数据库名\ngunzip &lt; backupfile.sql.gz | mysql -u username -p password database<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>10、将数据库转移到新服务器</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># database为数据库名\nmysqldump -u username -p password database | mysql –host&#x3D;*.*.*.* -C database<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>11、–master-data 和–single-transaction</p>\n<p> 在mysqldump中使用–master-data&#x3D;2，会记录binlog文件和position的信息 。</p>\n<p> –single-transaction会将隔离级别设置成repeatable-commited。</p>\n<p>12、导入数据库</p>\n<p> 常用source命令，用use进入到某个数据库，mysql&gt;source d:\\test.sql，后面的参数为脚本文件。</p>\n<p>13、查看binlog日志</p>\n<p> 查看binlog日志可用命令 mysqlbinlog binlog日志名称|more</p>\n<p>14、general_log</p>\n<p> General_log记录数据库的任何操作，查看general_log 的状态和位置可以用命令show variables like “general_log%” ,开启general_log可以用命令set global general_log&#x3D;on</p>\n<p>二、增量备份</p>\n<p>1、首先做一次完整备份：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># 这时候就会得到一个全备文件test.sql\nmysqldump -h *.*.*.* -u username -p passward  -p 3310 --single-transaction  --master-data&#x3D;2  test&gt;test.sql<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>在sql文件中我们会看到：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">-- 是指备份后所有的更改将会保存到bin-log.000002二进制文件中。\nCHANGE MASTER TO MASTER_LOG_FILE&#x3D;&#39;bin-log.000002&#39;, MASTER_LOG_POS&#x3D;107;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>2、在test库的t_student表中增加两条记录，然后执行flush logs命令。</p>\n<p> 这时将会产生一个新的二进制日志文件bin-log.000003，bin-log.000002则保存了全备过后的所有更改，既增加记录的操作也保存在了bin-log.00002中。</p>\n<p>3、再在test库中的a表中增加两条记录，然后误删除t_student表和a表。</p>\n<p> a中增加记录的操作和删除表a和t_student的操作都记录在bin-log.000003中。</p>\n<h2 id=\"三、恢复\"><a href=\"#三、恢复\" class=\"headerlink\" title=\"三、恢复\"></a>三、恢复</h2><p>1、首先导入全备数据</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># 也可以直接在mysql命令行下面用source导入\nmysql -h *.*.*.* -u username -p passward  -p 3310 &lt; test.sql<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>2、恢复bin-log.000002</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">mysqlbinlog bin-log.000002 |mysql -h *.*.*.* -u username -p passward -p 3310<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>3、恢复部分 bin-log.000003</p>\n<p>在general_log中找到误删除的时间点，然后更加对应的时间点到bin-log.000003中找到相应的position点，需要恢复到误删除的前面一个position点。</p>\n<p>可以用如下参数来控制binlog的区间</p>\n<p>–start-position 开始点 –stop-position 结束点</p>\n<p>–start-date 开始时间 –stop-date 结束时间</p>\n<p>找到恢复点后，既可以开始恢复。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">mysqlbinlog mysql-bin.000003 --stop-position&#x3D;208 |mysql -h *.*.*.* -u username -p passward -p 3310 <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}},"excerpt":"","more":"<p><a href=\"https://www.cnblogs.com/gcixx/\">桄椿</a></p>\n<h2 id=\"mysql命令行备份方法\"><a href=\"#mysql命令行备份方法\" class=\"headerlink\" title=\"mysql命令行备份方法\"></a><a href=\"https://www.cnblogs.com/gcixx/p/11145473.html\">mysql命令行备份方法</a></h2><p>一、mysql备份</p>\n<p>1、备份命令</p>\n<p>格式：mysqldump -h主机IP -P端口 -u用户名 -p密码 –database 数据库名 &gt; 文件名.sql</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># 本地备份可以不添加端口和主机IP，username、passward是数据库用户名和密码\nmysqldump -h *.*.*.* -p 3306 -u username -p password --database mysql &gt; &#x2F;data&#x2F;backup&#x2F;mysql.sql<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>2、备份压缩</p>\n<p>格式：mysqldump -h主机IP -P端口 -u用户名 -p密码 –database 数据库名 | gzip &gt; 文件名.sql.gz</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># 导出的数据有可能比较大，不好备份到远程，这时候就需要进行压缩\nmysqldump -h *.*.*.* -p 3306 -u username -p password --database mysql | gzip &gt; &#x2F;data&#x2F;backup&#x2F;mysql.sql.gz<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>3、备份同个库多个表</p>\n<p>格式：mysqldump -h主机IP -P端口 -u用户名 -p密码 –database 数据库名 表1 表2 …. &gt; 文件名.sql</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">mysqldump -h *.*.*.* -p 3306 -u username -p password mysql1 mysql2 mysql3&gt; &#x2F;data&#x2F;backup&#x2F;mysql_db.sql<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>4、同时备份多个库</p>\n<p>格式：mysqldump -h主机IP -P端口 -u用户名 -p密码 –databases 数据库名1 数据库名2 数据库名3 &gt; 文件名.sql</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">mysqldump -h *.*.*.* -p 3306 -u username -p password --databases mysql1 mysql2 mysql3 &gt; &#x2F;data&#x2F;backup&#x2F;mysql_db.sql<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>5、备份实例上所有的数据库</p>\n<p>格式：mysqldump -h主机IP -P端口 -u用户名 -p密码 –all-databases &gt; 文件名.sql</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">mysqldump -h *.*.*.* -p 3306 -u username -p password --all-databases &gt; &#x2F;data&#x2F;backup&#x2F;mysql_db.sql<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>6、备份数据出带删除数据库或者表的sql备份</p>\n<p>格式：mysqldump -h主机IP -P端口 -u用户名 -p密码 –add-drop-table –add-drop-database 数据库名 &gt; 文件名.sql</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">mysqldump -h *.*.*.* -p 3306 -u username -p password --add-drop-table --add-drop-database mysql &gt; &#x2F;data&#x2F;backup&#x2F;mysql_db.sql<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>7、备份数据库结构，不备份数据</p>\n<p>格式：mysqldump -h主机IP -P端口 -u用户名 -p密码 –no-data 数据库名1 数据库名2 数据库名3 &gt; 文件名.sql</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">mysqldump -h *.*.*.* -p 3306 -u username -p password --no-data –databases mysql1 mysql2 mysql3 &gt; &#x2F;data&#x2F;backup&#x2F;structure_db.sql<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>8、还原MySQL数据库的命令</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># database为数据库名\nmysql -h *.*.*.* -u username -p password database &lt; backupfile.sql<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>9、还原压缩的MySQL数据库</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># database为数据库名\ngunzip &lt; backupfile.sql.gz | mysql -u username -p password database<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>10、将数据库转移到新服务器</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># database为数据库名\nmysqldump -u username -p password database | mysql –host&#x3D;*.*.*.* -C database<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>11、–master-data 和–single-transaction</p>\n<p> 在mysqldump中使用–master-data&#x3D;2，会记录binlog文件和position的信息 。</p>\n<p> –single-transaction会将隔离级别设置成repeatable-commited。</p>\n<p>12、导入数据库</p>\n<p> 常用source命令，用use进入到某个数据库，mysql&gt;source d:\\test.sql，后面的参数为脚本文件。</p>\n<p>13、查看binlog日志</p>\n<p> 查看binlog日志可用命令 mysqlbinlog binlog日志名称|more</p>\n<p>14、general_log</p>\n<p> General_log记录数据库的任何操作，查看general_log 的状态和位置可以用命令show variables like “general_log%” ,开启general_log可以用命令set global general_log&#x3D;on</p>\n<p>二、增量备份</p>\n<p>1、首先做一次完整备份：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># 这时候就会得到一个全备文件test.sql\nmysqldump -h *.*.*.* -u username -p passward  -p 3310 --single-transaction  --master-data&#x3D;2  test&gt;test.sql<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>在sql文件中我们会看到：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">-- 是指备份后所有的更改将会保存到bin-log.000002二进制文件中。\nCHANGE MASTER TO MASTER_LOG_FILE&#x3D;&#39;bin-log.000002&#39;, MASTER_LOG_POS&#x3D;107;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>2、在test库的t_student表中增加两条记录，然后执行flush logs命令。</p>\n<p> 这时将会产生一个新的二进制日志文件bin-log.000003，bin-log.000002则保存了全备过后的所有更改，既增加记录的操作也保存在了bin-log.00002中。</p>\n<p>3、再在test库中的a表中增加两条记录，然后误删除t_student表和a表。</p>\n<p> a中增加记录的操作和删除表a和t_student的操作都记录在bin-log.000003中。</p>\n<h2 id=\"三、恢复\"><a href=\"#三、恢复\" class=\"headerlink\" title=\"三、恢复\"></a>三、恢复</h2><p>1、首先导入全备数据</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># 也可以直接在mysql命令行下面用source导入\nmysql -h *.*.*.* -u username -p passward  -p 3310 &lt; test.sql<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>2、恢复bin-log.000002</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">mysqlbinlog bin-log.000002 |mysql -h *.*.*.* -u username -p passward -p 3310<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>3、恢复部分 bin-log.000003</p>\n<p>在general_log中找到误删除的时间点，然后更加对应的时间点到bin-log.000003中找到相应的position点，需要恢复到误删除的前面一个position点。</p>\n<p>可以用如下参数来控制binlog的区间</p>\n<p>–start-position 开始点 –stop-position 结束点</p>\n<p>–start-date 开始时间 –stop-date 结束时间</p>\n<p>找到恢复点后，既可以开始恢复。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">mysqlbinlog mysql-bin.000003 --stop-position&#x3D;208 |mysql -h *.*.*.* -u username -p passward -p 3310 <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n"},{"title":"nginx 启动停止命令","date":"2022-04-06T14:31:35.314Z","updated":"2022-04-06T14:32:09.108Z","url":"/archives/nginxqi-dong-ting-zhi-ming-ling","_content":"\n# 服务管理\n启动服务：systemctl start nginx\n\n关闭服务： systemctl stop nginx\n\n重载配置：systemctl reload nginx\n\n重启服务：systemctl restart nginx\n","source":"_posts/nginx 启动停止命令.md","raw":"---\ntitle: nginx 启动停止命令\ndate: 2022-04-06 22:31:35.314\nupdated: 2022-04-06 22:32:09.108\nurl: /archives/nginxqi-dong-ting-zhi-ming-ling\ncategories: \n- nginx\ntags: \n- nginx\n---\n\n# 服务管理\n启动服务：systemctl start nginx\n\n关闭服务： systemctl stop nginx\n\n重载配置：systemctl reload nginx\n\n重启服务：systemctl restart nginx\n","slug":"nginx 启动停止命令","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clgxpu7yn002zvouvgaa8fdah","content":"<h1 id=\"服务管理\"><a href=\"#服务管理\" class=\"headerlink\" title=\"服务管理\"></a>服务管理</h1><p>启动服务：systemctl start nginx</p>\n<p>关闭服务： systemctl stop nginx</p>\n<p>重载配置：systemctl reload nginx</p>\n<p>重启服务：systemctl restart nginx</p>\n","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}},"excerpt":"","more":"<h1 id=\"服务管理\"><a href=\"#服务管理\" class=\"headerlink\" title=\"服务管理\"></a>服务管理</h1><p>启动服务：systemctl start nginx</p>\n<p>关闭服务： systemctl stop nginx</p>\n<p>重载配置：systemctl reload nginx</p>\n<p>重启服务：systemctl restart nginx</p>\n"},{"title":"nginx 基本命令","date":"2022-03-11T03:59:33.747Z","updated":"2022-03-11T04:03:36.998Z","url":"/archives/nginxji-ben-ming-ling","description":"简介介绍nginx基本命令","_content":"\n# nginx基本命令\n1、启动：\n使用默认nginx.conf来启动\n```bash\nstart nginx\n```\n如果要指定配置文件来启动则使用以下命令即可：\n```bash\nnginx -c ./conf/jason.conf\n```\n2、关闭：\n\n快速关闭nginx服务。\n```bash\nnginx -s stop\n``` \n优雅的关闭,优雅是指当一个请求被处理完成之后才被关闭。\n```bash\nnginx -s quit\n``` \n\n3、配置语法检查：可进行配置文件的语法检测。\n```bash\nnginx -c ./conf/jason.conf -t\n``` \n4、查看nginx版本信息：-v和-V，一个小写v，一个大写V，两个的含义有些不同。\n\nnginx -v:只是显示nginx的当前版本,如下图\n\n![image.png](/upload/2022/03/image-649783c8200a4d018e2558a7976cc38d.png)\n\nnginx -V：显示nginx版本、编译器版本和配置参数信息，如下图\n\n![image.png](/upload/2022/03/image-61236735bba34682926b603790610f4c.png)\n\n5、重新加载配置文件，nginx是支持热部署的，意思就是可以在不停止服务的情况下进行更新部署。\n```bash\nnginx -s reload \n```\n6、linux命令重启\n查找当前nginx进程号\n```bash\nps -ef|grep nginx\n```\n然后输入命令：\n```bash\nkill -HUP 进程号\n``` \n实现重启nginx服务\n\n7、重新打开日志文件。\n```bash\nnginx -s reopen\n``` \n","source":"_posts/nginx基本命令.md","raw":"---\ntitle: nginx 基本命令\ndate: 2022-03-11 11:59:33.747\nupdated: 2022-03-11 12:03:36.998\nurl: /archives/nginxji-ben-ming-ling\ndescription: 简介介绍nginx基本命令\ncategories: \n- nginx\ntags: \n- nginx\n---\n\n# nginx基本命令\n1、启动：\n使用默认nginx.conf来启动\n```bash\nstart nginx\n```\n如果要指定配置文件来启动则使用以下命令即可：\n```bash\nnginx -c ./conf/jason.conf\n```\n2、关闭：\n\n快速关闭nginx服务。\n```bash\nnginx -s stop\n``` \n优雅的关闭,优雅是指当一个请求被处理完成之后才被关闭。\n```bash\nnginx -s quit\n``` \n\n3、配置语法检查：可进行配置文件的语法检测。\n```bash\nnginx -c ./conf/jason.conf -t\n``` \n4、查看nginx版本信息：-v和-V，一个小写v，一个大写V，两个的含义有些不同。\n\nnginx -v:只是显示nginx的当前版本,如下图\n\n![image.png](/upload/2022/03/image-649783c8200a4d018e2558a7976cc38d.png)\n\nnginx -V：显示nginx版本、编译器版本和配置参数信息，如下图\n\n![image.png](/upload/2022/03/image-61236735bba34682926b603790610f4c.png)\n\n5、重新加载配置文件，nginx是支持热部署的，意思就是可以在不停止服务的情况下进行更新部署。\n```bash\nnginx -s reload \n```\n6、linux命令重启\n查找当前nginx进程号\n```bash\nps -ef|grep nginx\n```\n然后输入命令：\n```bash\nkill -HUP 进程号\n``` \n实现重启nginx服务\n\n7、重新打开日志文件。\n```bash\nnginx -s reopen\n``` \n","slug":"nginx基本命令","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clgxpu7yo0032vouv79vdfewd","content":"<h1 id=\"nginx基本命令\"><a href=\"#nginx基本命令\" class=\"headerlink\" title=\"nginx基本命令\"></a>nginx基本命令</h1><p>1、启动：<br>使用默认nginx.conf来启动</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">start nginx<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>如果要指定配置文件来启动则使用以下命令即可：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">nginx -c ./conf/jason.conf<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>2、关闭：</p>\n<p>快速关闭nginx服务。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">nginx -s stop<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>优雅的关闭,优雅是指当一个请求被处理完成之后才被关闭。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">nginx -s quit<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>3、配置语法检查：可进行配置文件的语法检测。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">nginx -c ./conf/jason.conf -t<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>4、查看nginx版本信息：-v和-V，一个小写v，一个大写V，两个的含义有些不同。</p>\n<p>nginx -v:只是显示nginx的当前版本,如下图</p>\n<p><img src=\"/upload/2022/03/image-649783c8200a4d018e2558a7976cc38d.png\" alt=\"image.png\"></p>\n<p>nginx -V：显示nginx版本、编译器版本和配置参数信息，如下图</p>\n<p><img src=\"/upload/2022/03/image-61236735bba34682926b603790610f4c.png\" alt=\"image.png\"></p>\n<p>5、重新加载配置文件，nginx是支持热部署的，意思就是可以在不停止服务的情况下进行更新部署。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">nginx -s reload <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>6、linux命令重启<br>查找当前nginx进程号</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ps</span> -ef<span class=\"token operator\">|</span><span class=\"token function\">grep</span> nginx<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>然后输入命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">kill</span> -HUP 进程号<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>实现重启nginx服务</p>\n<p>7、重新打开日志文件。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">nginx -s reopen<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}},"excerpt":"","more":"<h1 id=\"nginx基本命令\"><a href=\"#nginx基本命令\" class=\"headerlink\" title=\"nginx基本命令\"></a>nginx基本命令</h1><p>1、启动：<br>使用默认nginx.conf来启动</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">start nginx<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>如果要指定配置文件来启动则使用以下命令即可：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">nginx -c ./conf/jason.conf<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>2、关闭：</p>\n<p>快速关闭nginx服务。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">nginx -s stop<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>优雅的关闭,优雅是指当一个请求被处理完成之后才被关闭。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">nginx -s quit<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>3、配置语法检查：可进行配置文件的语法检测。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">nginx -c ./conf/jason.conf -t<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>4、查看nginx版本信息：-v和-V，一个小写v，一个大写V，两个的含义有些不同。</p>\n<p>nginx -v:只是显示nginx的当前版本,如下图</p>\n<p><img src=\"/upload/2022/03/image-649783c8200a4d018e2558a7976cc38d.png\" alt=\"image.png\"></p>\n<p>nginx -V：显示nginx版本、编译器版本和配置参数信息，如下图</p>\n<p><img src=\"/upload/2022/03/image-61236735bba34682926b603790610f4c.png\" alt=\"image.png\"></p>\n<p>5、重新加载配置文件，nginx是支持热部署的，意思就是可以在不停止服务的情况下进行更新部署。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">nginx -s reload <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>6、linux命令重启<br>查找当前nginx进程号</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ps</span> -ef<span class=\"token operator\">|</span><span class=\"token function\">grep</span> nginx<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>然后输入命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">kill</span> -HUP 进程号<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>实现重启nginx服务</p>\n<p>7、重新打开日志文件。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">nginx -s reopen<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n"},{"title":"nginx 配置多个域名对应不同端口","date":"2022-03-11T03:03:57.304Z","updated":"2022-03-11T03:25:17.058Z","url":"/archives/nginxpei-zhi-duo-ge-yu-ming-dui-ying-bu-tong-duan-kou","_content":"\n# nginx 多个域名不同端口\n## 首先准备三个域名和端口\n- carrotvegeta.icu  80\n- blog.carrotvegeta.icu 8090\n- email.carrotvegeta.icu 8080\n<!--more-->\n## 1、写在一个配置文件里面（nginx.conf）：\n\n```bash\nserver{\n    listen 80;\n    server_name carrotvegeta.icu;\n    location / {\n        #....\n        proxy_pass http://localhost:80;\n    }\n    ##### other directive\n}\n\nserver{\n    listen 80;\n    server_name blog.carrotvegeta.icu;\n    location / {\n        #....\n        proxy_pass http://localhost:8090;\n    }\n    ##### other directive\n}\n```\n\n如果要再继续增加就再增加一个server\n\n```bash\nserver{\n    listen 80;\n    server_name carrotvegeta.icu;\n    location / {\n        #....\n        proxy_pass http://localhost:80;\n    }\n    ##### other directive\n}\n\nserver{\n    listen 80;\n    server_name blog.carrotvegeta.icu;\n    location / {\n        #....\n        proxy_pass http://localhost:8090;\n    }\n    ##### other directive\n}\nserver{\n    listen 80;\n    server_name email.carrotvegeta.icu;\n    location / {\n        #....\n        proxy_pass http://localhost:8080;\n    }\n    ##### other directive\n}\n```\n## 2、写在多个配置文件里面\n  当我们的域名变的非常多的时候，就需要一直不断的在一个配置文件里面增加server，这样就会变得越来越多导致不太好管理。\n  nginx支持引入文件的方法，这时我们可以在其他地方新建好我们所需要的配置文件:\n\nblog.conf：\n```bash\nserver{\n    listen 80;\n    server_name blog.carrotvegeta.icu;\n    location / {\n        #....\n        proxy_pass http://localhost:8090;\n    }\n    ##### other directive\n}\n```\n\nemail.conf\n\n```bash\nserver{\n    listen 80;\n    server_name email.carrotvegeta.icu;\n    location / {\n        #....\n        proxy_pass http://localhost:8080;\n    }\n    ##### other directive\n}\n```\n\n把两个文件都放在/data/nginx/conf/vhost目录下。\n\n然后在nginx.conf中使用引入命令：\n```bash\ninclude  /data/nginx/conf/vhost/*.conf;即可。\n```\n需要注意的是这句命令应该放在：http{}  的花括号内。因为include的命令引入相当于被引入的所有代码写在nginx.conf中一样。\n\n配置nginx.conf文件：\n\n```bash\nhttp{\n\n  ......\n\n  include /data/nginx/conf/vhost/*.conf;\n\n  server{\n    listen 80;\n    server_name carrotvegeta.icu;\n    location / {\n        #....\n        proxy_pass http://localhost:80;\n    }\n    ##### other directive\n  }\n}\n```\n\n然后重启ngxin:\n```bash\nnginx -s reload\n```\n\n原文地址：https://www.cnblogs.com/goloving/p/9363490.html\n","source":"_posts/nginx配置多个域名对应不同端口.md","raw":"---\ntitle: nginx 配置多个域名对应不同端口\ndate: 2022-03-11 11:03:57.304\nupdated: 2022-03-11 11:25:17.058\nurl: /archives/nginxpei-zhi-duo-ge-yu-ming-dui-ying-bu-tong-duan-kou\ncategories: \n- nginx\ntags: \n- nginx\n---\n\n# nginx 多个域名不同端口\n## 首先准备三个域名和端口\n- carrotvegeta.icu  80\n- blog.carrotvegeta.icu 8090\n- email.carrotvegeta.icu 8080\n<!--more-->\n## 1、写在一个配置文件里面（nginx.conf）：\n\n```bash\nserver{\n    listen 80;\n    server_name carrotvegeta.icu;\n    location / {\n        #....\n        proxy_pass http://localhost:80;\n    }\n    ##### other directive\n}\n\nserver{\n    listen 80;\n    server_name blog.carrotvegeta.icu;\n    location / {\n        #....\n        proxy_pass http://localhost:8090;\n    }\n    ##### other directive\n}\n```\n\n如果要再继续增加就再增加一个server\n\n```bash\nserver{\n    listen 80;\n    server_name carrotvegeta.icu;\n    location / {\n        #....\n        proxy_pass http://localhost:80;\n    }\n    ##### other directive\n}\n\nserver{\n    listen 80;\n    server_name blog.carrotvegeta.icu;\n    location / {\n        #....\n        proxy_pass http://localhost:8090;\n    }\n    ##### other directive\n}\nserver{\n    listen 80;\n    server_name email.carrotvegeta.icu;\n    location / {\n        #....\n        proxy_pass http://localhost:8080;\n    }\n    ##### other directive\n}\n```\n## 2、写在多个配置文件里面\n  当我们的域名变的非常多的时候，就需要一直不断的在一个配置文件里面增加server，这样就会变得越来越多导致不太好管理。\n  nginx支持引入文件的方法，这时我们可以在其他地方新建好我们所需要的配置文件:\n\nblog.conf：\n```bash\nserver{\n    listen 80;\n    server_name blog.carrotvegeta.icu;\n    location / {\n        #....\n        proxy_pass http://localhost:8090;\n    }\n    ##### other directive\n}\n```\n\nemail.conf\n\n```bash\nserver{\n    listen 80;\n    server_name email.carrotvegeta.icu;\n    location / {\n        #....\n        proxy_pass http://localhost:8080;\n    }\n    ##### other directive\n}\n```\n\n把两个文件都放在/data/nginx/conf/vhost目录下。\n\n然后在nginx.conf中使用引入命令：\n```bash\ninclude  /data/nginx/conf/vhost/*.conf;即可。\n```\n需要注意的是这句命令应该放在：http{}  的花括号内。因为include的命令引入相当于被引入的所有代码写在nginx.conf中一样。\n\n配置nginx.conf文件：\n\n```bash\nhttp{\n\n  ......\n\n  include /data/nginx/conf/vhost/*.conf;\n\n  server{\n    listen 80;\n    server_name carrotvegeta.icu;\n    location / {\n        #....\n        proxy_pass http://localhost:80;\n    }\n    ##### other directive\n  }\n}\n```\n\n然后重启ngxin:\n```bash\nnginx -s reload\n```\n\n原文地址：https://www.cnblogs.com/goloving/p/9363490.html\n","slug":"nginx配置多个域名对应不同端口","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clgxpu7yq0036vouvggt9gtfj","content":"<h1 id=\"nginx-多个域名不同端口\"><a href=\"#nginx-多个域名不同端口\" class=\"headerlink\" title=\"nginx 多个域名不同端口\"></a>nginx 多个域名不同端口</h1><h2 id=\"首先准备三个域名和端口\"><a href=\"#首先准备三个域名和端口\" class=\"headerlink\" title=\"首先准备三个域名和端口\"></a>首先准备三个域名和端口</h2><ul>\n<li>carrotvegeta.icu  80</li>\n<li>blog.carrotvegeta.icu 8090</li>\n<li>email.carrotvegeta.icu 8080<span id=\"more\"></span>\n<h2 id=\"1、写在一个配置文件里面（nginx-conf）：\"><a href=\"#1、写在一个配置文件里面（nginx-conf）：\" class=\"headerlink\" title=\"1、写在一个配置文件里面（nginx.conf）：\"></a>1、写在一个配置文件里面（nginx.conf）：</h2></li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">server<span class=\"token punctuation\">&#123;</span>\n    listen <span class=\"token number\">80</span><span class=\"token punctuation\">;</span>\n    server_name carrotvegeta.icu<span class=\"token punctuation\">;</span>\n    location / <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">#....</span>\n        proxy_pass http://localhost:80<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">##### other directive</span>\n<span class=\"token punctuation\">&#125;</span>\n\nserver<span class=\"token punctuation\">&#123;</span>\n    listen <span class=\"token number\">80</span><span class=\"token punctuation\">;</span>\n    server_name blog.carrotvegeta.icu<span class=\"token punctuation\">;</span>\n    location / <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">#....</span>\n        proxy_pass http://localhost:8090<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">##### other directive</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果要再继续增加就再增加一个server</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">server<span class=\"token punctuation\">&#123;</span>\n    listen <span class=\"token number\">80</span><span class=\"token punctuation\">;</span>\n    server_name carrotvegeta.icu<span class=\"token punctuation\">;</span>\n    location / <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">#....</span>\n        proxy_pass http://localhost:80<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">##### other directive</span>\n<span class=\"token punctuation\">&#125;</span>\n\nserver<span class=\"token punctuation\">&#123;</span>\n    listen <span class=\"token number\">80</span><span class=\"token punctuation\">;</span>\n    server_name blog.carrotvegeta.icu<span class=\"token punctuation\">;</span>\n    location / <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">#....</span>\n        proxy_pass http://localhost:8090<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">##### other directive</span>\n<span class=\"token punctuation\">&#125;</span>\nserver<span class=\"token punctuation\">&#123;</span>\n    listen <span class=\"token number\">80</span><span class=\"token punctuation\">;</span>\n    server_name email.carrotvegeta.icu<span class=\"token punctuation\">;</span>\n    location / <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">#....</span>\n        proxy_pass http://localhost:8080<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">##### other directive</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"2、写在多个配置文件里面\"><a href=\"#2、写在多个配置文件里面\" class=\"headerlink\" title=\"2、写在多个配置文件里面\"></a>2、写在多个配置文件里面</h2><p>  当我们的域名变的非常多的时候，就需要一直不断的在一个配置文件里面增加server，这样就会变得越来越多导致不太好管理。<br>  nginx支持引入文件的方法，这时我们可以在其他地方新建好我们所需要的配置文件:</p>\n<p>blog.conf：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">server<span class=\"token punctuation\">&#123;</span>\n    listen <span class=\"token number\">80</span><span class=\"token punctuation\">;</span>\n    server_name blog.carrotvegeta.icu<span class=\"token punctuation\">;</span>\n    location / <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">#....</span>\n        proxy_pass http://localhost:8090<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">##### other directive</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>email.conf</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">server<span class=\"token punctuation\">&#123;</span>\n    listen <span class=\"token number\">80</span><span class=\"token punctuation\">;</span>\n    server_name email.carrotvegeta.icu<span class=\"token punctuation\">;</span>\n    location / <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">#....</span>\n        proxy_pass http://localhost:8080<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">##### other directive</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>把两个文件都放在&#x2F;data&#x2F;nginx&#x2F;conf&#x2F;vhost目录下。</p>\n<p>然后在nginx.conf中使用引入命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">include  /data/nginx/conf/vhost/*.conf<span class=\"token punctuation\">;</span>即可。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>需要注意的是这句命令应该放在：http{}  的花括号内。因为include的命令引入相当于被引入的所有代码写在nginx.conf中一样。</p>\n<p>配置nginx.conf文件：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">http<span class=\"token punctuation\">&#123;</span>\n\n  <span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>\n\n  include /data/nginx/conf/vhost/*.conf<span class=\"token punctuation\">;</span>\n\n  server<span class=\"token punctuation\">&#123;</span>\n    listen <span class=\"token number\">80</span><span class=\"token punctuation\">;</span>\n    server_name carrotvegeta.icu<span class=\"token punctuation\">;</span>\n    location / <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">#....</span>\n        proxy_pass http://localhost:80<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">##### other directive</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>然后重启ngxin:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">nginx -s reload<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>原文地址：<a href=\"https://www.cnblogs.com/goloving/p/9363490.html\">https://www.cnblogs.com/goloving/p/9363490.html</a></p>\n","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}},"excerpt":"<h1 id=\"nginx-多个域名不同端口\"><a href=\"#nginx-多个域名不同端口\" class=\"headerlink\" title=\"nginx 多个域名不同端口\"></a>nginx 多个域名不同端口</h1><h2 id=\"首先准备三个域名和端口\"><a href=\"#首先准备三个域名和端口\" class=\"headerlink\" title=\"首先准备三个域名和端口\"></a>首先准备三个域名和端口</h2><ul>\n<li>carrotvegeta.icu  80</li>\n<li>blog.carrotvegeta.icu 8090</li>\n<li>email.carrotvegeta.icu 8080","more":"<h2 id=\"1、写在一个配置文件里面（nginx-conf）：\"><a href=\"#1、写在一个配置文件里面（nginx-conf）：\" class=\"headerlink\" title=\"1、写在一个配置文件里面（nginx.conf）：\"></a>1、写在一个配置文件里面（nginx.conf）：</h2></li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">server<span class=\"token punctuation\">&#123;</span>\n    listen <span class=\"token number\">80</span><span class=\"token punctuation\">;</span>\n    server_name carrotvegeta.icu<span class=\"token punctuation\">;</span>\n    location / <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">#....</span>\n        proxy_pass http://localhost:80<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">##### other directive</span>\n<span class=\"token punctuation\">&#125;</span>\n\nserver<span class=\"token punctuation\">&#123;</span>\n    listen <span class=\"token number\">80</span><span class=\"token punctuation\">;</span>\n    server_name blog.carrotvegeta.icu<span class=\"token punctuation\">;</span>\n    location / <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">#....</span>\n        proxy_pass http://localhost:8090<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">##### other directive</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果要再继续增加就再增加一个server</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">server<span class=\"token punctuation\">&#123;</span>\n    listen <span class=\"token number\">80</span><span class=\"token punctuation\">;</span>\n    server_name carrotvegeta.icu<span class=\"token punctuation\">;</span>\n    location / <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">#....</span>\n        proxy_pass http://localhost:80<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">##### other directive</span>\n<span class=\"token punctuation\">&#125;</span>\n\nserver<span class=\"token punctuation\">&#123;</span>\n    listen <span class=\"token number\">80</span><span class=\"token punctuation\">;</span>\n    server_name blog.carrotvegeta.icu<span class=\"token punctuation\">;</span>\n    location / <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">#....</span>\n        proxy_pass http://localhost:8090<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">##### other directive</span>\n<span class=\"token punctuation\">&#125;</span>\nserver<span class=\"token punctuation\">&#123;</span>\n    listen <span class=\"token number\">80</span><span class=\"token punctuation\">;</span>\n    server_name email.carrotvegeta.icu<span class=\"token punctuation\">;</span>\n    location / <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">#....</span>\n        proxy_pass http://localhost:8080<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">##### other directive</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"2、写在多个配置文件里面\"><a href=\"#2、写在多个配置文件里面\" class=\"headerlink\" title=\"2、写在多个配置文件里面\"></a>2、写在多个配置文件里面</h2><p>  当我们的域名变的非常多的时候，就需要一直不断的在一个配置文件里面增加server，这样就会变得越来越多导致不太好管理。<br>  nginx支持引入文件的方法，这时我们可以在其他地方新建好我们所需要的配置文件:</p>\n<p>blog.conf：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">server<span class=\"token punctuation\">&#123;</span>\n    listen <span class=\"token number\">80</span><span class=\"token punctuation\">;</span>\n    server_name blog.carrotvegeta.icu<span class=\"token punctuation\">;</span>\n    location / <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">#....</span>\n        proxy_pass http://localhost:8090<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">##### other directive</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>email.conf</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">server<span class=\"token punctuation\">&#123;</span>\n    listen <span class=\"token number\">80</span><span class=\"token punctuation\">;</span>\n    server_name email.carrotvegeta.icu<span class=\"token punctuation\">;</span>\n    location / <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">#....</span>\n        proxy_pass http://localhost:8080<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">##### other directive</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>把两个文件都放在&#x2F;data&#x2F;nginx&#x2F;conf&#x2F;vhost目录下。</p>\n<p>然后在nginx.conf中使用引入命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">include  /data/nginx/conf/vhost/*.conf<span class=\"token punctuation\">;</span>即可。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>需要注意的是这句命令应该放在：http{}  的花括号内。因为include的命令引入相当于被引入的所有代码写在nginx.conf中一样。</p>\n<p>配置nginx.conf文件：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">http<span class=\"token punctuation\">&#123;</span>\n\n  <span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>\n\n  include /data/nginx/conf/vhost/*.conf<span class=\"token punctuation\">;</span>\n\n  server<span class=\"token punctuation\">&#123;</span>\n    listen <span class=\"token number\">80</span><span class=\"token punctuation\">;</span>\n    server_name carrotvegeta.icu<span class=\"token punctuation\">;</span>\n    location / <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">#....</span>\n        proxy_pass http://localhost:80<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">##### other directive</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>然后重启ngxin:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">nginx -s reload<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>原文地址：<a href=\"https://www.cnblogs.com/goloving/p/9363490.html\">https://www.cnblogs.com/goloving/p/9363490.html</a></p>"},{"title":"不需要运行进入docker 容器","date":"2022-03-31T08:42:50.176Z","updated":"2022-03-31T08:42:50.176Z","url":"/archives/bu-xu-yao-yun-xing-jin-ru-dockerrong-qi","_content":"# 不需要运行进入docker 容器\n```bash\ndocker run -it 镜像id /bin/bash\n```\n","source":"_posts/不需要运行金融docker容器.md","raw":"---\ntitle: 不需要运行进入docker 容器\ndate: 2022-03-31 16:42:50.176\nupdated: 2022-03-31 16:42:50.176\nurl: /archives/bu-xu-yao-yun-xing-jin-ru-dockerrong-qi\ncategories: \n- docker\ntags: \n- docker\n---\n# 不需要运行进入docker 容器\n```bash\ndocker run -it 镜像id /bin/bash\n```\n","slug":"不需要运行金融docker容器","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clgxpu7yr0039vouv5c5xbeql","content":"<h1 id=\"不需要运行进入docker-容器\"><a href=\"#不需要运行进入docker-容器\" class=\"headerlink\" title=\"不需要运行进入docker 容器\"></a>不需要运行进入docker 容器</h1><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run -it 镜像id /bin/bash<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}},"excerpt":"","more":"<h1 id=\"不需要运行进入docker-容器\"><a href=\"#不需要运行进入docker-容器\" class=\"headerlink\" title=\"不需要运行进入docker 容器\"></a>不需要运行进入docker 容器</h1><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run -it 镜像id /bin/bash<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n"},{"title":"ssh隧道-能ssh就能http和tcp，通过ssh就能访问内网web页面和数据库","date":"2022-03-29T06:11:22.835Z","updated":"2022-03-29T06:14:25.245Z","url":"/archives/ssh-sui-dao---neng-ssh-jiu-neng-http-he-tcp-tong-guo-ssh-jiu-neng-fang-wen-nei-wang-web-ye-mian-he-shu-ju-ku","_content":"\n出于安全考虑，一般云主机都只能通过堡垒机两级ssh才能连通，即先ssh堡垒机，再ssh连到内网目标云主机上执行命令。\n(堡垒机俗称跳板机，一般只开放一个ssh端口。有些堡垒机没有公网IP，必须先登录vpn能才能连)\n\n怎么传文件呢？\n先传到跳板机再传到目标机？传2次？太麻烦，浪费时间还浪费磁盘空间。\n有人说配置config，可以直接ssh目标机，也可以直接scp文件到目标机。没错是这样（文中有配置示例）。\n\n那云主机上有web页面能直接访问么？\n- 内网数据库能直接连么？\n当然可以的，能连ssh，就能访问内网的网页和数据库。只要能手动多级ssh访问到，就能通过配置ssh后在本地直接访问到。\n<!--more-->\n轻松实现\n假设网络条件如下：（受安全组或网络策略影响，只能通过10.20.20.20访问192.168.88.8:8888）\n\n> 本机（登录VPN 公网IP:8444） --> 10.10.10.10:22 --> 10.20.20.20:22 -->\n192.168.88.8:8888\n\n只需3步：\n\n1. 本机配置ssh跳板。保证本机能直接ssh 10.20.20.20。因为跳板机10不能访问目标8888端口\n2. 在命令行中（推荐GitBash）执行如下命令，输入20的账号密码\n```bash\nssh -f -N -L localhost:12345:192.168.88.8:8888 user@10.20.20.20 -p22\n```\n3. 在本机浏览器中输入localhost:12345，出来的就是目标机8888端口的内容。\n## 配置ssh跳板\n配置本机直接ssh 10.20.20.20。配置示例：\n```bash\nvi $HOME/.ssh/config\n```\n```bash\nHost jumper\n  hostname 10.10.10.10 #跳板机要装有ncat，否则连接时会报错\nHost sub2020\n  hostname 10.20.20.*\n  ProxyCommand ssh -q -A jumper nc %h %p\n```\n- 当然如果8888是数据库端口，也是直接在数据库客户中配置地址为localhost:12345。\n- 当然10.10.10.10，10.20.20.20也可以配置免密登录，不用再输密码\n## 再引申一下，还想让其他ip通过本机直连内网页面\n> 其他IP --> 本机IP:12345（登录VPN 公网IP:8444） --> 10.10.10.10:22 -->\n192.168.88.8:8888\n```bash\nssh -f -N -L 本机IP:12345:192.168.88.8:8888 user@10.10.10.10 -p22\n```\n或者\n```bash\nssh -f -N -L :12345:192.168.88.8:8888 user@10.10.10.10 -p22\n```\n- 注意前提是要保证本机的防火墙已放通12345端口，这样别人才能连通本机的12345端口\n再简单一点，目标服务就在跳板机上，但是端口未放开（只放开22）\n\n> 本机 --> 10.10.10.10:22 --> 10.10.10.10:8888\n```bash\nssh -f -N -L :12345:10.10.10.10:8888 user@10.10.10.10 -p22\n```\n \n[原文地址](https://blog.csdn.net/liliwang90/article/details/123153893)\n","source":"_posts/ssh隧道-能ssh就能http和tcp，通过ssh就能访问内网web页面和数据库.md","raw":"---\ntitle: ssh隧道-能ssh就能http和tcp，通过ssh就能访问内网web页面和数据库\ndate: 2022-03-29 14:11:22.835\nupdated: 2022-03-29 14:14:25.245\nurl: /archives/ssh-sui-dao---neng-ssh-jiu-neng-http-he-tcp-tong-guo-ssh-jiu-neng-fang-wen-nei-wang-web-ye-mian-he-shu-ju-ku\ncategories: \n- ssh\ntags: \n- ssh\n---\n\n出于安全考虑，一般云主机都只能通过堡垒机两级ssh才能连通，即先ssh堡垒机，再ssh连到内网目标云主机上执行命令。\n(堡垒机俗称跳板机，一般只开放一个ssh端口。有些堡垒机没有公网IP，必须先登录vpn能才能连)\n\n怎么传文件呢？\n先传到跳板机再传到目标机？传2次？太麻烦，浪费时间还浪费磁盘空间。\n有人说配置config，可以直接ssh目标机，也可以直接scp文件到目标机。没错是这样（文中有配置示例）。\n\n那云主机上有web页面能直接访问么？\n- 内网数据库能直接连么？\n当然可以的，能连ssh，就能访问内网的网页和数据库。只要能手动多级ssh访问到，就能通过配置ssh后在本地直接访问到。\n<!--more-->\n轻松实现\n假设网络条件如下：（受安全组或网络策略影响，只能通过10.20.20.20访问192.168.88.8:8888）\n\n> 本机（登录VPN 公网IP:8444） --> 10.10.10.10:22 --> 10.20.20.20:22 -->\n192.168.88.8:8888\n\n只需3步：\n\n1. 本机配置ssh跳板。保证本机能直接ssh 10.20.20.20。因为跳板机10不能访问目标8888端口\n2. 在命令行中（推荐GitBash）执行如下命令，输入20的账号密码\n```bash\nssh -f -N -L localhost:12345:192.168.88.8:8888 user@10.20.20.20 -p22\n```\n3. 在本机浏览器中输入localhost:12345，出来的就是目标机8888端口的内容。\n## 配置ssh跳板\n配置本机直接ssh 10.20.20.20。配置示例：\n```bash\nvi $HOME/.ssh/config\n```\n```bash\nHost jumper\n  hostname 10.10.10.10 #跳板机要装有ncat，否则连接时会报错\nHost sub2020\n  hostname 10.20.20.*\n  ProxyCommand ssh -q -A jumper nc %h %p\n```\n- 当然如果8888是数据库端口，也是直接在数据库客户中配置地址为localhost:12345。\n- 当然10.10.10.10，10.20.20.20也可以配置免密登录，不用再输密码\n## 再引申一下，还想让其他ip通过本机直连内网页面\n> 其他IP --> 本机IP:12345（登录VPN 公网IP:8444） --> 10.10.10.10:22 -->\n192.168.88.8:8888\n```bash\nssh -f -N -L 本机IP:12345:192.168.88.8:8888 user@10.10.10.10 -p22\n```\n或者\n```bash\nssh -f -N -L :12345:192.168.88.8:8888 user@10.10.10.10 -p22\n```\n- 注意前提是要保证本机的防火墙已放通12345端口，这样别人才能连通本机的12345端口\n再简单一点，目标服务就在跳板机上，但是端口未放开（只放开22）\n\n> 本机 --> 10.10.10.10:22 --> 10.10.10.10:8888\n```bash\nssh -f -N -L :12345:10.10.10.10:8888 user@10.10.10.10 -p22\n```\n \n[原文地址](https://blog.csdn.net/liliwang90/article/details/123153893)\n","slug":"ssh隧道-能ssh就能http和tcp，通过ssh就能访问内网web页面和数据库","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clgxpu7ys003bvouv9iyn8bs1","content":"<p>出于安全考虑，一般云主机都只能通过堡垒机两级ssh才能连通，即先ssh堡垒机，再ssh连到内网目标云主机上执行命令。<br>(堡垒机俗称跳板机，一般只开放一个ssh端口。有些堡垒机没有公网IP，必须先登录vpn能才能连)</p>\n<p>怎么传文件呢？<br>先传到跳板机再传到目标机？传2次？太麻烦，浪费时间还浪费磁盘空间。<br>有人说配置config，可以直接ssh目标机，也可以直接scp文件到目标机。没错是这样（文中有配置示例）。</p>\n<p>那云主机上有web页面能直接访问么？</p>\n<ul>\n<li>内网数据库能直接连么？<br>当然可以的，能连ssh，就能访问内网的网页和数据库。只要能手动多级ssh访问到，就能通过配置ssh后在本地直接访问到。<span id=\"more\"></span>\n轻松实现<br>假设网络条件如下：（受安全组或网络策略影响，只能通过10.20.20.20访问192.168.88.8:8888）</li>\n</ul>\n<blockquote>\n<p>本机（登录VPN 公网IP:8444） –&gt; 10.10.10.10:22 –&gt; 10.20.20.20:22 –&gt;<br>192.168.88.8:8888</p>\n</blockquote>\n<p>只需3步：</p>\n<ol>\n<li>本机配置ssh跳板。保证本机能直接ssh 10.20.20.20。因为跳板机10不能访问目标8888端口</li>\n<li>在命令行中（推荐GitBash）执行如下命令，输入20的账号密码<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ssh</span> -f -N -L localhost:12345:192.168.88.8:8888 user@10.20.20.20 -p22<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li>在本机浏览器中输入localhost:12345，出来的就是目标机8888端口的内容。<h2 id=\"配置ssh跳板\"><a href=\"#配置ssh跳板\" class=\"headerlink\" title=\"配置ssh跳板\"></a>配置ssh跳板</h2>配置本机直接ssh 10.20.20.20。配置示例：<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">vi</span> <span class=\"token environment constant\">$HOME</span>/.ssh/config<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">Host jumper\n  <span class=\"token function\">hostname</span> <span class=\"token number\">10.10</span>.10.10 <span class=\"token comment\">#跳板机要装有ncat，否则连接时会报错</span>\nHost sub2020\n  <span class=\"token function\">hostname</span> <span class=\"token number\">10.20</span>.20.*\n  ProxyCommand <span class=\"token function\">ssh</span> -q -A jumper <span class=\"token function\">nc</span> %h %p<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<ul>\n<li>当然如果8888是数据库端口，也是直接在数据库客户中配置地址为localhost:12345。</li>\n<li>当然10.10.10.10，10.20.20.20也可以配置免密登录，不用再输密码<h2 id=\"再引申一下，还想让其他ip通过本机直连内网页面\"><a href=\"#再引申一下，还想让其他ip通过本机直连内网页面\" class=\"headerlink\" title=\"再引申一下，还想让其他ip通过本机直连内网页面\"></a>再引申一下，还想让其他ip通过本机直连内网页面</h2><blockquote>\n<p>其他IP –&gt; 本机IP:12345（登录VPN 公网IP:8444） –&gt; 10.10.10.10:22 –&gt;<br>192.168.88.8:8888</p>\n</blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ssh</span> -f -N -L 本机IP:12345:192.168.88.8:8888 user@10.10.10.10 -p22<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>或者</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ssh</span> -f -N -L :12345:192.168.88.8:8888 user@10.10.10.10 -p22<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li>注意前提是要保证本机的防火墙已放通12345端口，这样别人才能连通本机的12345端口<br>再简单一点，目标服务就在跳板机上，但是端口未放开（只放开22）</li>\n</ul>\n<blockquote>\n<p>本机 –&gt; 10.10.10.10:22 –&gt; 10.10.10.10:8888</p>\n</blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ssh</span> -f -N -L :12345:10.10.10.10:8888 user@10.10.10.10 -p22<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><a href=\"https://blog.csdn.net/liliwang90/article/details/123153893\">原文地址</a></p>\n","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}},"excerpt":"<p>出于安全考虑，一般云主机都只能通过堡垒机两级ssh才能连通，即先ssh堡垒机，再ssh连到内网目标云主机上执行命令。<br>(堡垒机俗称跳板机，一般只开放一个ssh端口。有些堡垒机没有公网IP，必须先登录vpn能才能连)</p>\n<p>怎么传文件呢？<br>先传到跳板机再传到目标机？传2次？太麻烦，浪费时间还浪费磁盘空间。<br>有人说配置config，可以直接ssh目标机，也可以直接scp文件到目标机。没错是这样（文中有配置示例）。</p>\n<p>那云主机上有web页面能直接访问么？</p>\n<ul>\n<li>内网数据库能直接连么？<br>当然可以的，能连ssh，就能访问内网的网页和数据库。只要能手动多级ssh访问到，就能通过配置ssh后在本地直接访问到。","more":"轻松实现<br>假设网络条件如下：（受安全组或网络策略影响，只能通过10.20.20.20访问192.168.88.8:8888）</li>\n</ul>\n<blockquote>\n<p>本机（登录VPN 公网IP:8444） –&gt; 10.10.10.10:22 –&gt; 10.20.20.20:22 –&gt;<br>192.168.88.8:8888</p>\n</blockquote>\n<p>只需3步：</p>\n<ol>\n<li>本机配置ssh跳板。保证本机能直接ssh 10.20.20.20。因为跳板机10不能访问目标8888端口</li>\n<li>在命令行中（推荐GitBash）执行如下命令，输入20的账号密码<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ssh</span> -f -N -L localhost:12345:192.168.88.8:8888 user@10.20.20.20 -p22<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li>在本机浏览器中输入localhost:12345，出来的就是目标机8888端口的内容。<h2 id=\"配置ssh跳板\"><a href=\"#配置ssh跳板\" class=\"headerlink\" title=\"配置ssh跳板\"></a>配置ssh跳板</h2>配置本机直接ssh 10.20.20.20。配置示例：<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">vi</span> <span class=\"token environment constant\">$HOME</span>/.ssh/config<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">Host jumper\n  <span class=\"token function\">hostname</span> <span class=\"token number\">10.10</span>.10.10 <span class=\"token comment\">#跳板机要装有ncat，否则连接时会报错</span>\nHost sub2020\n  <span class=\"token function\">hostname</span> <span class=\"token number\">10.20</span>.20.*\n  ProxyCommand <span class=\"token function\">ssh</span> -q -A jumper <span class=\"token function\">nc</span> %h %p<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<ul>\n<li>当然如果8888是数据库端口，也是直接在数据库客户中配置地址为localhost:12345。</li>\n<li>当然10.10.10.10，10.20.20.20也可以配置免密登录，不用再输密码<h2 id=\"再引申一下，还想让其他ip通过本机直连内网页面\"><a href=\"#再引申一下，还想让其他ip通过本机直连内网页面\" class=\"headerlink\" title=\"再引申一下，还想让其他ip通过本机直连内网页面\"></a>再引申一下，还想让其他ip通过本机直连内网页面</h2><blockquote>\n<p>其他IP –&gt; 本机IP:12345（登录VPN 公网IP:8444） –&gt; 10.10.10.10:22 –&gt;<br>192.168.88.8:8888</p>\n</blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ssh</span> -f -N -L 本机IP:12345:192.168.88.8:8888 user@10.10.10.10 -p22<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>或者</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ssh</span> -f -N -L :12345:192.168.88.8:8888 user@10.10.10.10 -p22<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li>注意前提是要保证本机的防火墙已放通12345端口，这样别人才能连通本机的12345端口<br>再简单一点，目标服务就在跳板机上，但是端口未放开（只放开22）</li>\n</ul>\n<blockquote>\n<p>本机 –&gt; 10.10.10.10:22 –&gt; 10.10.10.10:8888</p>\n</blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ssh</span> -f -N -L :12345:10.10.10.10:8888 user@10.10.10.10 -p22<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><a href=\"https://blog.csdn.net/liliwang90/article/details/123153893\">原文地址</a></p>"},{"title":"使用rsync命令","date":"2022-02-16T07:54:19.532Z","updated":"2022-02-16T07:54:19.532Z","url":"/archives/shi-yong-rsync-ming-ling","_content":"\n# 本地上传至远程\n```bash\nrsync -av localPath username@ip:remotepath\n```\n\n-  --progress 参数 可显示进度条\n\n-  -azvrtopg 增量更新\n-   --exclude='path' 忽略文件夹或某个文件","source":"_posts/使用rsync命令.md","raw":"---\ntitle: 使用rsync命令\ndate: 2022-02-16 15:54:19.532\nupdated: 2022-02-16 15:54:19.532\nurl: /archives/shi-yong-rsync-ming-ling\ncategories: \n- linux\ntags: \n- linux\n- rsync\n---\n\n# 本地上传至远程\n```bash\nrsync -av localPath username@ip:remotepath\n```\n\n-  --progress 参数 可显示进度条\n\n-  -azvrtopg 增量更新\n-   --exclude='path' 忽略文件夹或某个文件","slug":"使用rsync命令","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clgxpu7yx003gvouv49skd5ih","content":"<h1 id=\"本地上传至远程\"><a href=\"#本地上传至远程\" class=\"headerlink\" title=\"本地上传至远程\"></a>本地上传至远程</h1><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">rsync</span> -av localPath username@ip:remotepath<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><p>–progress 参数 可显示进度条</p>\n</li>\n<li><p>-azvrtopg 增量更新</p>\n</li>\n<li><p>–exclude&#x3D;’path’ 忽略文件夹或某个文件</p>\n</li>\n</ul>\n","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}},"excerpt":"","more":"<h1 id=\"本地上传至远程\"><a href=\"#本地上传至远程\" class=\"headerlink\" title=\"本地上传至远程\"></a>本地上传至远程</h1><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">rsync</span> -av localPath username@ip:remotepath<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><p>–progress 参数 可显示进度条</p>\n</li>\n<li><p>-azvrtopg 增量更新</p>\n</li>\n<li><p>–exclude&#x3D;’path’ 忽略文件夹或某个文件</p>\n</li>\n</ul>\n"},{"title":"单纯启动docker容器不启动服务","date":"2022-02-16T07:35:37.616Z","updated":"2022-02-16T07:35:37.616Z","url":"/archives/dan-chun-qi-dong-docker-rong-qi-bu-qi-dong-fu-wu","_content":"\n```docker\ndocker run -itd --name spp 镜像名:标签 bash\n```","source":"_posts/单纯启动docker容器不启动服务.md","raw":"---\ntitle: 单纯启动docker容器不启动服务\ndate: 2022-02-16 15:35:37.616\nupdated: 2022-02-16 15:35:37.616\nurl: /archives/dan-chun-qi-dong-docker-rong-qi-bu-qi-dong-fu-wu\ncategories: \n- docker\ntags: \n- docker\n---\n\n```docker\ndocker run -itd --name spp 镜像名:标签 bash\n```","slug":"单纯启动docker容器不启动服务","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clgxpu7yz003jvouvay9e7xu7","content":"<pre class=\"line-numbers language-docker\" data-language=\"docker\"><code class=\"language-docker\">docker run -itd --name spp 镜像名:标签 bash<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}},"excerpt":"","more":"<pre class=\"line-numbers language-docker\" data-language=\"docker\"><code class=\"language-docker\">docker run -itd --name spp 镜像名:标签 bash<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>"},{"title":"使用scp命令传输文件到服务器","date":"2022-02-15T07:34:58.699Z","updated":"2022-02-16T07:42:24.554Z","url":"/archives/shi-yong-scp-ming-ling-chuan-shu-wen-jian-dao-fu-wu-qi","_content":"\n# 使用scp命令\n\n上传本地文件到服务器：\n\n```bash\nscp /path/filename username@servername:/path/\n```\n\n从服务器上下载文件：\n\n```bash\nscp username@servername:/path/filename /var/www/local_dir（本地目录）\n```\n\n从服务器下载整个目录：\n\n```bash\nscp -r username@servername:/var/www/remote_dir/（远程目录） /var/www/local_dir（本地目录）\n```\n\n上传目录到服务器：\n\n```bash\nscp -r local_dir username@servername:remote_dir\n```","source":"_posts/使用scp命令传输文件到服务器.md","raw":"---\ntitle: 使用scp命令传输文件到服务器\ndate: 2022-02-15 15:34:58.699\nupdated: 2022-02-16 15:42:24.554\nurl: /archives/shi-yong-scp-ming-ling-chuan-shu-wen-jian-dao-fu-wu-qi\ncategories: \n- linux\ntags: \n- scp\n- 文件\n---\n\n# 使用scp命令\n\n上传本地文件到服务器：\n\n```bash\nscp /path/filename username@servername:/path/\n```\n\n从服务器上下载文件：\n\n```bash\nscp username@servername:/path/filename /var/www/local_dir（本地目录）\n```\n\n从服务器下载整个目录：\n\n```bash\nscp -r username@servername:/var/www/remote_dir/（远程目录） /var/www/local_dir（本地目录）\n```\n\n上传目录到服务器：\n\n```bash\nscp -r local_dir username@servername:remote_dir\n```","slug":"使用scp命令传输文件到服务器","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clgxpu7z2003ovouv159d88gs","content":"<h1 id=\"使用scp命令\"><a href=\"#使用scp命令\" class=\"headerlink\" title=\"使用scp命令\"></a>使用scp命令</h1><p>上传本地文件到服务器：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">scp</span> /path/filename username@servername:/path/<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>从服务器上下载文件：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">scp</span> username@servername:/path/filename /var/www/local_dir（本地目录）<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>从服务器下载整个目录：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">scp</span> -r username@servername:/var/www/remote_dir/（远程目录） /var/www/local_dir（本地目录）<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上传目录到服务器：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">scp</span> -r local_dir username@servername:remote_dir<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}},"excerpt":"","more":"<h1 id=\"使用scp命令\"><a href=\"#使用scp命令\" class=\"headerlink\" title=\"使用scp命令\"></a>使用scp命令</h1><p>上传本地文件到服务器：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">scp</span> /path/filename username@servername:/path/<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>从服务器上下载文件：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">scp</span> username@servername:/path/filename /var/www/local_dir（本地目录）<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>从服务器下载整个目录：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">scp</span> -r username@servername:/var/www/remote_dir/（远程目录） /var/www/local_dir（本地目录）<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上传目录到服务器：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">scp</span> -r local_dir username@servername:remote_dir<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>"},{"title":"如何使用高阶函数编程提升代码的简洁性","date":"2022-02-24T15:04:47.816Z","updated":"2022-03-10T04:07:39.714Z","url":"/archives/ru-he-shi-yong-gao-jie-han-shu-bian-cheng-ti-sheng-dai-ma-de-jian-jie-xing","_content":"\n摘要\n函数是 Go 语言的一等公民，本文采用一种高阶函数的方式，抽象了使用 gorm 查询 DB 的查询条件，将多个表的各种复杂的组合查询抽象成了一个统一的方法和一个配置类，提升了代码的简洁和优雅，同时可以提升开发人员的效率。\n<!--more-->\n背景\n有一张 DB 表，业务上需要按照这个表里的不同字段做筛选查询，这是一个非常普遍的需求，我相信这种需求对于每个做业务开发的人都是绕不开的。比如我们有一张存储用户信息的表，简化之后的表结构如下：\n```mysql\nCREATE TABLE `user_info` (\n  `id` bigint unsigned NOT NULL AUTO_INCREMENT COMMENT '自增主键',\n  `user_id` bigint NOT NULL COMMENT '用户id',\n  `user_name` varchar NOT NULL COMMENT '用户姓名',\n  `role` int NOT NULL DEFAULT '0' COMMENT '角色',\n  `status` int NOT NULL DEFAULT '0' COMMENT '状态',\n  PRIMARY KEY (`id`),\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='用户信息表';\n```\n这个表里有几个关键字段，user_id、user_name 、 role、status。如果我们想按照 user_id 来做筛选，那我们一般是在 dao 层写一个这样的方法(为了示例代码的简洁，这里所有示例代码都省去了错误处理部分)：\n```go\nfunc GetUserInfoByUid(ctx context.Context, userID int64) ([]*resource.UserInfo) {\n   db := GetDB(ctx)\n   db = db.Table(resource.UserInfo{}.TableName())\n   var infos []*resource.UserInfo\n   db = db.Where(\"user_id = ?\", userID)\n   db.Find(&infos)\n   return infos\n}\n```\n如果业务上又需要按照 user_name 来查询，那我们就需要再写一个类似的方法按照 user_name 来查询：\n```go\nfunc GetUserInfoByName(ctx context.Context, name string) ([]*resource.UserInfo) {\n   db := GetDB(ctx)\n   db = db.Table(resource.UserInfo{}.TableName())\n   var infos []*resource.UserInfo\n   db = db.Where(\"user_name = ?\", name)\n   db.Find(&infos)\n   return infos\n}\n```\n可以看到，两个方法的代码极度相似，如果再需要按照 role 或者 status 查询，那不得不再来几个方法，导致相似的方法非常多。当然很容易想到，我们可以用一个方法，多几个入参的形式来解决这个问题，于是，我们把上面两个方法合并成下面这种方法，能够支持按照多个字段筛选查询：\n```go\nfunc GetUserInfo(ctx context.Context, userID int64, name string, role int, status int) ([]*resource.UserInfo) {\n   db := GetDB(ctx)\n   db = db.Table(resource.UserInfo{}.TableName())\n   var infos []*resource.UserInfo\n   if userID > 0 {\n      db = db.Where(\"user_id = ?\", userID)\n   }\n   if name != \"\" {\n      db = db.Where(\"user_name = ?\", name)\n   }\n   if role > 0 {\n      db = db.Where(\"role = ?\", role)\n   }\n   if status > 0 {\n      db = db.Where(\"status = ?\", status)\n   }\n   db.Find(&infos)\n   return infos\n}\n```\n相应地，调用该方法的代码也需要做出改变：\n```go\n//只根据UserID查询\ninfos := GetUserInfo(ctx, userID, \"\", 0, 0)\n//只根据UserName查询\ninfos := GetUserInfo(ctx, 0, name, 0, 0)\n//只根据Role查询\ninfos := GetUserInfo(ctx, 0, \"\", role, 0)\n//只根据Status查询\ninfos := GetUserInfo(ctx, 0, \"\", 0, status)\n```\n这种代码无论是写代码的人还是读代码的人，都会感觉非常难受。我们这里只列举了四个参数，可以想想这个表里如果有十几个到二十个字段都需要做筛选查询，这种代码看上去是一种什么样的感觉。首先，GetUserInfo 方法本身入参非常多，里面充斥着各种 != 0 和 != \"\"的判断，并且需要注意的是，0 一定不能作为字段的有效值，否则 != 0 这种判断就会有问题。其次，作为调用方，明明只是根据一个字段筛选查询，却不得不为其他参数填充一个 0 或者\"\"来占位，而且调用者要特别谨慎，因为一不小心，就可能会把 role 填到了 status 的位置上去，因为他们的类型都一样，编译器不会检查出任何错误，很容易搞出业务 bug。\n\n解决方案\n如果说解决这种问题有段位，那么以上的写法只能算是青铜，接下来我们看看白银、黄金和王者。\n\n白银\n解决这种问题，一种比较常见的方案是，新建一个结构体，把各种查询的字段都放在这个结构体中，然后把这个结构体作为入参传入到 dao 层的查询方法中。而在调用 dao 方法的地方，根据各自的需要，构建包含不同字段的结构体。在这个例子中，我们可以构建一个 UserInfo 的结构体如下：\n```go\ntype UserInfo struct {\n   UserID int64\n   Name string\n   Role int32\n   Status int32\n}\n```\n把 UserInfo 作为入参传给 GetUserInfo 方法，于是 GetUserInfo 方法变成了这样：\n```go\nfunc GetUserInfo(ctx context.Context, info *UserInfo) ([]*resource.UserInfo) {\n   db := GetDB(ctx)\n   db = db.Table(resource.UserInfo{}.TableName())\n   var infos []*resource.UserInfo\n   if info.UserID > 0 {\n      db = db.Where(\"user_id = ?\", info.UserID)\n   }\n   if info.Name != \"\" {\n      db = db.Where(\"user_name = ?\", info.Name)\n   }\n   if info.Role > 0 {\n      db = db.Where(\"role = ?\", info.Role)\n   }\n   if info.Status > 0 {\n      db = db.Where(\"status = ?\", info.Status)\n   }\n   db.Find(&infos)\n   return infos\n}\n```\n相应地，调用该方法的代码也需要变动：\n```go\n//只根据userD查询\ninfo := &UserInfo{\n   UserID: userID,\n}\ninfos := GetUserInfo(ctx, info)\n//只根据name查询\ninfo := &UserInfo{\n   Name: name,\n}\ninfos := GetUserInfo(ctx, info)\n```\n这个代码写到这里，相比最开始的方法其实已经好了不少，至少 dao 层的方法从很多个入参变成了一个，调用方的代码也可以根据自己的需要构建参数，不需要很多空占位符。但是存在的问题也比较明显：仍然有很多判空不说，还引入了一个多余的结构体。如果我们就到此结束的话，多少有点遗憾。\n\n另外，如果我们再扩展一下业务场景，我们使用的不是等值查询，而是多值查询或者区间查询，比如查询 status in (a, b)，那上面的代码又怎么扩展呢？是不是又要引入一个方法，方法繁琐暂且不说，方法名叫啥都会让我们纠结很久；或许可以尝试把每个参数都从单值扩展成数组，然后赋值的地方从 = 改为 in()的方式，所有参数查询都使用 in 显然对性能不是那么友好。\n\n黄金\n接下来我们看看黄金的解法。在上面的方法中，我们引入了一个多余的结构体，并且无法避免在 dao 层的方法中做了很多判空赋值。那么我们能不能不引入 UserInfo 这个多余的结构体，并且也避免这些丑陋的判空？答案是可以的，函数式编程可以很好地解决这个问题，首先我们需要定义一个函数类型：\n```go\ntype Option func(*gorm.DB)\n```\n定义 Option 是一个函数，这个函数的入参类型是*gorm.DB，返回值为空。\n\n然后针对 DB 表中每个需要筛选查询的字段定义一个函数，为这个字段赋值，像下面这样：\n```go\nfunc UserID(userID int64) Option {\n   return func(db *gorm.DB) {\n      db.Where(\"`user_id` = ?\", userID)\n   }\n}\nfunc UserName(name string) Option {\n   return func(db *gorm.DB) {\n      db.Where(\"`user_name` = ?\", name)\n   }\n}\nfunc Role(role int32) Option {\n   return func(db *gorm.DB) {\n      db.Where(\"`role` = ?\", role)\n   }\n}\nfunc Status(status int32) Option {\n   return func(db *gorm.DB) {\n      db.Where(\"`status` = ?\", status)\n   }\n}\n```\n上面这组代码中，入参是一个字段的筛选值，返回的是一个 Option 函数，而这个函数的功能是把入参赋值给当前的【db *gorm.DB】对象。这也就是我们在文章一开始就提到的高阶函数，跟我们普通的函数不太一样，普通的函数返回的是一个简单类型的值或者一个封装类型的结构体，而这种高阶函数返回的是一个具备某种功能的函数。这里多说一句，虽然 go 语言很好地支持了函数式编程，但是由于其目前缺少对泛型的支持，导致高阶函数编程的使用并没有给开发者带来更多的便利，因此在平时业务代码中写高阶函数还是略为少见。而熟悉 JAVA 的同学都知道，JAVA 中的 Map、Reduce、Filter 等高阶函数使用起来非常的舒服。\n\n好，有了这一组函数之后，我们来看看 dao 层的查询方法怎么写：\n```go\nfunc GetUserInfo(ctx context.Context, options ...func(option *gorm.DB)) ([]*resource.UserInfo) {\n   db := GetDB(ctx)\n   db = db.Table(resource.UserInfo{}.TableName())\n   for _, option := range options {\n      option(db)\n   }\n   var infos []*resource.UserInfo\n   db.Find(&infos)\n   return infos\n}\n```\n没有对比就没有伤害，通过和最开始的方法比较，可以看到方法的入参由多个不同类型的参数变成了一组相同类型的函数，因此在处理这些参数的时候，也无需一个一个的判空，而是直接使用一个 for 循环就搞定，相比之前已经简洁了很多。\n\n那么调用该方法的代码怎么写呢，这里直接给出来：\n```go\n//只使用userID查询\ninfos := GetUserInfo(ctx, UserID(userID))\n//只使用userName查询\ninfos := GetUserInfo(ctx, UserName(name))\n//使用role和status同时查询\ninfos := GetUserInfo(ctx, Role(role), Status(status))\n```\n无论是使用任意的单个参数还是使用多个参数组合查询，我们都随便写，不用关注参数顺序，简洁又清晰，可读性也是非常好。\n\n再来考虑上面提到的扩展场景，如果我们需要多值查询，比如查询多个 status，那么我们只需要在 Option 中增加一个小小的函数即可：\n```go\nfunc StatusIn(status []int32) Option {\n   return func(db *gorm.DB) {\n      db.Where(\"`status` in ?\", status)\n   }\n}\n```\n对于其他字段或者等值查询也是同理，代码的简洁不言而喻。\n\n王者\n能优化到上面黄金的阶段，其实已经很简洁了，如果止步于此的话，也是完全可以的。但是如果还想进一步追求极致，那么请继续往下看！\n\n在上面方法中，我们通过高阶函数已经很好地解决了对于一张表中多字段组合查询的代码繁琐问题，但是对于不同的表查询，仍然要针对每个表都写一个查询方法，那么还有没有进一步优化的空间呢？我们发现，在 Option 中定义的这一组高阶函数，压根与某张表没关系，他只是简单地给 gorm.DB 赋值。因此，如果我们有多张表，每个表里都有 user_id、is_deleted、create_time、update_time 这些公共的字段，那么我们完全不用再重复定义一次，只需要在 Option 中定义一个就够了，每张表的查询都可以复用这些函数。进一步思考，我们发现，Option 中维护的是一些傻瓜式的代码，根本不需要我们每次手动去写，可以使用脚本生成，扫描一遍 DB 的表，为每个不重复的字段生成一个 Equal 方法、In 方法、Greater 方法、Less 方法，就可以解决所有表中按照不同字段做等值查询、多值查询、区间查询。\n\n解决了 Option 的问题之后，对于每个表的各种组合查询，就只需要写一个很简单的 Get 方法了，为了方便看，我们在这里再贴一次：\n```go\nfunc GetUserInfo(ctx context.Context, options ...func(option *gorm.DB)) ([]*resource.UserInfo) {\n   db := GetDB(ctx)\n   db = db.Table(resource.UserInfo{}.TableName())\n   for _, option := range options {\n      option(db)\n   }\n   var infos []*resource.UserInfo\n   db.Find(&infos)\n   return infos\n}\n```\n上面这个查询方法是针对 user_info 这个表写的，如果还有其他表，我们还需要为每个表都写一个和这个类似的 Get 方法。如果我们仔细观察每个表的 Get 方法，会发现这些方法其实就有两点不同：\n\n返回值类型不一样；\nTableName 不一样。\n如果我们能解决这两个问题，那我们就能够使用一个方法解决所有表的查询。首先对于第一点返回值不一致的问题，可以参考 json.unmarshal 的做法，把返回类型以一个参数的形式传进来，因为传入的是指针类型，所以就不用再给返回值了；而对于 tableName 不一致的问题，其实可以和上面处理不同参数的方式一样，增加一个 Option 方法来解决：\n```go\nfunc TableName(tableName string) Option {\n   return func(db *gorm.DB) {\n      db.Table(tableName)\n   }\n}\n```\n这样改造之后，我们的 dao 层查询方法就变成了这样：\n```go\nfunc GetRecord(ctx context.Context, in interface{}, options ...func(option *gorm.DB)) {\n   db := GetDB(ctx)\n   for _, option := range options {\n      option(db)\n   }\n   db.Find(in)\n   return\n}\n```\n注意，我们把方法名从之前的 GetUserInfo 变成了GetRecord，因为这个方法不仅能支持对于 user_info 表的查询，而且能够支持对一个库中所有表的查询。也就是说从最开始为每个表建一个类，每个类下面又写很多个查询方法，现在变成了所有表所有查询适用一个方法。\n\n然后我们看看调用这个方法的代码怎么写：\n```go\n//根据userID和userName查询\nvar infos []*resource.UserInfo\nGetRecord(ctx, &infos, TableName(resource.UserInfo{}.TableName()), UserID(userID), UserName(name))\n```\n这里还是给出了查询 user_info 表的示例，在调用的地方指定 tableName 和返回类型。\n\n经过这样的改造之后，我们最终实现了用一个简单的方法【GetRecord】 + 一个可自动生成的配置类【Option】对一个库中所有表的多种组合查询。代码的简洁和优雅又有了一些提升。美中不足的是，在调用查询方法的地方多传了两个参数，一个是返回值变量，一个是 tableName，多少显得有点不那么美观。\n\n总结\n这里通过对 grom 查询条件的抽象，大大简化了对 DB 组合查询的写法，提升了代码的简洁。对于其他 update、insert、delete 三种操作，也可以借用这种思想做一定程度的简化，因为篇幅关系我们不在这里赘述。如果大家还有其他想法，欢迎留言讨论！\n\n参考文献\nhttps://commandcenter.blogspot.com/2014/01/self-referential-functions-and-design.html\nhttps://coolshell.cn/articles/21146.html\n\n原文地址：<https://mp.weixin.qq.com/s/w1ebAgnzfDzoGG0sn6KGlQ>\n","source":"_posts/如何使用高阶函数编程提升代码的简洁性.md","raw":"---\ntitle: 如何使用高阶函数编程提升代码的简洁性\ndate: 2022-02-24 23:04:47.816\nupdated: 2022-03-10 12:07:39.714\nurl: /archives/ru-he-shi-yong-gao-jie-han-shu-bian-cheng-ti-sheng-dai-ma-de-jian-jie-xing\ncategories: \n- golang\ntags: \n- golang\n---\n\n摘要\n函数是 Go 语言的一等公民，本文采用一种高阶函数的方式，抽象了使用 gorm 查询 DB 的查询条件，将多个表的各种复杂的组合查询抽象成了一个统一的方法和一个配置类，提升了代码的简洁和优雅，同时可以提升开发人员的效率。\n<!--more-->\n背景\n有一张 DB 表，业务上需要按照这个表里的不同字段做筛选查询，这是一个非常普遍的需求，我相信这种需求对于每个做业务开发的人都是绕不开的。比如我们有一张存储用户信息的表，简化之后的表结构如下：\n```mysql\nCREATE TABLE `user_info` (\n  `id` bigint unsigned NOT NULL AUTO_INCREMENT COMMENT '自增主键',\n  `user_id` bigint NOT NULL COMMENT '用户id',\n  `user_name` varchar NOT NULL COMMENT '用户姓名',\n  `role` int NOT NULL DEFAULT '0' COMMENT '角色',\n  `status` int NOT NULL DEFAULT '0' COMMENT '状态',\n  PRIMARY KEY (`id`),\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='用户信息表';\n```\n这个表里有几个关键字段，user_id、user_name 、 role、status。如果我们想按照 user_id 来做筛选，那我们一般是在 dao 层写一个这样的方法(为了示例代码的简洁，这里所有示例代码都省去了错误处理部分)：\n```go\nfunc GetUserInfoByUid(ctx context.Context, userID int64) ([]*resource.UserInfo) {\n   db := GetDB(ctx)\n   db = db.Table(resource.UserInfo{}.TableName())\n   var infos []*resource.UserInfo\n   db = db.Where(\"user_id = ?\", userID)\n   db.Find(&infos)\n   return infos\n}\n```\n如果业务上又需要按照 user_name 来查询，那我们就需要再写一个类似的方法按照 user_name 来查询：\n```go\nfunc GetUserInfoByName(ctx context.Context, name string) ([]*resource.UserInfo) {\n   db := GetDB(ctx)\n   db = db.Table(resource.UserInfo{}.TableName())\n   var infos []*resource.UserInfo\n   db = db.Where(\"user_name = ?\", name)\n   db.Find(&infos)\n   return infos\n}\n```\n可以看到，两个方法的代码极度相似，如果再需要按照 role 或者 status 查询，那不得不再来几个方法，导致相似的方法非常多。当然很容易想到，我们可以用一个方法，多几个入参的形式来解决这个问题，于是，我们把上面两个方法合并成下面这种方法，能够支持按照多个字段筛选查询：\n```go\nfunc GetUserInfo(ctx context.Context, userID int64, name string, role int, status int) ([]*resource.UserInfo) {\n   db := GetDB(ctx)\n   db = db.Table(resource.UserInfo{}.TableName())\n   var infos []*resource.UserInfo\n   if userID > 0 {\n      db = db.Where(\"user_id = ?\", userID)\n   }\n   if name != \"\" {\n      db = db.Where(\"user_name = ?\", name)\n   }\n   if role > 0 {\n      db = db.Where(\"role = ?\", role)\n   }\n   if status > 0 {\n      db = db.Where(\"status = ?\", status)\n   }\n   db.Find(&infos)\n   return infos\n}\n```\n相应地，调用该方法的代码也需要做出改变：\n```go\n//只根据UserID查询\ninfos := GetUserInfo(ctx, userID, \"\", 0, 0)\n//只根据UserName查询\ninfos := GetUserInfo(ctx, 0, name, 0, 0)\n//只根据Role查询\ninfos := GetUserInfo(ctx, 0, \"\", role, 0)\n//只根据Status查询\ninfos := GetUserInfo(ctx, 0, \"\", 0, status)\n```\n这种代码无论是写代码的人还是读代码的人，都会感觉非常难受。我们这里只列举了四个参数，可以想想这个表里如果有十几个到二十个字段都需要做筛选查询，这种代码看上去是一种什么样的感觉。首先，GetUserInfo 方法本身入参非常多，里面充斥着各种 != 0 和 != \"\"的判断，并且需要注意的是，0 一定不能作为字段的有效值，否则 != 0 这种判断就会有问题。其次，作为调用方，明明只是根据一个字段筛选查询，却不得不为其他参数填充一个 0 或者\"\"来占位，而且调用者要特别谨慎，因为一不小心，就可能会把 role 填到了 status 的位置上去，因为他们的类型都一样，编译器不会检查出任何错误，很容易搞出业务 bug。\n\n解决方案\n如果说解决这种问题有段位，那么以上的写法只能算是青铜，接下来我们看看白银、黄金和王者。\n\n白银\n解决这种问题，一种比较常见的方案是，新建一个结构体，把各种查询的字段都放在这个结构体中，然后把这个结构体作为入参传入到 dao 层的查询方法中。而在调用 dao 方法的地方，根据各自的需要，构建包含不同字段的结构体。在这个例子中，我们可以构建一个 UserInfo 的结构体如下：\n```go\ntype UserInfo struct {\n   UserID int64\n   Name string\n   Role int32\n   Status int32\n}\n```\n把 UserInfo 作为入参传给 GetUserInfo 方法，于是 GetUserInfo 方法变成了这样：\n```go\nfunc GetUserInfo(ctx context.Context, info *UserInfo) ([]*resource.UserInfo) {\n   db := GetDB(ctx)\n   db = db.Table(resource.UserInfo{}.TableName())\n   var infos []*resource.UserInfo\n   if info.UserID > 0 {\n      db = db.Where(\"user_id = ?\", info.UserID)\n   }\n   if info.Name != \"\" {\n      db = db.Where(\"user_name = ?\", info.Name)\n   }\n   if info.Role > 0 {\n      db = db.Where(\"role = ?\", info.Role)\n   }\n   if info.Status > 0 {\n      db = db.Where(\"status = ?\", info.Status)\n   }\n   db.Find(&infos)\n   return infos\n}\n```\n相应地，调用该方法的代码也需要变动：\n```go\n//只根据userD查询\ninfo := &UserInfo{\n   UserID: userID,\n}\ninfos := GetUserInfo(ctx, info)\n//只根据name查询\ninfo := &UserInfo{\n   Name: name,\n}\ninfos := GetUserInfo(ctx, info)\n```\n这个代码写到这里，相比最开始的方法其实已经好了不少，至少 dao 层的方法从很多个入参变成了一个，调用方的代码也可以根据自己的需要构建参数，不需要很多空占位符。但是存在的问题也比较明显：仍然有很多判空不说，还引入了一个多余的结构体。如果我们就到此结束的话，多少有点遗憾。\n\n另外，如果我们再扩展一下业务场景，我们使用的不是等值查询，而是多值查询或者区间查询，比如查询 status in (a, b)，那上面的代码又怎么扩展呢？是不是又要引入一个方法，方法繁琐暂且不说，方法名叫啥都会让我们纠结很久；或许可以尝试把每个参数都从单值扩展成数组，然后赋值的地方从 = 改为 in()的方式，所有参数查询都使用 in 显然对性能不是那么友好。\n\n黄金\n接下来我们看看黄金的解法。在上面的方法中，我们引入了一个多余的结构体，并且无法避免在 dao 层的方法中做了很多判空赋值。那么我们能不能不引入 UserInfo 这个多余的结构体，并且也避免这些丑陋的判空？答案是可以的，函数式编程可以很好地解决这个问题，首先我们需要定义一个函数类型：\n```go\ntype Option func(*gorm.DB)\n```\n定义 Option 是一个函数，这个函数的入参类型是*gorm.DB，返回值为空。\n\n然后针对 DB 表中每个需要筛选查询的字段定义一个函数，为这个字段赋值，像下面这样：\n```go\nfunc UserID(userID int64) Option {\n   return func(db *gorm.DB) {\n      db.Where(\"`user_id` = ?\", userID)\n   }\n}\nfunc UserName(name string) Option {\n   return func(db *gorm.DB) {\n      db.Where(\"`user_name` = ?\", name)\n   }\n}\nfunc Role(role int32) Option {\n   return func(db *gorm.DB) {\n      db.Where(\"`role` = ?\", role)\n   }\n}\nfunc Status(status int32) Option {\n   return func(db *gorm.DB) {\n      db.Where(\"`status` = ?\", status)\n   }\n}\n```\n上面这组代码中，入参是一个字段的筛选值，返回的是一个 Option 函数，而这个函数的功能是把入参赋值给当前的【db *gorm.DB】对象。这也就是我们在文章一开始就提到的高阶函数，跟我们普通的函数不太一样，普通的函数返回的是一个简单类型的值或者一个封装类型的结构体，而这种高阶函数返回的是一个具备某种功能的函数。这里多说一句，虽然 go 语言很好地支持了函数式编程，但是由于其目前缺少对泛型的支持，导致高阶函数编程的使用并没有给开发者带来更多的便利，因此在平时业务代码中写高阶函数还是略为少见。而熟悉 JAVA 的同学都知道，JAVA 中的 Map、Reduce、Filter 等高阶函数使用起来非常的舒服。\n\n好，有了这一组函数之后，我们来看看 dao 层的查询方法怎么写：\n```go\nfunc GetUserInfo(ctx context.Context, options ...func(option *gorm.DB)) ([]*resource.UserInfo) {\n   db := GetDB(ctx)\n   db = db.Table(resource.UserInfo{}.TableName())\n   for _, option := range options {\n      option(db)\n   }\n   var infos []*resource.UserInfo\n   db.Find(&infos)\n   return infos\n}\n```\n没有对比就没有伤害，通过和最开始的方法比较，可以看到方法的入参由多个不同类型的参数变成了一组相同类型的函数，因此在处理这些参数的时候，也无需一个一个的判空，而是直接使用一个 for 循环就搞定，相比之前已经简洁了很多。\n\n那么调用该方法的代码怎么写呢，这里直接给出来：\n```go\n//只使用userID查询\ninfos := GetUserInfo(ctx, UserID(userID))\n//只使用userName查询\ninfos := GetUserInfo(ctx, UserName(name))\n//使用role和status同时查询\ninfos := GetUserInfo(ctx, Role(role), Status(status))\n```\n无论是使用任意的单个参数还是使用多个参数组合查询，我们都随便写，不用关注参数顺序，简洁又清晰，可读性也是非常好。\n\n再来考虑上面提到的扩展场景，如果我们需要多值查询，比如查询多个 status，那么我们只需要在 Option 中增加一个小小的函数即可：\n```go\nfunc StatusIn(status []int32) Option {\n   return func(db *gorm.DB) {\n      db.Where(\"`status` in ?\", status)\n   }\n}\n```\n对于其他字段或者等值查询也是同理，代码的简洁不言而喻。\n\n王者\n能优化到上面黄金的阶段，其实已经很简洁了，如果止步于此的话，也是完全可以的。但是如果还想进一步追求极致，那么请继续往下看！\n\n在上面方法中，我们通过高阶函数已经很好地解决了对于一张表中多字段组合查询的代码繁琐问题，但是对于不同的表查询，仍然要针对每个表都写一个查询方法，那么还有没有进一步优化的空间呢？我们发现，在 Option 中定义的这一组高阶函数，压根与某张表没关系，他只是简单地给 gorm.DB 赋值。因此，如果我们有多张表，每个表里都有 user_id、is_deleted、create_time、update_time 这些公共的字段，那么我们完全不用再重复定义一次，只需要在 Option 中定义一个就够了，每张表的查询都可以复用这些函数。进一步思考，我们发现，Option 中维护的是一些傻瓜式的代码，根本不需要我们每次手动去写，可以使用脚本生成，扫描一遍 DB 的表，为每个不重复的字段生成一个 Equal 方法、In 方法、Greater 方法、Less 方法，就可以解决所有表中按照不同字段做等值查询、多值查询、区间查询。\n\n解决了 Option 的问题之后，对于每个表的各种组合查询，就只需要写一个很简单的 Get 方法了，为了方便看，我们在这里再贴一次：\n```go\nfunc GetUserInfo(ctx context.Context, options ...func(option *gorm.DB)) ([]*resource.UserInfo) {\n   db := GetDB(ctx)\n   db = db.Table(resource.UserInfo{}.TableName())\n   for _, option := range options {\n      option(db)\n   }\n   var infos []*resource.UserInfo\n   db.Find(&infos)\n   return infos\n}\n```\n上面这个查询方法是针对 user_info 这个表写的，如果还有其他表，我们还需要为每个表都写一个和这个类似的 Get 方法。如果我们仔细观察每个表的 Get 方法，会发现这些方法其实就有两点不同：\n\n返回值类型不一样；\nTableName 不一样。\n如果我们能解决这两个问题，那我们就能够使用一个方法解决所有表的查询。首先对于第一点返回值不一致的问题，可以参考 json.unmarshal 的做法，把返回类型以一个参数的形式传进来，因为传入的是指针类型，所以就不用再给返回值了；而对于 tableName 不一致的问题，其实可以和上面处理不同参数的方式一样，增加一个 Option 方法来解决：\n```go\nfunc TableName(tableName string) Option {\n   return func(db *gorm.DB) {\n      db.Table(tableName)\n   }\n}\n```\n这样改造之后，我们的 dao 层查询方法就变成了这样：\n```go\nfunc GetRecord(ctx context.Context, in interface{}, options ...func(option *gorm.DB)) {\n   db := GetDB(ctx)\n   for _, option := range options {\n      option(db)\n   }\n   db.Find(in)\n   return\n}\n```\n注意，我们把方法名从之前的 GetUserInfo 变成了GetRecord，因为这个方法不仅能支持对于 user_info 表的查询，而且能够支持对一个库中所有表的查询。也就是说从最开始为每个表建一个类，每个类下面又写很多个查询方法，现在变成了所有表所有查询适用一个方法。\n\n然后我们看看调用这个方法的代码怎么写：\n```go\n//根据userID和userName查询\nvar infos []*resource.UserInfo\nGetRecord(ctx, &infos, TableName(resource.UserInfo{}.TableName()), UserID(userID), UserName(name))\n```\n这里还是给出了查询 user_info 表的示例，在调用的地方指定 tableName 和返回类型。\n\n经过这样的改造之后，我们最终实现了用一个简单的方法【GetRecord】 + 一个可自动生成的配置类【Option】对一个库中所有表的多种组合查询。代码的简洁和优雅又有了一些提升。美中不足的是，在调用查询方法的地方多传了两个参数，一个是返回值变量，一个是 tableName，多少显得有点不那么美观。\n\n总结\n这里通过对 grom 查询条件的抽象，大大简化了对 DB 组合查询的写法，提升了代码的简洁。对于其他 update、insert、delete 三种操作，也可以借用这种思想做一定程度的简化，因为篇幅关系我们不在这里赘述。如果大家还有其他想法，欢迎留言讨论！\n\n参考文献\nhttps://commandcenter.blogspot.com/2014/01/self-referential-functions-and-design.html\nhttps://coolshell.cn/articles/21146.html\n\n原文地址：<https://mp.weixin.qq.com/s/w1ebAgnzfDzoGG0sn6KGlQ>\n","slug":"如何使用高阶函数编程提升代码的简洁性","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clgxpu7z3003rvouv0vc8g2v6","content":"<p>摘要<br>函数是 Go 语言的一等公民，本文采用一种高阶函数的方式，抽象了使用 gorm 查询 DB 的查询条件，将多个表的各种复杂的组合查询抽象成了一个统一的方法和一个配置类，提升了代码的简洁和优雅，同时可以提升开发人员的效率。</p>\n<span id=\"more\"></span>\n<p>背景<br>有一张 DB 表，业务上需要按照这个表里的不同字段做筛选查询，这是一个非常普遍的需求，我相信这种需求对于每个做业务开发的人都是绕不开的。比如我们有一张存储用户信息的表，简化之后的表结构如下：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">CREATE TABLE &#96;user_info&#96; (\n  &#96;id&#96; bigint unsigned NOT NULL AUTO_INCREMENT COMMENT &#39;自增主键&#39;,\n  &#96;user_id&#96; bigint NOT NULL COMMENT &#39;用户id&#39;,\n  &#96;user_name&#96; varchar NOT NULL COMMENT &#39;用户姓名&#39;,\n  &#96;role&#96; int NOT NULL DEFAULT &#39;0&#39; COMMENT &#39;角色&#39;,\n  &#96;status&#96; int NOT NULL DEFAULT &#39;0&#39; COMMENT &#39;状态&#39;,\n  PRIMARY KEY (&#96;id&#96;),\n) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8mb4 COMMENT&#x3D;&#39;用户信息表&#39;;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这个表里有几个关键字段，user_id、user_name 、 role、status。如果我们想按照 user_id 来做筛选，那我们一般是在 dao 层写一个这样的方法(为了示例代码的简洁，这里所有示例代码都省去了错误处理部分)：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">GetUserInfoByUid</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> userID <span class=\"token builtin\">int64</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>resource<span class=\"token punctuation\">.</span>UserInfo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   db <span class=\"token operator\">:=</span> <span class=\"token function\">GetDB</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span>\n   db <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">Table</span><span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">.</span>UserInfo<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">.</span><span class=\"token function\">TableName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">var</span> infos <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>resource<span class=\"token punctuation\">.</span>UserInfo\n   db <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user_id = ?\"</span><span class=\"token punctuation\">,</span> userID<span class=\"token punctuation\">)</span>\n   db<span class=\"token punctuation\">.</span><span class=\"token function\">Find</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>infos<span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">return</span> infos\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>如果业务上又需要按照 user_name 来查询，那我们就需要再写一个类似的方法按照 user_name 来查询：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">GetUserInfoByName</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> name <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>resource<span class=\"token punctuation\">.</span>UserInfo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   db <span class=\"token operator\">:=</span> <span class=\"token function\">GetDB</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span>\n   db <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">Table</span><span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">.</span>UserInfo<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">.</span><span class=\"token function\">TableName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">var</span> infos <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>resource<span class=\"token punctuation\">.</span>UserInfo\n   db <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user_name = ?\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span>\n   db<span class=\"token punctuation\">.</span><span class=\"token function\">Find</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>infos<span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">return</span> infos\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>可以看到，两个方法的代码极度相似，如果再需要按照 role 或者 status 查询，那不得不再来几个方法，导致相似的方法非常多。当然很容易想到，我们可以用一个方法，多几个入参的形式来解决这个问题，于是，我们把上面两个方法合并成下面这种方法，能够支持按照多个字段筛选查询：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">GetUserInfo</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> userID <span class=\"token builtin\">int64</span><span class=\"token punctuation\">,</span> name <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> role <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> status <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>resource<span class=\"token punctuation\">.</span>UserInfo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   db <span class=\"token operator\">:=</span> <span class=\"token function\">GetDB</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span>\n   db <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">Table</span><span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">.</span>UserInfo<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">.</span><span class=\"token function\">TableName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">var</span> infos <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>resource<span class=\"token punctuation\">.</span>UserInfo\n   <span class=\"token keyword\">if</span> userID <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span>\n      db <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user_id = ?\"</span><span class=\"token punctuation\">,</span> userID<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token keyword\">if</span> name <span class=\"token operator\">!=</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">&#123;</span>\n      db <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user_name = ?\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token keyword\">if</span> role <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span>\n      db <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"role = ?\"</span><span class=\"token punctuation\">,</span> role<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token keyword\">if</span> status <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span>\n      db <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"status = ?\"</span><span class=\"token punctuation\">,</span> status<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n   db<span class=\"token punctuation\">.</span><span class=\"token function\">Find</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>infos<span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">return</span> infos\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>相应地，调用该方法的代码也需要做出改变：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//只根据UserID查询</span>\ninfos <span class=\"token operator\">:=</span> <span class=\"token function\">GetUserInfo</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> userID<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//只根据UserName查询</span>\ninfos <span class=\"token operator\">:=</span> <span class=\"token function\">GetUserInfo</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//只根据Role查询</span>\ninfos <span class=\"token operator\">:=</span> <span class=\"token function\">GetUserInfo</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> role<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//只根据Status查询</span>\ninfos <span class=\"token operator\">:=</span> <span class=\"token function\">GetUserInfo</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> status<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这种代码无论是写代码的人还是读代码的人，都会感觉非常难受。我们这里只列举了四个参数，可以想想这个表里如果有十几个到二十个字段都需要做筛选查询，这种代码看上去是一种什么样的感觉。首先，GetUserInfo 方法本身入参非常多，里面充斥着各种 !&#x3D; 0 和 !&#x3D; “”的判断，并且需要注意的是，0 一定不能作为字段的有效值，否则 !&#x3D; 0 这种判断就会有问题。其次，作为调用方，明明只是根据一个字段筛选查询，却不得不为其他参数填充一个 0 或者””来占位，而且调用者要特别谨慎，因为一不小心，就可能会把 role 填到了 status 的位置上去，因为他们的类型都一样，编译器不会检查出任何错误，很容易搞出业务 bug。</p>\n<p>解决方案<br>如果说解决这种问题有段位，那么以上的写法只能算是青铜，接下来我们看看白银、黄金和王者。</p>\n<p>白银<br>解决这种问题，一种比较常见的方案是，新建一个结构体，把各种查询的字段都放在这个结构体中，然后把这个结构体作为入参传入到 dao 层的查询方法中。而在调用 dao 方法的地方，根据各自的需要，构建包含不同字段的结构体。在这个例子中，我们可以构建一个 UserInfo 的结构体如下：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> UserInfo <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n   UserID <span class=\"token builtin\">int64</span>\n   Name <span class=\"token builtin\">string</span>\n   Role <span class=\"token builtin\">int32</span>\n   Status <span class=\"token builtin\">int32</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>把 UserInfo 作为入参传给 GetUserInfo 方法，于是 GetUserInfo 方法变成了这样：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">GetUserInfo</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> info <span class=\"token operator\">*</span>UserInfo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>resource<span class=\"token punctuation\">.</span>UserInfo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   db <span class=\"token operator\">:=</span> <span class=\"token function\">GetDB</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span>\n   db <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">Table</span><span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">.</span>UserInfo<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">.</span><span class=\"token function\">TableName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">var</span> infos <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>resource<span class=\"token punctuation\">.</span>UserInfo\n   <span class=\"token keyword\">if</span> info<span class=\"token punctuation\">.</span>UserID <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span>\n      db <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user_id = ?\"</span><span class=\"token punctuation\">,</span> info<span class=\"token punctuation\">.</span>UserID<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token keyword\">if</span> info<span class=\"token punctuation\">.</span>Name <span class=\"token operator\">!=</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">&#123;</span>\n      db <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user_name = ?\"</span><span class=\"token punctuation\">,</span> info<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token keyword\">if</span> info<span class=\"token punctuation\">.</span>Role <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span>\n      db <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"role = ?\"</span><span class=\"token punctuation\">,</span> info<span class=\"token punctuation\">.</span>Role<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token keyword\">if</span> info<span class=\"token punctuation\">.</span>Status <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span>\n      db <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"status = ?\"</span><span class=\"token punctuation\">,</span> info<span class=\"token punctuation\">.</span>Status<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n   db<span class=\"token punctuation\">.</span><span class=\"token function\">Find</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>infos<span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">return</span> infos\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>相应地，调用该方法的代码也需要变动：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//只根据userD查询</span>\ninfo <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>UserInfo<span class=\"token punctuation\">&#123;</span>\n   UserID<span class=\"token punctuation\">:</span> userID<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span>\ninfos <span class=\"token operator\">:=</span> <span class=\"token function\">GetUserInfo</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> info<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//只根据name查询</span>\ninfo <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>UserInfo<span class=\"token punctuation\">&#123;</span>\n   Name<span class=\"token punctuation\">:</span> name<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span>\ninfos <span class=\"token operator\">:=</span> <span class=\"token function\">GetUserInfo</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> info<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这个代码写到这里，相比最开始的方法其实已经好了不少，至少 dao 层的方法从很多个入参变成了一个，调用方的代码也可以根据自己的需要构建参数，不需要很多空占位符。但是存在的问题也比较明显：仍然有很多判空不说，还引入了一个多余的结构体。如果我们就到此结束的话，多少有点遗憾。</p>\n<p>另外，如果我们再扩展一下业务场景，我们使用的不是等值查询，而是多值查询或者区间查询，比如查询 status in (a, b)，那上面的代码又怎么扩展呢？是不是又要引入一个方法，方法繁琐暂且不说，方法名叫啥都会让我们纠结很久；或许可以尝试把每个参数都从单值扩展成数组，然后赋值的地方从 &#x3D; 改为 in()的方式，所有参数查询都使用 in 显然对性能不是那么友好。</p>\n<p>黄金<br>接下来我们看看黄金的解法。在上面的方法中，我们引入了一个多余的结构体，并且无法避免在 dao 层的方法中做了很多判空赋值。那么我们能不能不引入 UserInfo 这个多余的结构体，并且也避免这些丑陋的判空？答案是可以的，函数式编程可以很好地解决这个问题，首先我们需要定义一个函数类型：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Option <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>gorm<span class=\"token punctuation\">.</span>DB<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>定义 Option 是一个函数，这个函数的入参类型是*gorm.DB，返回值为空。</p>\n<p>然后针对 DB 表中每个需要筛选查询的字段定义一个函数，为这个字段赋值，像下面这样：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">UserID</span><span class=\"token punctuation\">(</span>userID <span class=\"token builtin\">int64</span><span class=\"token punctuation\">)</span> Option <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">return</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>db <span class=\"token operator\">*</span>gorm<span class=\"token punctuation\">.</span>DB<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      db<span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"`user_id` = ?\"</span><span class=\"token punctuation\">,</span> userID<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">UserName</span><span class=\"token punctuation\">(</span>name <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> Option <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">return</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>db <span class=\"token operator\">*</span>gorm<span class=\"token punctuation\">.</span>DB<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      db<span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"`user_name` = ?\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">Role</span><span class=\"token punctuation\">(</span>role <span class=\"token builtin\">int32</span><span class=\"token punctuation\">)</span> Option <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">return</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>db <span class=\"token operator\">*</span>gorm<span class=\"token punctuation\">.</span>DB<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      db<span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"`role` = ?\"</span><span class=\"token punctuation\">,</span> role<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">Status</span><span class=\"token punctuation\">(</span>status <span class=\"token builtin\">int32</span><span class=\"token punctuation\">)</span> Option <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">return</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>db <span class=\"token operator\">*</span>gorm<span class=\"token punctuation\">.</span>DB<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      db<span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"`status` = ?\"</span><span class=\"token punctuation\">,</span> status<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>上面这组代码中，入参是一个字段的筛选值，返回的是一个 Option 函数，而这个函数的功能是把入参赋值给当前的【db *gorm.DB】对象。这也就是我们在文章一开始就提到的高阶函数，跟我们普通的函数不太一样，普通的函数返回的是一个简单类型的值或者一个封装类型的结构体，而这种高阶函数返回的是一个具备某种功能的函数。这里多说一句，虽然 go 语言很好地支持了函数式编程，但是由于其目前缺少对泛型的支持，导致高阶函数编程的使用并没有给开发者带来更多的便利，因此在平时业务代码中写高阶函数还是略为少见。而熟悉 JAVA 的同学都知道，JAVA 中的 Map、Reduce、Filter 等高阶函数使用起来非常的舒服。</p>\n<p>好，有了这一组函数之后，我们来看看 dao 层的查询方法怎么写：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">GetUserInfo</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> options <span class=\"token operator\">...</span><span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>option <span class=\"token operator\">*</span>gorm<span class=\"token punctuation\">.</span>DB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>resource<span class=\"token punctuation\">.</span>UserInfo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   db <span class=\"token operator\">:=</span> <span class=\"token function\">GetDB</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span>\n   db <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">Table</span><span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">.</span>UserInfo<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">.</span><span class=\"token function\">TableName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> option <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> options <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">option</span><span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token keyword\">var</span> infos <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>resource<span class=\"token punctuation\">.</span>UserInfo\n   db<span class=\"token punctuation\">.</span><span class=\"token function\">Find</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>infos<span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">return</span> infos\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>没有对比就没有伤害，通过和最开始的方法比较，可以看到方法的入参由多个不同类型的参数变成了一组相同类型的函数，因此在处理这些参数的时候，也无需一个一个的判空，而是直接使用一个 for 循环就搞定，相比之前已经简洁了很多。</p>\n<p>那么调用该方法的代码怎么写呢，这里直接给出来：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//只使用userID查询</span>\ninfos <span class=\"token operator\">:=</span> <span class=\"token function\">GetUserInfo</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token function\">UserID</span><span class=\"token punctuation\">(</span>userID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//只使用userName查询</span>\ninfos <span class=\"token operator\">:=</span> <span class=\"token function\">GetUserInfo</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token function\">UserName</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//使用role和status同时查询</span>\ninfos <span class=\"token operator\">:=</span> <span class=\"token function\">GetUserInfo</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token function\">Role</span><span class=\"token punctuation\">(</span>role<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Status</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>无论是使用任意的单个参数还是使用多个参数组合查询，我们都随便写，不用关注参数顺序，简洁又清晰，可读性也是非常好。</p>\n<p>再来考虑上面提到的扩展场景，如果我们需要多值查询，比如查询多个 status，那么我们只需要在 Option 中增加一个小小的函数即可：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">StatusIn</span><span class=\"token punctuation\">(</span>status <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int32</span><span class=\"token punctuation\">)</span> Option <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">return</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>db <span class=\"token operator\">*</span>gorm<span class=\"token punctuation\">.</span>DB<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      db<span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"`status` in ?\"</span><span class=\"token punctuation\">,</span> status<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>对于其他字段或者等值查询也是同理，代码的简洁不言而喻。</p>\n<p>王者<br>能优化到上面黄金的阶段，其实已经很简洁了，如果止步于此的话，也是完全可以的。但是如果还想进一步追求极致，那么请继续往下看！</p>\n<p>在上面方法中，我们通过高阶函数已经很好地解决了对于一张表中多字段组合查询的代码繁琐问题，但是对于不同的表查询，仍然要针对每个表都写一个查询方法，那么还有没有进一步优化的空间呢？我们发现，在 Option 中定义的这一组高阶函数，压根与某张表没关系，他只是简单地给 gorm.DB 赋值。因此，如果我们有多张表，每个表里都有 user_id、is_deleted、create_time、update_time 这些公共的字段，那么我们完全不用再重复定义一次，只需要在 Option 中定义一个就够了，每张表的查询都可以复用这些函数。进一步思考，我们发现，Option 中维护的是一些傻瓜式的代码，根本不需要我们每次手动去写，可以使用脚本生成，扫描一遍 DB 的表，为每个不重复的字段生成一个 Equal 方法、In 方法、Greater 方法、Less 方法，就可以解决所有表中按照不同字段做等值查询、多值查询、区间查询。</p>\n<p>解决了 Option 的问题之后，对于每个表的各种组合查询，就只需要写一个很简单的 Get 方法了，为了方便看，我们在这里再贴一次：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">GetUserInfo</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> options <span class=\"token operator\">...</span><span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>option <span class=\"token operator\">*</span>gorm<span class=\"token punctuation\">.</span>DB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>resource<span class=\"token punctuation\">.</span>UserInfo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   db <span class=\"token operator\">:=</span> <span class=\"token function\">GetDB</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span>\n   db <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">Table</span><span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">.</span>UserInfo<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">.</span><span class=\"token function\">TableName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> option <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> options <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">option</span><span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token keyword\">var</span> infos <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>resource<span class=\"token punctuation\">.</span>UserInfo\n   db<span class=\"token punctuation\">.</span><span class=\"token function\">Find</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>infos<span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">return</span> infos\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>上面这个查询方法是针对 user_info 这个表写的，如果还有其他表，我们还需要为每个表都写一个和这个类似的 Get 方法。如果我们仔细观察每个表的 Get 方法，会发现这些方法其实就有两点不同：</p>\n<p>返回值类型不一样；<br>TableName 不一样。<br>如果我们能解决这两个问题，那我们就能够使用一个方法解决所有表的查询。首先对于第一点返回值不一致的问题，可以参考 json.unmarshal 的做法，把返回类型以一个参数的形式传进来，因为传入的是指针类型，所以就不用再给返回值了；而对于 tableName 不一致的问题，其实可以和上面处理不同参数的方式一样，增加一个 Option 方法来解决：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">TableName</span><span class=\"token punctuation\">(</span>tableName <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> Option <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">return</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>db <span class=\"token operator\">*</span>gorm<span class=\"token punctuation\">.</span>DB<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      db<span class=\"token punctuation\">.</span><span class=\"token function\">Table</span><span class=\"token punctuation\">(</span>tableName<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这样改造之后，我们的 dao 层查询方法就变成了这样：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">GetRecord</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> in <span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> options <span class=\"token operator\">...</span><span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>option <span class=\"token operator\">*</span>gorm<span class=\"token punctuation\">.</span>DB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   db <span class=\"token operator\">:=</span> <span class=\"token function\">GetDB</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> option <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> options <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">option</span><span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n   db<span class=\"token punctuation\">.</span><span class=\"token function\">Find</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">return</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>注意，我们把方法名从之前的 GetUserInfo 变成了GetRecord，因为这个方法不仅能支持对于 user_info 表的查询，而且能够支持对一个库中所有表的查询。也就是说从最开始为每个表建一个类，每个类下面又写很多个查询方法，现在变成了所有表所有查询适用一个方法。</p>\n<p>然后我们看看调用这个方法的代码怎么写：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//根据userID和userName查询</span>\n<span class=\"token keyword\">var</span> infos <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>resource<span class=\"token punctuation\">.</span>UserInfo\n<span class=\"token function\">GetRecord</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>infos<span class=\"token punctuation\">,</span> <span class=\"token function\">TableName</span><span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">.</span>UserInfo<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">.</span><span class=\"token function\">TableName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">UserID</span><span class=\"token punctuation\">(</span>userID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">UserName</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>这里还是给出了查询 user_info 表的示例，在调用的地方指定 tableName 和返回类型。</p>\n<p>经过这样的改造之后，我们最终实现了用一个简单的方法【GetRecord】 + 一个可自动生成的配置类【Option】对一个库中所有表的多种组合查询。代码的简洁和优雅又有了一些提升。美中不足的是，在调用查询方法的地方多传了两个参数，一个是返回值变量，一个是 tableName，多少显得有点不那么美观。</p>\n<p>总结<br>这里通过对 grom 查询条件的抽象，大大简化了对 DB 组合查询的写法，提升了代码的简洁。对于其他 update、insert、delete 三种操作，也可以借用这种思想做一定程度的简化，因为篇幅关系我们不在这里赘述。如果大家还有其他想法，欢迎留言讨论！</p>\n<p>参考文献<br><a href=\"https://commandcenter.blogspot.com/2014/01/self-referential-functions-and-design.html\">https://commandcenter.blogspot.com/2014/01/self-referential-functions-and-design.html</a><br><a href=\"https://coolshell.cn/articles/21146.html\">https://coolshell.cn/articles/21146.html</a></p>\n<p>原文地址：<a href=\"https://mp.weixin.qq.com/s/w1ebAgnzfDzoGG0sn6KGlQ\">https://mp.weixin.qq.com/s/w1ebAgnzfDzoGG0sn6KGlQ</a></p>\n","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}},"excerpt":"<p>摘要<br>函数是 Go 语言的一等公民，本文采用一种高阶函数的方式，抽象了使用 gorm 查询 DB 的查询条件，将多个表的各种复杂的组合查询抽象成了一个统一的方法和一个配置类，提升了代码的简洁和优雅，同时可以提升开发人员的效率。</p>","more":"<p>背景<br>有一张 DB 表，业务上需要按照这个表里的不同字段做筛选查询，这是一个非常普遍的需求，我相信这种需求对于每个做业务开发的人都是绕不开的。比如我们有一张存储用户信息的表，简化之后的表结构如下：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">CREATE TABLE &#96;user_info&#96; (\n  &#96;id&#96; bigint unsigned NOT NULL AUTO_INCREMENT COMMENT &#39;自增主键&#39;,\n  &#96;user_id&#96; bigint NOT NULL COMMENT &#39;用户id&#39;,\n  &#96;user_name&#96; varchar NOT NULL COMMENT &#39;用户姓名&#39;,\n  &#96;role&#96; int NOT NULL DEFAULT &#39;0&#39; COMMENT &#39;角色&#39;,\n  &#96;status&#96; int NOT NULL DEFAULT &#39;0&#39; COMMENT &#39;状态&#39;,\n  PRIMARY KEY (&#96;id&#96;),\n) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8mb4 COMMENT&#x3D;&#39;用户信息表&#39;;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这个表里有几个关键字段，user_id、user_name 、 role、status。如果我们想按照 user_id 来做筛选，那我们一般是在 dao 层写一个这样的方法(为了示例代码的简洁，这里所有示例代码都省去了错误处理部分)：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">GetUserInfoByUid</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> userID <span class=\"token builtin\">int64</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>resource<span class=\"token punctuation\">.</span>UserInfo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   db <span class=\"token operator\">:=</span> <span class=\"token function\">GetDB</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span>\n   db <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">Table</span><span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">.</span>UserInfo<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">.</span><span class=\"token function\">TableName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">var</span> infos <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>resource<span class=\"token punctuation\">.</span>UserInfo\n   db <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user_id = ?\"</span><span class=\"token punctuation\">,</span> userID<span class=\"token punctuation\">)</span>\n   db<span class=\"token punctuation\">.</span><span class=\"token function\">Find</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>infos<span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">return</span> infos\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>如果业务上又需要按照 user_name 来查询，那我们就需要再写一个类似的方法按照 user_name 来查询：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">GetUserInfoByName</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> name <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>resource<span class=\"token punctuation\">.</span>UserInfo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   db <span class=\"token operator\">:=</span> <span class=\"token function\">GetDB</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span>\n   db <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">Table</span><span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">.</span>UserInfo<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">.</span><span class=\"token function\">TableName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">var</span> infos <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>resource<span class=\"token punctuation\">.</span>UserInfo\n   db <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user_name = ?\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span>\n   db<span class=\"token punctuation\">.</span><span class=\"token function\">Find</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>infos<span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">return</span> infos\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>可以看到，两个方法的代码极度相似，如果再需要按照 role 或者 status 查询，那不得不再来几个方法，导致相似的方法非常多。当然很容易想到，我们可以用一个方法，多几个入参的形式来解决这个问题，于是，我们把上面两个方法合并成下面这种方法，能够支持按照多个字段筛选查询：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">GetUserInfo</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> userID <span class=\"token builtin\">int64</span><span class=\"token punctuation\">,</span> name <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> role <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> status <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>resource<span class=\"token punctuation\">.</span>UserInfo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   db <span class=\"token operator\">:=</span> <span class=\"token function\">GetDB</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span>\n   db <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">Table</span><span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">.</span>UserInfo<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">.</span><span class=\"token function\">TableName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">var</span> infos <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>resource<span class=\"token punctuation\">.</span>UserInfo\n   <span class=\"token keyword\">if</span> userID <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span>\n      db <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user_id = ?\"</span><span class=\"token punctuation\">,</span> userID<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token keyword\">if</span> name <span class=\"token operator\">!=</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">&#123;</span>\n      db <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user_name = ?\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token keyword\">if</span> role <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span>\n      db <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"role = ?\"</span><span class=\"token punctuation\">,</span> role<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token keyword\">if</span> status <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span>\n      db <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"status = ?\"</span><span class=\"token punctuation\">,</span> status<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n   db<span class=\"token punctuation\">.</span><span class=\"token function\">Find</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>infos<span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">return</span> infos\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>相应地，调用该方法的代码也需要做出改变：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//只根据UserID查询</span>\ninfos <span class=\"token operator\">:=</span> <span class=\"token function\">GetUserInfo</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> userID<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//只根据UserName查询</span>\ninfos <span class=\"token operator\">:=</span> <span class=\"token function\">GetUserInfo</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//只根据Role查询</span>\ninfos <span class=\"token operator\">:=</span> <span class=\"token function\">GetUserInfo</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> role<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//只根据Status查询</span>\ninfos <span class=\"token operator\">:=</span> <span class=\"token function\">GetUserInfo</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> status<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这种代码无论是写代码的人还是读代码的人，都会感觉非常难受。我们这里只列举了四个参数，可以想想这个表里如果有十几个到二十个字段都需要做筛选查询，这种代码看上去是一种什么样的感觉。首先，GetUserInfo 方法本身入参非常多，里面充斥着各种 !&#x3D; 0 和 !&#x3D; “”的判断，并且需要注意的是，0 一定不能作为字段的有效值，否则 !&#x3D; 0 这种判断就会有问题。其次，作为调用方，明明只是根据一个字段筛选查询，却不得不为其他参数填充一个 0 或者””来占位，而且调用者要特别谨慎，因为一不小心，就可能会把 role 填到了 status 的位置上去，因为他们的类型都一样，编译器不会检查出任何错误，很容易搞出业务 bug。</p>\n<p>解决方案<br>如果说解决这种问题有段位，那么以上的写法只能算是青铜，接下来我们看看白银、黄金和王者。</p>\n<p>白银<br>解决这种问题，一种比较常见的方案是，新建一个结构体，把各种查询的字段都放在这个结构体中，然后把这个结构体作为入参传入到 dao 层的查询方法中。而在调用 dao 方法的地方，根据各自的需要，构建包含不同字段的结构体。在这个例子中，我们可以构建一个 UserInfo 的结构体如下：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> UserInfo <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n   UserID <span class=\"token builtin\">int64</span>\n   Name <span class=\"token builtin\">string</span>\n   Role <span class=\"token builtin\">int32</span>\n   Status <span class=\"token builtin\">int32</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>把 UserInfo 作为入参传给 GetUserInfo 方法，于是 GetUserInfo 方法变成了这样：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">GetUserInfo</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> info <span class=\"token operator\">*</span>UserInfo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>resource<span class=\"token punctuation\">.</span>UserInfo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   db <span class=\"token operator\">:=</span> <span class=\"token function\">GetDB</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span>\n   db <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">Table</span><span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">.</span>UserInfo<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">.</span><span class=\"token function\">TableName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">var</span> infos <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>resource<span class=\"token punctuation\">.</span>UserInfo\n   <span class=\"token keyword\">if</span> info<span class=\"token punctuation\">.</span>UserID <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span>\n      db <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user_id = ?\"</span><span class=\"token punctuation\">,</span> info<span class=\"token punctuation\">.</span>UserID<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token keyword\">if</span> info<span class=\"token punctuation\">.</span>Name <span class=\"token operator\">!=</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">&#123;</span>\n      db <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user_name = ?\"</span><span class=\"token punctuation\">,</span> info<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token keyword\">if</span> info<span class=\"token punctuation\">.</span>Role <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span>\n      db <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"role = ?\"</span><span class=\"token punctuation\">,</span> info<span class=\"token punctuation\">.</span>Role<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token keyword\">if</span> info<span class=\"token punctuation\">.</span>Status <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span>\n      db <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"status = ?\"</span><span class=\"token punctuation\">,</span> info<span class=\"token punctuation\">.</span>Status<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n   db<span class=\"token punctuation\">.</span><span class=\"token function\">Find</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>infos<span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">return</span> infos\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>相应地，调用该方法的代码也需要变动：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//只根据userD查询</span>\ninfo <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>UserInfo<span class=\"token punctuation\">&#123;</span>\n   UserID<span class=\"token punctuation\">:</span> userID<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span>\ninfos <span class=\"token operator\">:=</span> <span class=\"token function\">GetUserInfo</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> info<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//只根据name查询</span>\ninfo <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>UserInfo<span class=\"token punctuation\">&#123;</span>\n   Name<span class=\"token punctuation\">:</span> name<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span>\ninfos <span class=\"token operator\">:=</span> <span class=\"token function\">GetUserInfo</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> info<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这个代码写到这里，相比最开始的方法其实已经好了不少，至少 dao 层的方法从很多个入参变成了一个，调用方的代码也可以根据自己的需要构建参数，不需要很多空占位符。但是存在的问题也比较明显：仍然有很多判空不说，还引入了一个多余的结构体。如果我们就到此结束的话，多少有点遗憾。</p>\n<p>另外，如果我们再扩展一下业务场景，我们使用的不是等值查询，而是多值查询或者区间查询，比如查询 status in (a, b)，那上面的代码又怎么扩展呢？是不是又要引入一个方法，方法繁琐暂且不说，方法名叫啥都会让我们纠结很久；或许可以尝试把每个参数都从单值扩展成数组，然后赋值的地方从 &#x3D; 改为 in()的方式，所有参数查询都使用 in 显然对性能不是那么友好。</p>\n<p>黄金<br>接下来我们看看黄金的解法。在上面的方法中，我们引入了一个多余的结构体，并且无法避免在 dao 层的方法中做了很多判空赋值。那么我们能不能不引入 UserInfo 这个多余的结构体，并且也避免这些丑陋的判空？答案是可以的，函数式编程可以很好地解决这个问题，首先我们需要定义一个函数类型：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Option <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>gorm<span class=\"token punctuation\">.</span>DB<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>定义 Option 是一个函数，这个函数的入参类型是*gorm.DB，返回值为空。</p>\n<p>然后针对 DB 表中每个需要筛选查询的字段定义一个函数，为这个字段赋值，像下面这样：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">UserID</span><span class=\"token punctuation\">(</span>userID <span class=\"token builtin\">int64</span><span class=\"token punctuation\">)</span> Option <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">return</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>db <span class=\"token operator\">*</span>gorm<span class=\"token punctuation\">.</span>DB<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      db<span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"`user_id` = ?\"</span><span class=\"token punctuation\">,</span> userID<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">UserName</span><span class=\"token punctuation\">(</span>name <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> Option <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">return</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>db <span class=\"token operator\">*</span>gorm<span class=\"token punctuation\">.</span>DB<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      db<span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"`user_name` = ?\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">Role</span><span class=\"token punctuation\">(</span>role <span class=\"token builtin\">int32</span><span class=\"token punctuation\">)</span> Option <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">return</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>db <span class=\"token operator\">*</span>gorm<span class=\"token punctuation\">.</span>DB<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      db<span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"`role` = ?\"</span><span class=\"token punctuation\">,</span> role<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">Status</span><span class=\"token punctuation\">(</span>status <span class=\"token builtin\">int32</span><span class=\"token punctuation\">)</span> Option <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">return</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>db <span class=\"token operator\">*</span>gorm<span class=\"token punctuation\">.</span>DB<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      db<span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"`status` = ?\"</span><span class=\"token punctuation\">,</span> status<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>上面这组代码中，入参是一个字段的筛选值，返回的是一个 Option 函数，而这个函数的功能是把入参赋值给当前的【db *gorm.DB】对象。这也就是我们在文章一开始就提到的高阶函数，跟我们普通的函数不太一样，普通的函数返回的是一个简单类型的值或者一个封装类型的结构体，而这种高阶函数返回的是一个具备某种功能的函数。这里多说一句，虽然 go 语言很好地支持了函数式编程，但是由于其目前缺少对泛型的支持，导致高阶函数编程的使用并没有给开发者带来更多的便利，因此在平时业务代码中写高阶函数还是略为少见。而熟悉 JAVA 的同学都知道，JAVA 中的 Map、Reduce、Filter 等高阶函数使用起来非常的舒服。</p>\n<p>好，有了这一组函数之后，我们来看看 dao 层的查询方法怎么写：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">GetUserInfo</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> options <span class=\"token operator\">...</span><span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>option <span class=\"token operator\">*</span>gorm<span class=\"token punctuation\">.</span>DB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>resource<span class=\"token punctuation\">.</span>UserInfo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   db <span class=\"token operator\">:=</span> <span class=\"token function\">GetDB</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span>\n   db <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">Table</span><span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">.</span>UserInfo<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">.</span><span class=\"token function\">TableName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> option <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> options <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">option</span><span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token keyword\">var</span> infos <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>resource<span class=\"token punctuation\">.</span>UserInfo\n   db<span class=\"token punctuation\">.</span><span class=\"token function\">Find</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>infos<span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">return</span> infos\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>没有对比就没有伤害，通过和最开始的方法比较，可以看到方法的入参由多个不同类型的参数变成了一组相同类型的函数，因此在处理这些参数的时候，也无需一个一个的判空，而是直接使用一个 for 循环就搞定，相比之前已经简洁了很多。</p>\n<p>那么调用该方法的代码怎么写呢，这里直接给出来：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//只使用userID查询</span>\ninfos <span class=\"token operator\">:=</span> <span class=\"token function\">GetUserInfo</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token function\">UserID</span><span class=\"token punctuation\">(</span>userID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//只使用userName查询</span>\ninfos <span class=\"token operator\">:=</span> <span class=\"token function\">GetUserInfo</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token function\">UserName</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//使用role和status同时查询</span>\ninfos <span class=\"token operator\">:=</span> <span class=\"token function\">GetUserInfo</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token function\">Role</span><span class=\"token punctuation\">(</span>role<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Status</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>无论是使用任意的单个参数还是使用多个参数组合查询，我们都随便写，不用关注参数顺序，简洁又清晰，可读性也是非常好。</p>\n<p>再来考虑上面提到的扩展场景，如果我们需要多值查询，比如查询多个 status，那么我们只需要在 Option 中增加一个小小的函数即可：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">StatusIn</span><span class=\"token punctuation\">(</span>status <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int32</span><span class=\"token punctuation\">)</span> Option <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">return</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>db <span class=\"token operator\">*</span>gorm<span class=\"token punctuation\">.</span>DB<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      db<span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"`status` in ?\"</span><span class=\"token punctuation\">,</span> status<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>对于其他字段或者等值查询也是同理，代码的简洁不言而喻。</p>\n<p>王者<br>能优化到上面黄金的阶段，其实已经很简洁了，如果止步于此的话，也是完全可以的。但是如果还想进一步追求极致，那么请继续往下看！</p>\n<p>在上面方法中，我们通过高阶函数已经很好地解决了对于一张表中多字段组合查询的代码繁琐问题，但是对于不同的表查询，仍然要针对每个表都写一个查询方法，那么还有没有进一步优化的空间呢？我们发现，在 Option 中定义的这一组高阶函数，压根与某张表没关系，他只是简单地给 gorm.DB 赋值。因此，如果我们有多张表，每个表里都有 user_id、is_deleted、create_time、update_time 这些公共的字段，那么我们完全不用再重复定义一次，只需要在 Option 中定义一个就够了，每张表的查询都可以复用这些函数。进一步思考，我们发现，Option 中维护的是一些傻瓜式的代码，根本不需要我们每次手动去写，可以使用脚本生成，扫描一遍 DB 的表，为每个不重复的字段生成一个 Equal 方法、In 方法、Greater 方法、Less 方法，就可以解决所有表中按照不同字段做等值查询、多值查询、区间查询。</p>\n<p>解决了 Option 的问题之后，对于每个表的各种组合查询，就只需要写一个很简单的 Get 方法了，为了方便看，我们在这里再贴一次：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">GetUserInfo</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> options <span class=\"token operator\">...</span><span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>option <span class=\"token operator\">*</span>gorm<span class=\"token punctuation\">.</span>DB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>resource<span class=\"token punctuation\">.</span>UserInfo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   db <span class=\"token operator\">:=</span> <span class=\"token function\">GetDB</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span>\n   db <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">Table</span><span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">.</span>UserInfo<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">.</span><span class=\"token function\">TableName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> option <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> options <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">option</span><span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token keyword\">var</span> infos <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>resource<span class=\"token punctuation\">.</span>UserInfo\n   db<span class=\"token punctuation\">.</span><span class=\"token function\">Find</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>infos<span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">return</span> infos\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>上面这个查询方法是针对 user_info 这个表写的，如果还有其他表，我们还需要为每个表都写一个和这个类似的 Get 方法。如果我们仔细观察每个表的 Get 方法，会发现这些方法其实就有两点不同：</p>\n<p>返回值类型不一样；<br>TableName 不一样。<br>如果我们能解决这两个问题，那我们就能够使用一个方法解决所有表的查询。首先对于第一点返回值不一致的问题，可以参考 json.unmarshal 的做法，把返回类型以一个参数的形式传进来，因为传入的是指针类型，所以就不用再给返回值了；而对于 tableName 不一致的问题，其实可以和上面处理不同参数的方式一样，增加一个 Option 方法来解决：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">TableName</span><span class=\"token punctuation\">(</span>tableName <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> Option <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">return</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>db <span class=\"token operator\">*</span>gorm<span class=\"token punctuation\">.</span>DB<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      db<span class=\"token punctuation\">.</span><span class=\"token function\">Table</span><span class=\"token punctuation\">(</span>tableName<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这样改造之后，我们的 dao 层查询方法就变成了这样：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">GetRecord</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> in <span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> options <span class=\"token operator\">...</span><span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>option <span class=\"token operator\">*</span>gorm<span class=\"token punctuation\">.</span>DB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   db <span class=\"token operator\">:=</span> <span class=\"token function\">GetDB</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> option <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> options <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">option</span><span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n   db<span class=\"token punctuation\">.</span><span class=\"token function\">Find</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">return</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>注意，我们把方法名从之前的 GetUserInfo 变成了GetRecord，因为这个方法不仅能支持对于 user_info 表的查询，而且能够支持对一个库中所有表的查询。也就是说从最开始为每个表建一个类，每个类下面又写很多个查询方法，现在变成了所有表所有查询适用一个方法。</p>\n<p>然后我们看看调用这个方法的代码怎么写：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//根据userID和userName查询</span>\n<span class=\"token keyword\">var</span> infos <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>resource<span class=\"token punctuation\">.</span>UserInfo\n<span class=\"token function\">GetRecord</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>infos<span class=\"token punctuation\">,</span> <span class=\"token function\">TableName</span><span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">.</span>UserInfo<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">.</span><span class=\"token function\">TableName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">UserID</span><span class=\"token punctuation\">(</span>userID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">UserName</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>这里还是给出了查询 user_info 表的示例，在调用的地方指定 tableName 和返回类型。</p>\n<p>经过这样的改造之后，我们最终实现了用一个简单的方法【GetRecord】 + 一个可自动生成的配置类【Option】对一个库中所有表的多种组合查询。代码的简洁和优雅又有了一些提升。美中不足的是，在调用查询方法的地方多传了两个参数，一个是返回值变量，一个是 tableName，多少显得有点不那么美观。</p>\n<p>总结<br>这里通过对 grom 查询条件的抽象，大大简化了对 DB 组合查询的写法，提升了代码的简洁。对于其他 update、insert、delete 三种操作，也可以借用这种思想做一定程度的简化，因为篇幅关系我们不在这里赘述。如果大家还有其他想法，欢迎留言讨论！</p>\n<p>参考文献<br><a href=\"https://commandcenter.blogspot.com/2014/01/self-referential-functions-and-design.html\">https://commandcenter.blogspot.com/2014/01/self-referential-functions-and-design.html</a><br><a href=\"https://coolshell.cn/articles/21146.html\">https://coolshell.cn/articles/21146.html</a></p>\n<p>原文地址：<a href=\"https://mp.weixin.qq.com/s/w1ebAgnzfDzoGG0sn6KGlQ\">https://mp.weixin.qq.com/s/w1ebAgnzfDzoGG0sn6KGlQ</a></p>"},{"title":"获取项目中 golang 代码行数","date":"2022-03-10T08:53:10.671Z","updated":"2022-03-10T08:53:10.671Z","url":"/archives/huo-qu-xiang-mu-zhong-golangdai-ma-xing-shu","_content":"\n获取包\n```bash\ngo get -u github.com/hhatto/gocloc/cmd/gocloc\n```\n在项目下执行命令\n```bash\ngocloc  ./\n```\n![image.png](/upload/2022/03/image-8779d8ceda504a4e96579fa4fcb26844.png)","source":"_posts/获取项目中 golang 代码行数.md","raw":"---\ntitle: 获取项目中 golang 代码行数\ndate: 2022-03-10 16:53:10.671\nupdated: 2022-03-10 16:53:10.671\nurl: /archives/huo-qu-xiang-mu-zhong-golangdai-ma-xing-shu\ncategories: \n- golang\ntags: \n- golang\n---\n\n获取包\n```bash\ngo get -u github.com/hhatto/gocloc/cmd/gocloc\n```\n在项目下执行命令\n```bash\ngocloc  ./\n```\n![image.png](/upload/2022/03/image-8779d8ceda504a4e96579fa4fcb26844.png)","slug":"获取项目中 golang 代码行数","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clgxpu7z5003wvouv7ndlh34l","content":"<p>获取包</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">go get -u github.com/hhatto/gocloc/cmd/gocloc<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>在项目下执行命令</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">gocloc  ./<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"/upload/2022/03/image-8779d8ceda504a4e96579fa4fcb26844.png\" alt=\"image.png\"></p>\n","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}},"excerpt":"","more":"<p>获取包</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">go get -u github.com/hhatto/gocloc/cmd/gocloc<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>在项目下执行命令</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">gocloc  ./<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"/upload/2022/03/image-8779d8ceda504a4e96579fa4fcb26844.png\" alt=\"image.png\"></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clgxpu7wz0001vouvffw2e2nd","category_id":"clgxpu7x50004vouv78wu6m6o","_id":"clgxpu7xh000fvouvfvsoh0kp"},{"post_id":"clgxpu7xf000dvouv18g45vhr","category_id":"clgxpu7x50004vouv78wu6m6o","_id":"clgxpu7xk000lvouv1qmc4fzg"},{"post_id":"clgxpu7x30003vouvadzwawuu","category_id":"clgxpu7xe000avouvf80819vx","_id":"clgxpu7xl000pvouv4x75bu0i"},{"post_id":"clgxpu7xb0007vouvg8asf2j1","category_id":"clgxpu7xh000gvouv6z9l4uob","_id":"clgxpu7xn000tvouv7xbpa2o2"},{"post_id":"clgxpu7xc0008vouv04a9cv3n","category_id":"clgxpu7xk000mvouv0l4yfgfi","_id":"clgxpu7xp000yvouv16e50m7l"},{"post_id":"clgxpu7xg000evouvewgngszp","category_id":"clgxpu7xn000uvouv718afrmh","_id":"clgxpu7xu0017vouvej0t7we8"},{"post_id":"clgxpu7xi000jvouv5mr42iln","category_id":"clgxpu7xn000uvouv718afrmh","_id":"clgxpu7xw001cvouv0oaphu4i"},{"post_id":"clgxpu7xu0019vouv2kp75orh","category_id":"clgxpu7x50004vouv78wu6m6o","_id":"clgxpu7y0001jvouv2w4k63rs"},{"post_id":"clgxpu7xj000kvouvevz96kcx","category_id":"clgxpu7xt0016vouv6a6faapr","_id":"clgxpu7y1001nvouv17g084wa"},{"post_id":"clgxpu7xv001bvouv9x6p56lk","category_id":"clgxpu7x50004vouv78wu6m6o","_id":"clgxpu7y3001qvouvhwiy0k3q"},{"post_id":"clgxpu7xx001gvouv431u2k63","category_id":"clgxpu7x50004vouv78wu6m6o","_id":"clgxpu7y4001uvouverhq9ddu"},{"post_id":"clgxpu7xl000ovouvhkxpfxvc","category_id":"clgxpu7xn000uvouv718afrmh","_id":"clgxpu7y5001yvouv168tb8jr"},{"post_id":"clgxpu7xz001ivouvhudbcnfw","category_id":"clgxpu7xt0016vouv6a6faapr","_id":"clgxpu7y70021vouv8tyq78qa"},{"post_id":"clgxpu7y1001mvouv406pdaje","category_id":"clgxpu7x50004vouv78wu6m6o","_id":"clgxpu7y80025vouv6vbl3eyx"},{"post_id":"clgxpu7xm000rvouvhg0hezd6","category_id":"clgxpu7xt0016vouv6a6faapr","_id":"clgxpu7ya0028vouv8e1w8dum"},{"post_id":"clgxpu7y2001pvouvevo91rvc","category_id":"clgxpu7x50004vouv78wu6m6o","_id":"clgxpu7yc002cvouvb54j8p2f"},{"post_id":"clgxpu7y3001tvouv9lupb238","category_id":"clgxpu7x50004vouv78wu6m6o","_id":"clgxpu7ye002gvouv2xm3hfnz"},{"post_id":"clgxpu7xn000wvouv8wsrbhbu","category_id":"clgxpu7xt0016vouv6a6faapr","_id":"clgxpu7yg002kvouvasu1aurx"},{"post_id":"clgxpu7y5001xvouvhre20uvs","category_id":"clgxpu7x50004vouv78wu6m6o","_id":"clgxpu7yi002ovouvg2e1d04h"},{"post_id":"clgxpu7y60020vouv4ddv0d2h","category_id":"clgxpu7x50004vouv78wu6m6o","_id":"clgxpu7yj002svouv962wgm6w"},{"post_id":"clgxpu7xo000xvouva341hnky","category_id":"clgxpu7xt0016vouv6a6faapr","_id":"clgxpu7ym002vvouv0ta5ao40"},{"post_id":"clgxpu7y80024vouvf4vpbk9s","category_id":"clgxpu7x50004vouv78wu6m6o","_id":"clgxpu7yo0030vouv13oi4nu0"},{"post_id":"clgxpu7ya0027vouvcyqd0xqb","category_id":"clgxpu7x50004vouv78wu6m6o","_id":"clgxpu7yp0033vouv8ryp0cuc"},{"post_id":"clgxpu7xp000zvouve2gua4jy","category_id":"clgxpu7xt0016vouv6a6faapr","_id":"clgxpu7yr0038vouvf5ld6vf5"},{"post_id":"clgxpu7yc002bvouvhdsbbtv3","category_id":"clgxpu7x50004vouv78wu6m6o","_id":"clgxpu7yr003avouva3j98uif"},{"post_id":"clgxpu7yd002fvouv8iqu57iv","category_id":"clgxpu7x50004vouv78wu6m6o","_id":"clgxpu7yt003cvouv8oqw8ais"},{"post_id":"clgxpu7xr0013vouvh67k6io3","category_id":"clgxpu7xt0016vouv6a6faapr","_id":"clgxpu7yy003hvouv4t4x7t0u"},{"post_id":"clgxpu7yg002jvouv5dhabd8h","category_id":"clgxpu7x50004vouv78wu6m6o","_id":"clgxpu7z1003kvouv6c4jgbfq"},{"post_id":"clgxpu7yh002nvouv4boscji6","category_id":"clgxpu7x50004vouv78wu6m6o","_id":"clgxpu7z3003pvouv6gu8073b"},{"post_id":"clgxpu7xt0015vouv6y5zc37a","category_id":"clgxpu7xt0016vouv6a6faapr","_id":"clgxpu7z4003svouvgi7s2hal"},{"post_id":"clgxpu7yj002rvouv9wvs6g4y","category_id":"clgxpu7yn002xvouvdg0i8gxl","_id":"clgxpu7z6003xvouv7x1vhwel"},{"post_id":"clgxpu7yr0039vouv5c5xbeql","category_id":"clgxpu7xn000uvouv718afrmh","_id":"clgxpu7z6003zvouv50be49t8"},{"post_id":"clgxpu7yk002uvouv67fzbj91","category_id":"clgxpu7yq0037vouvh0bj26v1","_id":"clgxpu7z70043vouv0cnwaw7o"},{"post_id":"clgxpu7yx003gvouv49skd5ih","category_id":"clgxpu7yn002xvouvdg0i8gxl","_id":"clgxpu7z70045vouv1o1ndv3o"},{"post_id":"clgxpu7yn002zvouvgaa8fdah","category_id":"clgxpu7yt003evouveuc7e4hw","_id":"clgxpu7z80048vouvfhn0c7r0"},{"post_id":"clgxpu7yz003jvouvay9e7xu7","category_id":"clgxpu7xn000uvouv718afrmh","_id":"clgxpu7z8004avouv70yu60ig"},{"post_id":"clgxpu7z2003ovouv159d88gs","category_id":"clgxpu7yn002xvouvdg0i8gxl","_id":"clgxpu7z8004dvouv76wg9sfq"},{"post_id":"clgxpu7yo0032vouv79vdfewd","category_id":"clgxpu7yt003evouveuc7e4hw","_id":"clgxpu7z9004evouvfs0qevqj"},{"post_id":"clgxpu7z3003rvouv0vc8g2v6","category_id":"clgxpu7x50004vouv78wu6m6o","_id":"clgxpu7z9004gvouv3m6bejpi"},{"post_id":"clgxpu7z5003wvouv7ndlh34l","category_id":"clgxpu7x50004vouv78wu6m6o","_id":"clgxpu7z9004ivouv9sm7a8gh"},{"post_id":"clgxpu7yq0036vouvggt9gtfj","category_id":"clgxpu7yt003evouveuc7e4hw","_id":"clgxpu7za004lvouv1l5s4jpz"},{"post_id":"clgxpu7ys003bvouv9iyn8bs1","category_id":"clgxpu7z70041vouv9yqx5otp","_id":"clgxpu7za004nvouv7mn96ca6"}],"PostTag":[{"post_id":"clgxpu7wz0001vouvffw2e2nd","tag_id":"clgxpu7xa0005vouv4hob959d","_id":"clgxpu7xf000cvouvae0qe1sg"},{"post_id":"clgxpu7xf000dvouv18g45vhr","tag_id":"clgxpu7xa0005vouv4hob959d","_id":"clgxpu7xi000ivouv5csr3bky"},{"post_id":"clgxpu7x30003vouvadzwawuu","tag_id":"clgxpu7xe000bvouv76qb84fw","_id":"clgxpu7xm000qvouv8myfc6jy"},{"post_id":"clgxpu7x30003vouvadzwawuu","tag_id":"clgxpu7xh000hvouv82qn2zyn","_id":"clgxpu7xn000svouvfmhthxhr"},{"post_id":"clgxpu7xb0007vouvg8asf2j1","tag_id":"clgxpu7xk000nvouv0yy1hzqx","_id":"clgxpu7xr0012vouvagq43fdx"},{"post_id":"clgxpu7xb0007vouvg8asf2j1","tag_id":"clgxpu7xn000vvouv5tt41jgy","_id":"clgxpu7xt0014vouvf5de14pj"},{"post_id":"clgxpu7xc0008vouv04a9cv3n","tag_id":"clgxpu7xq0011vouvbz8vhtl4","_id":"clgxpu7xv001avouv6ehz35us"},{"post_id":"clgxpu7xu0019vouv2kp75orh","tag_id":"clgxpu7xa0005vouv4hob959d","_id":"clgxpu7xw001fvouv8sh086t8"},{"post_id":"clgxpu7xg000evouvewgngszp","tag_id":"clgxpu7xu0018vouv1pfyd06e","_id":"clgxpu7xz001hvouva310d5a8"},{"post_id":"clgxpu7xi000jvouv5mr42iln","tag_id":"clgxpu7xw001evouvgfw7c9hv","_id":"clgxpu7y2001ovouv2vds730z"},{"post_id":"clgxpu7y1001mvouv406pdaje","tag_id":"clgxpu7xa0005vouv4hob959d","_id":"clgxpu7y3001svouv0v480ozp"},{"post_id":"clgxpu7xj000kvouvevz96kcx","tag_id":"clgxpu7y0001lvouv3uxpf6k1","_id":"clgxpu7y5001wvouvcutbh575"},{"post_id":"clgxpu7xl000ovouvhkxpfxvc","tag_id":"clgxpu7xw001evouvgfw7c9hv","_id":"clgxpu7y80023vouvhww6f5tz"},{"post_id":"clgxpu7y80024vouvf4vpbk9s","tag_id":"clgxpu7xa0005vouv4hob959d","_id":"clgxpu7yb002avouvey30gx96"},{"post_id":"clgxpu7ya0027vouvcyqd0xqb","tag_id":"clgxpu7xa0005vouv4hob959d","_id":"clgxpu7yd002evouvf2t3d5my"},{"post_id":"clgxpu7yc002bvouvhdsbbtv3","tag_id":"clgxpu7xa0005vouv4hob959d","_id":"clgxpu7yf002ivouv7kqtgqi8"},{"post_id":"clgxpu7yd002fvouv8iqu57iv","tag_id":"clgxpu7xa0005vouv4hob959d","_id":"clgxpu7yh002mvouv7frccw07"},{"post_id":"clgxpu7yg002jvouv5dhabd8h","tag_id":"clgxpu7xa0005vouv4hob959d","_id":"clgxpu7yi002qvouvf1z30wne"},{"post_id":"clgxpu7xm000rvouvhg0hezd6","tag_id":"clgxpu7y0001lvouv3uxpf6k1","_id":"clgxpu7yk002tvouv2vg11n94"},{"post_id":"clgxpu7xm000rvouvhg0hezd6","tag_id":"clgxpu7ya0029vouv4ojudmiv","_id":"clgxpu7yn002yvouv9io3hm9x"},{"post_id":"clgxpu7xm000rvouvhg0hezd6","tag_id":"clgxpu7yf002hvouvat8h5258","_id":"clgxpu7yo0031vouv26f66g2o"},{"post_id":"clgxpu7yh002nvouv4boscji6","tag_id":"clgxpu7xa0005vouv4hob959d","_id":"clgxpu7yp0034vouv0p0624wy"},{"post_id":"clgxpu7yr0039vouv5c5xbeql","tag_id":"clgxpu7xw001evouvgfw7c9hv","_id":"clgxpu7yx003fvouv7b7sdi0b"},{"post_id":"clgxpu7xn000wvouv8wsrbhbu","tag_id":"clgxpu7y0001lvouv3uxpf6k1","_id":"clgxpu7yz003ivouvdtjogqyn"},{"post_id":"clgxpu7xn000wvouv8wsrbhbu","tag_id":"clgxpu7yn002wvouv58qogz7s","_id":"clgxpu7z1003nvouv22i52clh"},{"post_id":"clgxpu7xn000wvouv8wsrbhbu","tag_id":"clgxpu7yp0035vouvcrdyfuha","_id":"clgxpu7z3003qvouvcgpibhza"},{"post_id":"clgxpu7yz003jvouvay9e7xu7","tag_id":"clgxpu7xw001evouvgfw7c9hv","_id":"clgxpu7z5003vvouv9nq66nnj"},{"post_id":"clgxpu7xo000xvouva341hnky","tag_id":"clgxpu7y0001lvouv3uxpf6k1","_id":"clgxpu7z6003yvouv62mb3byw"},{"post_id":"clgxpu7xo000xvouva341hnky","tag_id":"clgxpu7z1003lvouvahfo862c","_id":"clgxpu7z70042vouv7u8l35tq"},{"post_id":"clgxpu7z3003rvouv0vc8g2v6","tag_id":"clgxpu7xa0005vouv4hob959d","_id":"clgxpu7z70044vouv74pefnxq"},{"post_id":"clgxpu7z5003wvouv7ndlh34l","tag_id":"clgxpu7xa0005vouv4hob959d","_id":"clgxpu7z70047vouv8z8b9tfh"},{"post_id":"clgxpu7xp000zvouve2gua4jy","tag_id":"clgxpu7y0001lvouv3uxpf6k1","_id":"clgxpu7z80049vouv5me71dxh"},{"post_id":"clgxpu7xp000zvouve2gua4jy","tag_id":"clgxpu7z60040vouv76rfdwlz","_id":"clgxpu7z8004cvouv8ngsc6np"},{"post_id":"clgxpu7xr0013vouvh67k6io3","tag_id":"clgxpu7y0001lvouv3uxpf6k1","_id":"clgxpu7z9004hvouv9rpfafmn"},{"post_id":"clgxpu7xr0013vouvh67k6io3","tag_id":"clgxpu7z1003lvouvahfo862c","_id":"clgxpu7z9004jvouvf1n16uom"},{"post_id":"clgxpu7xt0015vouv6y5zc37a","tag_id":"clgxpu7y0001lvouv3uxpf6k1","_id":"clgxpu7za004mvouvf6d5hkjk"},{"post_id":"clgxpu7xv001bvouv9x6p56lk","tag_id":"clgxpu7xa0005vouv4hob959d","_id":"clgxpu7zb004qvouv9vqsfxme"},{"post_id":"clgxpu7xv001bvouv9x6p56lk","tag_id":"clgxpu7z9004kvouv11n13ebu","_id":"clgxpu7zc004rvouv2iyh5lvu"},{"post_id":"clgxpu7xv001bvouv9x6p56lk","tag_id":"clgxpu7za004ovouv46l2526m","_id":"clgxpu7zc004tvouv6metfh3t"},{"post_id":"clgxpu7xx001gvouv431u2k63","tag_id":"clgxpu7xa0005vouv4hob959d","_id":"clgxpu7zd004vvouv3l7fd7co"},{"post_id":"clgxpu7xx001gvouv431u2k63","tag_id":"clgxpu7z9004kvouv11n13ebu","_id":"clgxpu7zd004wvouv68w5156w"},{"post_id":"clgxpu7xx001gvouv431u2k63","tag_id":"clgxpu7zc004svouv8s15fibw","_id":"clgxpu7zd004yvouvgxcq2xek"},{"post_id":"clgxpu7xz001ivouvhudbcnfw","tag_id":"clgxpu7y0001lvouv3uxpf6k1","_id":"clgxpu7ze0051vouv55gb4bdc"},{"post_id":"clgxpu7xz001ivouvhudbcnfw","tag_id":"clgxpu7zd004xvouvffsaesu2","_id":"clgxpu7ze0052vouv4clda7ir"},{"post_id":"clgxpu7xz001ivouvhudbcnfw","tag_id":"clgxpu7zd004zvouv65rd3kny","_id":"clgxpu7ze0054vouvevvd9035"},{"post_id":"clgxpu7y2001pvouvevo91rvc","tag_id":"clgxpu7ze0050vouvhx9p6wjx","_id":"clgxpu7ze0055vouv4hbb8194"},{"post_id":"clgxpu7y2001pvouvevo91rvc","tag_id":"clgxpu7xa0005vouv4hob959d","_id":"clgxpu7zf0057vouvds9v3bus"},{"post_id":"clgxpu7y3001tvouv9lupb238","tag_id":"clgxpu7ze0053vouv7v7x8a8j","_id":"clgxpu7zf005avouvai480lxu"},{"post_id":"clgxpu7y3001tvouv9lupb238","tag_id":"clgxpu7zf0056vouv5r1wc1lc","_id":"clgxpu7zf005bvouv3oy93gpy"},{"post_id":"clgxpu7y3001tvouv9lupb238","tag_id":"clgxpu7zf0058vouvfo3wgvn7","_id":"clgxpu7zg005dvouv6ezdfih1"},{"post_id":"clgxpu7y5001xvouvhre20uvs","tag_id":"clgxpu7xa0005vouv4hob959d","_id":"clgxpu7zg005evouvc9kp3827"},{"post_id":"clgxpu7y5001xvouvhre20uvs","tag_id":"clgxpu7zf0059vouvfwn5fyii","_id":"clgxpu7zg005gvouv0wh2c02j"},{"post_id":"clgxpu7y60020vouv4ddv0d2h","tag_id":"clgxpu7xa0005vouv4hob959d","_id":"clgxpu7zg005hvouvckytg3wq"},{"post_id":"clgxpu7y60020vouv4ddv0d2h","tag_id":"clgxpu7zf005cvouvbac6h1jf","_id":"clgxpu7zg005jvouv206ra854"},{"post_id":"clgxpu7yj002rvouv9wvs6g4y","tag_id":"clgxpu7z1003lvouvahfo862c","_id":"clgxpu7zh005mvouv7hlyb29y"},{"post_id":"clgxpu7yj002rvouv9wvs6g4y","tag_id":"clgxpu7zg005ivouve3x76ssm","_id":"clgxpu7zh005nvouv7sd7368v"},{"post_id":"clgxpu7yj002rvouv9wvs6g4y","tag_id":"clgxpu7zh005kvouv61h4ge5j","_id":"clgxpu7zh005pvouvcl5m2mep"},{"post_id":"clgxpu7yk002uvouv67fzbj91","tag_id":"clgxpu7xk000nvouv0yy1hzqx","_id":"clgxpu7zi005qvouvao88fna7"},{"post_id":"clgxpu7yk002uvouv67fzbj91","tag_id":"clgxpu7xn000vvouv5tt41jgy","_id":"clgxpu7zi005svouv1fp1ehp3"},{"post_id":"clgxpu7yk002uvouv67fzbj91","tag_id":"clgxpu7zh005lvouvfmyn4crl","_id":"clgxpu7zi005tvouv7lx12hnf"},{"post_id":"clgxpu7yn002zvouvgaa8fdah","tag_id":"clgxpu7zh005ovouvh4rq0pwo","_id":"clgxpu7zi005vvouvdjgd14ub"},{"post_id":"clgxpu7yo0032vouv79vdfewd","tag_id":"clgxpu7zh005ovouvh4rq0pwo","_id":"clgxpu7zi005wvouv8ejz7dg8"},{"post_id":"clgxpu7yq0036vouvggt9gtfj","tag_id":"clgxpu7zh005ovouvh4rq0pwo","_id":"clgxpu7zj005yvouvejx7596r"},{"post_id":"clgxpu7ys003bvouv9iyn8bs1","tag_id":"clgxpu7zj005xvouv354v7v2d","_id":"clgxpu7zj0060vouv4nsyg5up"},{"post_id":"clgxpu7yx003gvouv49skd5ih","tag_id":"clgxpu7zg005ivouve3x76ssm","_id":"clgxpu7zl0063vouvbwrlfkr8"},{"post_id":"clgxpu7yx003gvouv49skd5ih","tag_id":"clgxpu7zj0061vouvfiobcoo8","_id":"clgxpu7zl0064vouv9veken01"},{"post_id":"clgxpu7z2003ovouv159d88gs","tag_id":"clgxpu7zk0062vouv3ejf11sy","_id":"clgxpu7zm0065vouvd3ztamm4"},{"post_id":"clgxpu7z2003ovouv159d88gs","tag_id":"clgxpu7ya0029vouv4ojudmiv","_id":"clgxpu7zm0066vouvg5ifg5pj"}],"Tag":[{"name":"golang","_id":"clgxpu7xa0005vouv4hob959d"},{"name":"gpg","_id":"clgxpu7xe000bvouv76qb84fw"},{"name":"rsa","_id":"clgxpu7xh000hvouv82qn2zyn"},{"name":"备份","_id":"clgxpu7xk000nvouv0yy1hzqx"},{"name":"恢复","_id":"clgxpu7xn000vvouv5tt41jgy"},{"name":"clickhouse","_id":"clgxpu7xq0011vouvbz8vhtl4"},{"name":"docker-compose","_id":"clgxpu7xu0018vouv1pfyd06e"},{"name":"docker","_id":"clgxpu7xw001evouvgfw7c9hv"},{"name":"git","_id":"clgxpu7y0001lvouv3uxpf6k1"},{"name":"文件","_id":"clgxpu7ya0029vouv4ojudmiv"},{"name":"status","_id":"clgxpu7yf002hvouvat8h5258"},{"name":"history","_id":"clgxpu7yn002wvouv58qogz7s"},{"name":"log","_id":"clgxpu7yp0035vouvcrdyfuha"},{"name":"代理","_id":"clgxpu7z1003lvouvahfo862c"},{"name":"add","_id":"clgxpu7z60040vouv76rfdwlz"},{"name":"aes","_id":"clgxpu7z9004kvouv11n13ebu"},{"name":"cbc","_id":"clgxpu7za004ovouv46l2526m"},{"name":"ecb","_id":"clgxpu7zc004svouv8s15fibw"},{"name":"tag","_id":"clgxpu7zd004xvouvffsaesu2"},{"name":"标签","_id":"clgxpu7zd004zvouv65rd3kny"},{"name":"pprof","_id":"clgxpu7ze0050vouvhx9p6wjx"},{"name":"字符串","_id":"clgxpu7ze0053vouv7v7x8a8j"},{"name":"json","_id":"clgxpu7zf0056vouv5r1wc1lc"},{"name":"map","_id":"clgxpu7zf0058vouvfo3wgvn7"},{"name":"cmd","_id":"clgxpu7zf0059vouvfwn5fyii"},{"name":"redis","_id":"clgxpu7zf005cvouvbac6h1jf"},{"name":"linux","_id":"clgxpu7zg005ivouve3x76ssm"},{"name":"bash","_id":"clgxpu7zh005kvouv61h4ge5j"},{"name":"mysql","_id":"clgxpu7zh005lvouvfmyn4crl"},{"name":"nginx","_id":"clgxpu7zh005ovouvh4rq0pwo"},{"name":"ssh","_id":"clgxpu7zj005xvouv354v7v2d"},{"name":"rsync","_id":"clgxpu7zj0061vouvfiobcoo8"},{"name":"scp","_id":"clgxpu7zk0062vouv3ejf11sy"}]}}