{"meta":{"version":1,"warehouse":"4.0.1"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/pictures/1681230165886.jpg","path":"pictures/1681230165886.jpg","modified":0,"renderable":0},{"_id":"themes/butterfly/source/css/'","path":"css/'","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/background.css","path":"css/background.css","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/modify.styl","path":"css/modify.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/modify1.styl","path":"css/modify1.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/universe.js","path":"js/universe.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"079c5f5741080670120f62b4cd7700aee5209fdd","modified":1682271146918},{"_id":"source/_data/footer.njk","hash":"d07c705cdce1ae2ba7296b4c05ae1081f82168cc","modified":1682269448219},{"_id":"source/_posts/GPG入门教程.md","hash":"5ed3acb6b2b795027e8240ab8d0fe4955bede81c","modified":1682522067962},{"_id":"source/_posts/2022-08-31-golang-统计代码行数.md","hash":"4eeee7270d4ddad280d37014c86356f66f228a44","modified":1682522067958},{"_id":"source/_posts/clickhouse常用高阶函数操作.md","hash":"4730796f0eee68b47a85734f3a328ed73e01a44e","modified":1682515388987},{"_id":"source/_posts/clickhouse数组函数操作.md","hash":"8c7652eb6e23ebb06b9c027e159f858e0650ce79","modified":1682522067967},{"_id":"source/_posts/docker-compose执行模板文件构建镜像.md","hash":"85391d07d6271782e88cf04056a8ac9a22fa55d1","modified":1682522067968},{"_id":"source/_posts/MongoDB备份与恢复.md","hash":"5ffdb99b9e01845e7eacc348af933346600cf01f","modified":1682522067963},{"_id":"source/_posts/clickhouse安装使用笔记.md","hash":"e14b5ca1fc767e7a44a9035d5980a1d5d7dade96","modified":1682522067965},{"_id":"source/_posts/git add 暂存.md","hash":"fe9c669e31ce4111e034906d03af45d8ac9138b3","modified":1682522067971},{"_id":"source/_posts/docker拉取指定平台架构的镜像.md","hash":"c20d13cd0ee0755a1e385134636c37e43f1ec32b","modified":1682522067970},{"_id":"source/_posts/git 报错refusing to merge unrelated histories，强制提交.md","hash":"6203cbdeda3db1a40f946feca4256f37f50804b6","modified":1682522067974},{"_id":"source/_posts/docker保存镜像到本地和加载镜像.md","hash":"2302ec5d5c3e8ebaea10233185ed33ce7b6dac7e","modified":1682522067969},{"_id":"source/_posts/git 查看提交历史记录.md","hash":"75458c3dabbab1f230af4535700dd61e6357bc8b","modified":1682522067977},{"_id":"source/_posts/git 设置ssh 代理.md","hash":"c2a055e57b8478b94675dfa4988aa2106b3d7fe5","modified":1682522067978},{"_id":"source/_posts/git 配置http代理.md","hash":"d3bb88ade5ad4eef8b0d0fa7bb2c6680db8ed4b6","modified":1682522067980},{"_id":"source/_posts/git 配置用户名邮箱.md","hash":"3dac0e32a620e11cb53d8a7cfdd18d0c9f800ae3","modified":1682522067979},{"_id":"source/_posts/channel的死锁和panic总结.md","hash":"27a7eec5aa0304628b31ae7c6c553d13f47612fb","modified":1682522067964},{"_id":"source/_posts/git tag 标签.md","hash":"293b0046900f73597dea511dfef7a35c5f0e2749","modified":1682522067973},{"_id":"source/_posts/git 文件状态 、status.md","hash":"aafd1463675a81d5baf12b95a2a0f8a0723af763","modified":1682522067976},{"_id":"source/_posts/golang 获取系统相关信息.md","hash":"515574b4cf196cbeffcf6c46dc094b30e8f97fd9","modified":1682522067984},{"_id":"source/_posts/go mod tidy 报错timeout.md","hash":"2d87d450b7788525e4ee870995f5710344e8ff87","modified":1682522067981},{"_id":"source/_posts/golang AES算法 CBC加密.md","hash":"a6113aad85da8dd70f7debc4f76ed513e1d96e49","modified":1682522067982},{"_id":"source/_posts/golang字符串、json、map之间转换.md","hash":"721ad9b5efc9c1e6e1e7ca69e371396c13d7c8d9","modified":1682522067987},{"_id":"source/_posts/golang执行cmd命令.md","hash":"6f47f4db287c45f1cf33d88618923539bd8cb8b5","modified":1682522067988},{"_id":"source/_posts/golang AES算法 ECB模式加密.md","hash":"5146c51edd4c037b34d5de9202c9c3b14d3fc384","modified":1682522067983},{"_id":"source/_posts/golang使用pprof进行性能分析.md","hash":"d2f84a6edfe30243d6a96f5a5ecb245d43f52ffd","modified":1682522067986},{"_id":"source/_posts/golang私有仓库配置.md","hash":"b525e440f684aa8157666448df08b467fe013248","modified":1682522067995},{"_id":"source/_posts/golang操作redis.md","hash":"9f77168435835c76729c9805a38137305271358d","modified":1682522067992},{"_id":"source/_posts/golang换行读写.md","hash":"d6633ee2f7487abfc86aa418869c9242d7182b85","modified":1682522067990},{"_id":"source/_posts/go中new和make的区别.md","hash":"11d827089ea94dfe18b71537760f227c2f94829d","modified":1682522067999},{"_id":"source/_posts/golang用两个栈实现队列.md","hash":"9ebd87d2626f2650cec00fc60dcfc28912fb3c82","modified":1682522067993},{"_id":"source/_posts/golang远程调试.md","hash":"8a2e01b7998eb5e5452e39d4290002b9417caba2","modified":1682522067997},{"_id":"source/_posts/linux端口号查看.md","hash":"fecaf6e5711283178c5828ec60986181da204a19","modified":1682522068006},{"_id":"source/_posts/linux 命令行配置代理.md","hash":"535f182d54e52f98ad0958a952fd463a0aaa837b","modified":1682522068003},{"_id":"source/_posts/nginx 启动停止命令.md","hash":"6aad3b7f553945737c39bf26b08c0dab382d5a50","modified":1682522068008},{"_id":"source/_posts/linux查看进程.md","hash":"afa4be7d79dec40d591eb73aad8f0ddb793f7c65","modified":1682522068004},{"_id":"source/_posts/nginx基本命令.md","hash":"b648899afb275903f54fb7a9e544fa9a4f179692","modified":1682522068010},{"_id":"source/_posts/ssh隧道-能ssh就能http和tcp，通过ssh就能访问内网web页面和数据库.md","hash":"741c5face4c6d88d59c19ce53f9bea24649676e1","modified":1682522068014},{"_id":"source/_posts/不需要运行金融docker容器.md","hash":"ef0f173a631e8a8b038fb226142a32456790f8b6","modified":1682522068016},{"_id":"source/_posts/nginx配置多个域名对应不同端口.md","hash":"bd8e2473ce0fe60a841e26fda27cd9e9e529a1f0","modified":1682522068012},{"_id":"source/_posts/使用rsync命令.md","hash":"e72c52afeb32ed5be1fa99688a82a781e851ee29","modified":1682522068015},{"_id":"source/_posts/单纯启动docker容器不启动服务.md","hash":"282175301be2d09bd3e09c3501b8c9d2ea615f25","modified":1682522068020},{"_id":"source/_posts/使用scp命令传输文件到服务器.md","hash":"35b25759aae0b57aec80732ddeec37da73ac6add","modified":1682522068017},{"_id":"source/_posts/获取项目中 golang 代码行数.md","hash":"7c96bfb4c5bf7ba5353f00d118fc7135cf7161b8","modified":1682522068024},{"_id":"source/about/index.md","hash":"fa8ee15de55e5c83a994cf2db783a34e80b6ae8f","modified":1682269448228},{"_id":"source/categories/index.md","hash":"f134fb1167ccef2c37f1e17e0111e2c5ee01d23b","modified":1682269448228},{"_id":"source/pictures/1681230165886.jpg","hash":"0de77d6d55531fa27c0a652a43e956332e943e2e","modified":1682269448229},{"_id":"source/tags/index.md","hash":"2365e85f76268a3712b0fda3c305305e46d0d1b5","modified":1682269448229},{"_id":"source/_posts/go中context的使用.md","hash":"0091d03a9fe78817ecc982bec32bc5dd0e300eef","modified":1682522068000},{"_id":"source/_posts/mysql命令行备份数据.md","hash":"25aa4b568561e50a2d3764f740be5ee0b0996779","modified":1682522068011},{"_id":"source/_posts/如何使用高阶函数编程提升代码的简洁性.md","hash":"8f2d7c96db4971621352ac384a8f30cb4ba3ba8c","modified":1682522068021},{"_id":"themes/butterfly/LICENSE","hash":"1128f8f91104ba9ef98d37eea6523a888dcfa5de","modified":1682516128739},{"_id":"themes/butterfly/README.md","hash":"52967a864c244af4db8c63902586cb617ee5b8aa","modified":1682516128743},{"_id":"themes/butterfly/README_CN.md","hash":"e19021371184361261ddef1d98eb308d78922714","modified":1682516128746},{"_id":"themes/butterfly/_config.yml","hash":"adc8f25ce9d499c18731b55735e5bc37262383ca","modified":1682516128751},{"_id":"themes/butterfly/package.json","hash":"79b3dde82bc6d983dc383d2810e96fb697d4fba1","modified":1682516130117},{"_id":"themes/butterfly/plugins.yml","hash":"c7a060713f72ec8b4a45244b3aa8d51d772f5ce8","modified":1682516130121},{"_id":"themes/butterfly/languages/default.yml","hash":"4025c0ba440eb24705dd0293ca9ca84efb3105cc","modified":1682516128759},{"_id":"themes/butterfly/languages/en.yml","hash":"4e9cdb7a3570929bcf082de7a4eac49140dddc73","modified":1682516128766},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"7dd849c3ba34986c57c764d9e36150b4bfffd2e9","modified":1682516128772},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"ee01e068f12dc33adfae5733824ea1255deb5ca6","modified":1682516128777},{"_id":"themes/butterfly/layout/archive.pug","hash":"a0c034c2d319320a54046805e80b58dc48b7e233","modified":1682516128785},{"_id":"themes/butterfly/layout/category.pug","hash":"710708cfdb436bc875602abf096c919ccdf544db","modified":1682516128792},{"_id":"themes/butterfly/layout/index.pug","hash":"e1c3146834c16e6077406180858add0a8183875a","modified":1682516130094},{"_id":"themes/butterfly/layout/page.pug","hash":"baf469784aef227e4cc840550888554588e87a13","modified":1682516130101},{"_id":"themes/butterfly/layout/post.pug","hash":"fc9f45252d78fcd15e4a82bfd144401cba5b169a","modified":1682516130108},{"_id":"themes/butterfly/layout/tag.pug","hash":"0440f42569df2676273c026a92384fa7729bc4e9","modified":1682516130113},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"fc468a93a64c7a3e408fbac921c9f5a5a8f32027","modified":1682516128697},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/config.yml","hash":"7dfe7189ffeaebb6db13842237f8e124649bea3d","modified":1682516128707},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"996640605ed1e8e35182f0fd9a60a88783b24b03","modified":1682516128714},{"_id":"themes/butterfly/.github/workflows/publish.yml","hash":"05857c2f265246d8de00e31037f2720709540c09","modified":1682516128726},{"_id":"themes/butterfly/.github/workflows/stale.yml","hash":"ac62b989b5550c756e1986fcc68f243170705383","modified":1682516128735},{"_id":"themes/butterfly/layout/includes/404.pug","hash":"cb49f737aca272ccfeb62880bd651eccee72a129","modified":1682516128804},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"dd9fde431add984330e3178e06a8d74705e7340e","modified":1682516128831},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"7fa9ae4b70b87fc97e992dde5944681f92b59bea","modified":1682516128993},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"aca0ec7ef69b21d1f242c62fed389468a0f0e1a2","modified":1682516128817},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"4c85de4dea4dca4e5088097a79bd6d7009cbf8ef","modified":1682516129118},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"02390a5b6ae1f57497b22ba2e6be9f13cfb7acac","modified":1682516128824},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"83a1f2d31792206d432e8e2041e284d88327c02e","modified":1682516129158},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"8d39473ed112d113674a0f689f63fae06c72abd2","modified":1682516129166},{"_id":"themes/butterfly/scripts/events/404.js","hash":"83cd7f73225ccad123afbd526ce1834eb1eb6a6d","modified":1682516130137},{"_id":"themes/butterfly/scripts/events/cdn.js","hash":"21fb5aabe043486d095c4c8cce361ed85ba88a26","modified":1682516130146},{"_id":"themes/butterfly/scripts/events/comment.js","hash":"5351e0bc09e6b5b3f6d30f333a2520626a28ca3a","modified":1682516130155},{"_id":"themes/butterfly/scripts/events/init.js","hash":"3ace1139182d3d367149db138990891427f3356e","modified":1682516130161},{"_id":"themes/butterfly/scripts/events/stylus.js","hash":"9819f0996234fbd80d6c50a9e526c56ebf22588d","modified":1682516130170},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"8ad9911b755cba13dde2cc055c3f857a6b0dd20e","modified":1682516130178},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"932df912976261929f809b7dbd4eb473e7787345","modified":1682516130191},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"8d25f47434deae870bbffd07efe528a40363ab4d","modified":1682516130201},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"2ec66513d5322f185d2071acc052978ba9415a8e","modified":1682516130213},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"e00efdb5d02bc5c6eb4159e498af69fa61a7dbb9","modified":1682516130222},{"_id":"themes/butterfly/scripts/helpers/findArchiveLength.js","hash":"9ea86bd7a3c3fca3324f70b1cd4d9e42f9efb08d","modified":1682516130230},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"4238e06ff448ff2ee717cd4c874f37f04d35da06","modified":1682516130238},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"ce5d5a3d07b0d76ac5e96e5f9e5783f4b601b6be","modified":1682516130245},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"4677be4175da6800c0b3b8c1614e593f73df8831","modified":1682516130254},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"91d954f6e9fe6e571eb8ec9f8996294b2dc3688e","modified":1682516130268},{"_id":"themes/butterfly/scripts/tag/flink.js","hash":"ab62919fa567b95fbe14889517abda649991b1ee","modified":1682516130277},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"950b3dbac0b21717458a8d1769cbfc454d0eff54","modified":1682516130284},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"a43ee2c7871bdd93cb6beb804429e404570f7929","modified":1682516130300},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"396c3ab1bcf1c7693ad7e506eadd13016c6769b6","modified":1682516130293},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"03b2afef41d02bd1045c89578a02402c28356006","modified":1682516130308},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"531808a290b8bdd66bac2faab211ada8e9646a37","modified":1682516130315},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"d51812b43924f1bbf413c67499510dd125022005","modified":1682516130323},{"_id":"themes/butterfly/scripts/tag/score.js","hash":"ea679dfe12d0e2290113b4a9d00663ce7a5ee5ad","modified":1682516130329},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"6c6e415623d0fd39da016d9e353bb4f5cca444f5","modified":1682516130337},{"_id":"themes/butterfly/scripts/tag/timeline.js","hash":"300eb779588bf35a1b687d9f829d866074b707e3","modified":1682516130345},{"_id":"themes/butterfly/source/css/background.css","hash":"e7d3bbef6a73f19a4883747abc79107c8b59680b","modified":1683205538222},{"_id":"themes/butterfly/source/css/index.styl","hash":"861998e4ac67a59529a8245a9130d68f826c9c12","modified":1682516130899},{"_id":"themes/butterfly/source/css/.background.styl.swp","hash":"699d8f7eba65a205cb10affbef1ffab187bf2ae7","modified":1682525678282},{"_id":"themes/butterfly/source/css/var.styl","hash":"30abbb8eed880d51f61f336064d93abd709e0115","modified":1682516130906},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1682516130920},{"_id":"themes/butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1682516130928},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1682516130939},{"_id":"themes/butterfly/source/js/main.js","hash":"05c825962e365af62096d3f1b4d7c9ee1b5fc2f5","modified":1682516130955},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"76d0c5c172cae44b34b0bd3125fd068b2c3cbd4a","modified":1682516130995},{"_id":"themes/butterfly/source/css/'","hash":"be1f684f720a7a4ed2fcbd9e8508e78e854889a3","modified":1682530346076},{"_id":"themes/butterfly/source/js/universe.js","hash":"917e3c2bda5c898f50c9a123d6de9037bd9c9b89","modified":1682522443052},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"8aa8d799aedbfd811195b84a451bc4b6e2647c12","modified":1682516128851},{"_id":"themes/butterfly/source/js/utils.js","hash":"2e74fe8ae5ac20067668a18df5985459faf419f9","modified":1682516131003},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"67e1c3b48e4ca7ee0b2c76d3ca7476b9883cf105","modified":1682516128861},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"021ccdca211cce0438a378ada37897a8ffcb9574","modified":1682516128871},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"7df90c8e432e33716517ab918b0a125bc284041b","modified":1682516128880},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"95a37e92b39c44bcbea4be7e29ddb3921c5b8220","modified":1682516128889},{"_id":"themes/butterfly/layout/includes/head/noscript.pug","hash":"d16ad2ee0ff5751fd7f8a5ce1b83935518674977","modified":1682516128898},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"a03b3ddc06e7aa9fd07eea0d5f97c8d5addd2315","modified":1682516128907},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"3d492cfe645d37c94d30512e0b230b0a09913148","modified":1682516128917},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"e2e8d681f183f00ce5ee239c42d2e36b3744daad","modified":1682516128926},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"0c1551ef80bbece550fe520d91e21f083cbc14fe","modified":1682516128944},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"31346a210f4f9912c5b29f51d8f659913492f388","modified":1682516128957},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"f61659aa457d1a2d1baa3a13157996cfac4d6609","modified":1682516128967},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"9698f22751778dde063cbfbd01c59ca4462ccd85","modified":1682516128976},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"5de9a82032cdad1db3b868b797460921cd775fc2","modified":1682516128986},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"90554c2ca5ba946f4c02e1bc5fe2859cef1b1594","modified":1682516129049},{"_id":"themes/butterfly/layout/includes/mixins/post-ui.pug","hash":"294df7a74cf36af3a7030274d8b745979c1c8c70","modified":1682516129060},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1682516129079},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"12c65c174d26a41821df9bad26cdf1087ec5b0ca","modified":1682516129091},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"a59bcfbb609a099c1bf5be40b7a94e7e2b06fc4a","modified":1682516129100},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"9621991359e22b14049346f1cf87bdedc94edf5a","modified":1682516129110},{"_id":"themes/butterfly/layout/includes/loading/fullpage-loading.pug","hash":"68cda524337dfe2e1467318a4a6c124b4c3845a7","modified":1682516129010},{"_id":"themes/butterfly/layout/includes/loading/index.pug","hash":"131f344d68b4c241d6e03849b243ee792fcd3cea","modified":1682516129022},{"_id":"themes/butterfly/layout/includes/loading/pace.pug","hash":"6ab4e301c92586505d6cddce1b3ad23b7c79010d","modified":1682516129032},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"ebecba46a5f4efe1c98a386df06c56e26fbd07b9","modified":1682516129137},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"864869c43fe5b5bb6f4ac6b13dd4bfb16ea47550","modified":1682516129150},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"c7cfade2b160380432c47eef4cd62273b6508c58","modified":1682516129227},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"6528e86656906117a1af6b90e0349c2c4651d5e1","modified":1682516129605},{"_id":"themes/butterfly/layout/includes/third-party/pangu.pug","hash":"0f024e36b8116118233e10118714bde304e01e12","modified":1682516129792},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"fc0b09068009edd4026d90a669608cbe211aeecf","modified":1682516129803},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"ffb9ea15a2b54423cd4cd441e2d061b8233e9b58","modified":1682516129817},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"35223531f8e086d57caec2d17d45ddbcb39deb74","modified":1682516129955},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"60dc48a7b5d89c2a49123c3fc5893ab9c57dd225","modified":1682516129974},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"ae392459ad401a083ca51ee0b27526b3c1e1faed","modified":1682516129986},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"86897010fe71503e239887fd8f6a4f5851737be9","modified":1682516129997},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"e37468e63db2a0ac09b65d21b7de3e62425bb455","modified":1682516130007},{"_id":"themes/butterfly/layout/includes/widget/card_bottom_self.pug","hash":"13dc8ce922e2e2332fe6ad5856ebb5dbf9ea4444","modified":1682516130017},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"d1a416d0a8a7916d0b1a41d73adc66f8c811e493","modified":1682516130028},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"6d93564a8bd13cb9b52ee5e178db3bcbf18b1bc6","modified":1682516130036},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"3057a2f6f051355e35d3b205121af8735100eacf","modified":1682516130045},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"e5aac7b28ed4123d75797263c64e74ac547945bc","modified":1682516130054},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"eceb4420a64c720f0d2741e89d6229bbb3d87353","modified":1682516130062},{"_id":"themes/butterfly/layout/includes/widget/card_top_self.pug","hash":"ae67c6d4130a6c075058a9c1faea1648bcc6f83e","modified":1682516130071},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"35ce167c5a275211bfc1fa3d49adfde5b404d98f","modified":1682516130079},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"010e3d548ababca2280c4fc4168d9a4a1ee4f536","modified":1682516130089},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"7fdfbe8f97b41588bbd5c6f27e7e85a881b28954","modified":1682516130373},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"4f5636c326f794417296bdb6bcfd6a8b207d69d8","modified":1682516130386},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"2f95e99b8351fbecd9037a1bbdc3fee9d6ea8a77","modified":1682516130402},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"bcd384c8b2aa0390c9eb69ac1abbfd1240ce1da4","modified":1682516130499},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"f9a5d3f1fc5ed0ed2ee4c1eaa58ed650d11ddebd","modified":1682516130528},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"57adf29a3e36e4ea84384e36c034eb294dffb208","modified":1682516130516},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"c61dccca690d486c3d9c29cf028d87b777385141","modified":1682516130538},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"83553445fbc92cad4ad220fbd87b4c3db958c32a","modified":1682516130547},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"45d71dbb2a61e30989851ba29bb8be7094574d14","modified":1682516130557},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"ac2aeee9926f75b2a0098efe1c114126987430f2","modified":1682516130565},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"fb9f78bfbb79579f1d752cb73fb6d25c8418e0fd","modified":1682516130575},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"e24046fad288a13897195038cb7a63d1014cd7b8","modified":1682516130584},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"d53de408cb27a2e704aba7f7402b7caebe0410d8","modified":1682516130593},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"c5cfed620708807a48076b5ee59b0ba84e29aa80","modified":1682516130604},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"bbc884d6b2158a833b77a1bbc07248e17874b22e","modified":1682516130612},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"631ca35a38bc4ac052e9caf47508ff1f99842fc7","modified":1682516130622},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"ca39e634668ed4fbb43267ec4782c2b55c44e698","modified":1682516130631},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"7ff0c456fae2717ddbbb9f8fae2734d449a5448b","modified":1682516130647},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"ffea9e7c1543edcf080381e7b99828954c2f2cef","modified":1682516130660},{"_id":"themes/butterfly/source/css/_page/404.styl","hash":"50dbb9e6d98c71ffe16741b8c1b0c1b9771efd2b","modified":1682516130678},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"c9e98027f2dd730ce389c2047f62ebb748955fcf","modified":1682516130690},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"f01ee74948cedb44e53cd3bb1ef36b7d2778ede7","modified":1682516130701},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"e4b9d6164e97b30c84e1218c7543c60f6b29edcc","modified":1682516130709},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"98d755b686ee833e9da10afaa40c4ec2bd66c19a","modified":1682516130720},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"bb470da1d2ba292cae0a30a252f82f37c4130d2d","modified":1682516130729},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"580feb7e8b0822a1be48ac380f8c5c53b1523321","modified":1682516130739},{"_id":"themes/butterfly/source/css/modify.styl","hash":"f35ff104a5391bb663064742e4b6beff53077113","modified":1682611316301},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"649a054e73278b6724bd4dd9b94724791ec5c928","modified":1682516130756},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"678e56ad2e46b630364540fc6a881d6801192dcd","modified":1682516130769},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"45f0c32bdea117540f6b14ebac6450d7142bd710","modified":1682516130795},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"a86e4e9198b225b4b73a7a45f04b86cbbed0d231","modified":1682516130777},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"81ad85acf0e0fe7f9ee23c16a700e7154574d5dd","modified":1682516130807},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"d76c38adf1d9c1279ef4241835667789f5b736e0","modified":1682516130817},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"ce489ca2e249e2a3cf71584e20d84bdb022e3475","modified":1682516130826},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"df9d405c33a9a68946b530410f64096bcb72560c","modified":1682516130836},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"66c59e193d794cdb02cca7bd1dc4aea5a19d7e84","modified":1682516130845},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"85ae91c83691ea4511f4277da1194a185251cc78","modified":1682516130855},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"bf9568444dd54e39dc59b461323dcd38942f27d9","modified":1682516130864},{"_id":"themes/butterfly/source/css/_tags/timeline.styl","hash":"f071156d439556e7463ed4bc61ceee87170d5d08","modified":1682516130873},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"2c18a1c9604af475b4749def8f1959df88d8b276","modified":1682516130890},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"fd86281d4f0f99ce173e49c1a0df3507fe268d37","modified":1682516130975},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"8a0547ecb33ad2939450152adf54fca58e22a424","modified":1682516130987},{"_id":"themes/butterfly/layout/includes/third-party/abcjs/abcjs.pug","hash":"ed6906b7c6aa7046bbad95dfdda9211997be7099","modified":1682516129200},{"_id":"themes/butterfly/layout/includes/third-party/abcjs/index.pug","hash":"cabb3a06f8ef297a1ea3d91ced8abeaa0831aa14","modified":1682516129218},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"99d9b17668260b242749c16851d9ec1024d31899","modified":1682516129251},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"d85c3737b5c9548553a78b757a7698df126a52cf","modified":1682516129266},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"0344477a2cf38698318ead2681c63ac12f01586e","modified":1682516129277},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"b2d274db84ef22fbd6d5ea8f4404821898934209","modified":1682516129289},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"001e8be47854b891efe04013c240c38fed4185eb","modified":1682516129300},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"58406a7a3bf45815769f652bf3ef81e57dcd07eb","modified":1682516129312},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"55acc455ca8e13211e3906cf78e487cc92accee5","modified":1682516129336},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"39427e107230a10790972349c9dd4c4f31d55eb7","modified":1682516129323},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"481cd5053bafb1a19f623554a27d3aa077ea59c3","modified":1682516129358},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"76634112c64023177260d1317ae39cef2a68e35f","modified":1682516129374},{"_id":"themes/butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"cfe63e7d26a6665df6aa32ca90868ad48e05ec04","modified":1682516129385},{"_id":"themes/butterfly/layout/includes/third-party/chat/messenger.pug","hash":"3ce0461534b786cb71d9141dff35fa5cb70e22b9","modified":1682516129409},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"24a926756c2300b9c561aaab6bd3a71fdd16e16d","modified":1682516129420},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"618e1b7f9204049b07beb9e1363c844a78a9ace3","modified":1682516129398},{"_id":"themes/butterfly/layout/includes/third-party/comments/artalk.pug","hash":"95738f110598f999d627234e78ff9e9decac1b9b","modified":1682516129440},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"a833715eec2171ff05664d6d5752a57c954192ce","modified":1682516129478},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"8ec24c1939895ac0db2b2e8700bc9307b4ceb53c","modified":1682516129454},{"_id":"themes/butterfly/layout/includes/third-party/comments/giscus.pug","hash":"9c16ff9cdc444ebf47eed33ea35b8366459a18f0","modified":1682516129489},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"3ba842bf4801b2f115c2cfe5657f35a732ce589f","modified":1682516129465},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"351fe25fbf02635b1f9e86e5e244c7d61f69baa7","modified":1682516129512},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"1c3a87393cb49915940c2dd206356c2a16549767","modified":1682516129501},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"00ed91c52939b9675b316137f854d13684c895a6","modified":1682516129524},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"52ea8aa26b84d3ad38ae28cdf0f163e9ca8dced7","modified":1682516129536},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"e18fbd88d8942e53e771f29b26209ab735c5c567","modified":1682516129558},{"_id":"themes/butterfly/layout/includes/third-party/comments/remark42.pug","hash":"e9bdf80d6796afc04eb809dbbe780d97f22c7fcd","modified":1682516129546},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"a737046e730eb7264606ba0536218964044492f9","modified":1682516129571},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"26ba1fc99117993087b1c6e02daa2626627d8eb1","modified":1682516129595},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"e55b9c0f8ced231f47eb88bd7f4ec99f29c5c29d","modified":1682516129583},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"b8ae5fd7d74e1edcef21f5004fc96147e064d219","modified":1682516129629},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"dfcbd9881be569ea420eff1a6b00e4f4dbe2138e","modified":1682516129645},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"8e33aca36a4d3ae9e041ba05ced8eff56ae38f77","modified":1682516129669},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"0ea633b11b357afa50c200290d19c32467d58a1d","modified":1682516129657},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"e6ebbe137dd86b6d8750a6843e350fcd16030981","modified":1682516129692},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"04b2a5882e789a988e41d45abe606f0617b08e38","modified":1682516129707},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"e846ddfe4a63b15d1416f6055f5756af5e3da7c6","modified":1682516129720},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"4ec0642f2d5444acfab570a6f8c7868e7ff43fde","modified":1682516129732},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"ab167c00da4506f591b96f0591bf5bd214a26d4b","modified":1682516129744},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"233907dd7f5b5f33412701d2ccffbc0bbae8707b","modified":1682516129757},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"d19e1c2c0a50f0e4547d71a17b9be88e8152f17c","modified":1682516129769},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"441d87067d87d9996b53b25c05b8e620bd94b027","modified":1682516129782},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"9c3c109a12d2b6916e8b4965cca12f521510ead9","modified":1682516129840},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"a99a41334387ee9a46c6f8e8212331a29a10d159","modified":1682516129869},{"_id":"themes/butterfly/layout/includes/third-party/search/docsearch.pug","hash":"1c3e101445c5571ba998ce293d3984319df1b3b0","modified":1682516129856},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"5ebd5e8d39c9f77f5b2d983f6cd6802ccaf98746","modified":1682516129881},{"_id":"themes/butterfly/layout/includes/third-party/share/add-this.pug","hash":"2980f1889226ca981aa23b8eb1853fde26dcf89a","modified":1682516129903},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"85c92f8a7e44d7cd1c86f089a05be438535e5362","modified":1682516129921},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"4c4a9c15215ae8ac5eadb0e086b278f76db9ee92","modified":1682516129933},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"c7dd2b2ae9b23aa0a60fffd7df9e9f76ef52033e","modified":1682516129945},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"cf1fae641c927621a4df1be5ca4a853b9b526e23","modified":1682516130426},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"18804c58239d95798fa86d0597f32d7f7dd30051","modified":1682516130442},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"5972c61f5125068cbe0af279a0c93a54847fdc3b","modified":1682516130463},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"5dc2e0bcae9a54bfb9bdcc82d02ae5a3cf1ca97d","modified":1682516130478},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"8970cc1916c982b64a1478792b2822d1d31e276d","modified":1682516130489},{"_id":"themes/butterfly/source/css/modify1.styl","hash":"6f392b64802c1efd1ffda05f7947c3dbf091cd63","modified":1682611438446},{"_id":"public/search.xml","hash":"ef0f6622015e4b5ea21c1515593255414f37911e","modified":1683206141295},{"_id":"public/post/56d93994.html","hash":"97703a8f2a6a99ff344745d0843c28d87f73270f","modified":1683206141295},{"_id":"public/post/clickhouse常用高阶函数操作.html","hash":"1e9cd6c935c7d26eb68d146e0a68a3c890988b6b","modified":1683206141295},{"_id":"public/post/6fa57dd2.html","hash":"b5e24465be0cfd5bf84818ff26984aa39bce86c8","modified":1683206141295},{"_id":"public/post/3098b0d8.html","hash":"5396a4bffe6ce9ef206065bd88e1daeb4da74e5f","modified":1683206141295},{"_id":"public/post/34454ed8.html","hash":"7d379d956211b5c2f62539abcf3b408b59e0bf7a","modified":1683206141295},{"_id":"public/post/8a666a62.html","hash":"9d9d2ed49ebfb3c4ff4c0d0d28eb0c10247b5c1f","modified":1683206141295},{"_id":"public/post/fe28043d.html","hash":"ffd0d201e7f8a3de7421804fc65cf4bc9bf6e155","modified":1683206141295},{"_id":"public/post/7182060a.html","hash":"55937b7230994207421c6aa5e2f631b3b2d2cb16","modified":1683206141295},{"_id":"public/post/961344b2.html","hash":"98d01dd1d901ff7174ab474a31b6ee504c22f57d","modified":1683206141295},{"_id":"public/post/645ded65.html","hash":"7af9e22ad03a5626252682d82fd2e3b526d94f82","modified":1683206141295},{"_id":"public/post/a8f1a3f0.html","hash":"aee5f75ad3a9a750f958c2dcf46f4a650654dc17","modified":1683206141295},{"_id":"public/post/34f1116b.html","hash":"968f2f56956d7b299c5cd7e12485e1281e581ba4","modified":1683206141295},{"_id":"public/post/a5058aec.html","hash":"7cf1e8dc95c7947c1a9dedcd21ec3a7af482be83","modified":1683206141295},{"_id":"public/post/c24217a1.html","hash":"31fd247ceea66c5b6b22b4e0a4c951f35cde4183","modified":1683206141295},{"_id":"public/post/88a0a7e9.html","hash":"36b57e06bb6ca18f3a3144d0792eea0a9c6d360c","modified":1683206141295},{"_id":"public/tags/index.html","hash":"b60c820872ecdaa8da3478710ca2dc0500391ab4","modified":1683206141295},{"_id":"public/categories/index.html","hash":"158daf4b0802e8e855b074744d1b4ac44b739031","modified":1683206141295},{"_id":"public/about/index.html","hash":"9cfaf2ade44e30cdd52e8d2382ab2caddb9fbd18","modified":1683206141295},{"_id":"public/post/adb7f6d5.html","hash":"d0101b3ba27493a27acd757669a4885a5ae95602","modified":1683206141295},{"_id":"public/post/6a5d58b5.html","hash":"0e653f97857a328fa101a708bddd8a5a6ad564fd","modified":1683206141295},{"_id":"public/post/bca9151e.html","hash":"3a9e3afe7c486cef45b120382d45c25895870da8","modified":1683206141295},{"_id":"public/post/ea2c7bad.html","hash":"b54f6f6e9b1bf56c8540673955689c12f7c9ff37","modified":1683206141295},{"_id":"public/post/2d9efd01.html","hash":"f6c6a8134b40f9f341b34d9d7b57273227a26cae","modified":1683206141295},{"_id":"public/post/38c2d99.html","hash":"621c5bcfc99bc34fdfc59a2309d630fcb57131c1","modified":1683206141295},{"_id":"public/post/394fab29.html","hash":"ddde69cfbec2a5d63d2346f074127fe0a46bb036","modified":1683206141295},{"_id":"public/post/3c90a07d.html","hash":"c0d04aeb715eacad01db09e66cf1548638f975ea","modified":1683206141295},{"_id":"public/post/d7d262c7.html","hash":"bcc82bfa2ad46281003b0f81c9e2a90c308f5c31","modified":1683206141295},{"_id":"public/post/a1015970.html","hash":"9e5a2990a18668ea6362da969c2d1afd40cfbf73","modified":1683206141295},{"_id":"public/post/ff48a6a3.html","hash":"72a0cba8d81a3db0921d927defeda49c897199c6","modified":1683206141295},{"_id":"public/post/26cc78f7.html","hash":"a981bb0b9ff862aa85a5db87f079ffa49b0de1df","modified":1683206141295},{"_id":"public/post/6426f6ef.html","hash":"c3aee04eb0890e063d385344aca200d9a3a5df68","modified":1683206141295},{"_id":"public/post/121f24e9.html","hash":"6b6e1b0ec83cf630acd9612263d5f75a9d232ba6","modified":1683206141295},{"_id":"public/post/f906baad.html","hash":"61cef4407f96eb0fbc27b4ed7148479c5085ee0c","modified":1683206141295},{"_id":"public/post/46454e21.html","hash":"83c084afef0a0cab465f1706d0adca66aa0a3b08","modified":1683206141295},{"_id":"public/post/48709b05.html","hash":"ae5e23d8a10ca8a0df331e7f6d52d6224a7ec693","modified":1683206141295},{"_id":"public/post/54f8f4a7.html","hash":"aa391f1c9e203221c26937c74f592909c3975c3f","modified":1683206141295},{"_id":"public/post/7e553d6e.html","hash":"eacd389537c6b059cbebb69379fd337aef9bff9a","modified":1683206141295},{"_id":"public/post/9fdcaa40.html","hash":"ea082c91cfe259fd90bc2292c383f8886d99005e","modified":1683206141295},{"_id":"public/post/afd7e5bb.html","hash":"1fd3156eb6fadfd7f0e46178a7d49dd512a26a43","modified":1683206141295},{"_id":"public/post/d01613b0.html","hash":"c2f9b5e3877342a095b893c659474fc9df938b67","modified":1683206141295},{"_id":"public/post/fd031881.html","hash":"275491448db1383d0e3ddfdf405df33d7101336d","modified":1683206141295},{"_id":"public/post/10aadca5.html","hash":"497298d6504037de902bf3138cada844bac55c19","modified":1683206141295},{"_id":"public/post/e204e3f8.html","hash":"3eece75b7df7fd0fe8aba8609b0afb8d637b7e48","modified":1683206141295},{"_id":"public/post/b85e5b1d.html","hash":"dba578b7fe99392da4014de8918ebb91933404bf","modified":1683206141295},{"_id":"public/post/56d54cc1.html","hash":"d1bf69514907290340f7a87397e7800f8108b87a","modified":1683206141295},{"_id":"public/post/9cbf95f7.html","hash":"1af3dd92ceebc475cfd58e6988a1667b55193f6c","modified":1683206141295},{"_id":"public/post/98c9ab4f.html","hash":"cde8941c424510f942f98de4d8bab82294841304","modified":1683206141295},{"_id":"public/post/bd1646ec.html","hash":"380dde989c33026d5e3bf45052c4ffa5d20f704e","modified":1683206141295},{"_id":"public/post/6fb886e2.html","hash":"a3823848b8cc9e0d449bcc610073f834632a4dbe","modified":1683206141295},{"_id":"public/archives/index.html","hash":"c74246949649bc4e1f8ef37e95ca0c1070cab70e","modified":1683206141295},{"_id":"public/archives/page/2/index.html","hash":"45c237a19de07d9200faaf87dffd212b18424769","modified":1683206141295},{"_id":"public/archives/page/3/index.html","hash":"d011b1caf01ce8b284c4ede21a7c7cd1db475d74","modified":1683206141295},{"_id":"public/archives/page/4/index.html","hash":"80dd69732228f83d596c800613d11e46d340abc7","modified":1683206141295},{"_id":"public/archives/page/5/index.html","hash":"d56bc384864d8e5400dbc713c63202e0697deda5","modified":1683206141295},{"_id":"public/archives/2022/index.html","hash":"8fd39c5f721a3a71f18abcfb57de61741439c371","modified":1683206141295},{"_id":"public/archives/2022/page/2/index.html","hash":"b088d8fca5ae792adf7647346e4746a518c1f32c","modified":1683206141295},{"_id":"public/archives/2022/page/3/index.html","hash":"fb25fb001d14b0237ad47c35289f52a149326672","modified":1683206141295},{"_id":"public/archives/2022/page/4/index.html","hash":"ab63dae3d5009aea12546b4c986a0baaa1c24b3a","modified":1683206141295},{"_id":"public/archives/2022/page/5/index.html","hash":"8ea67d8e97ffaa4cbf9bb62f963cc6368e2a26c2","modified":1683206141295},{"_id":"public/archives/2022/02/index.html","hash":"d40f65ea0681a082729a3f31127d6c904daa716a","modified":1683206141295},{"_id":"public/archives/2022/02/page/2/index.html","hash":"6ca184c1a1fd86d4b701a3ea145d96d112dbe43c","modified":1683206141295},{"_id":"public/archives/2022/03/index.html","hash":"1f9b891121dae75c6506a72b59fa75983bf5cea1","modified":1683206141295},{"_id":"public/archives/2022/03/page/2/index.html","hash":"0e00b1f971e6d1c310981f3e22adde4149432789","modified":1683206141295},{"_id":"public/archives/2022/04/index.html","hash":"d30d47906bb2f49b16335f5270cdadb21d37c5c4","modified":1683206141295},{"_id":"public/archives/2022/08/index.html","hash":"54ebf42a7637cfce09be6f154ebaef54c148707d","modified":1683206141295},{"_id":"public/archives/2022/05/index.html","hash":"00e86e299ec54195aac11ec14f6c3cf73913790a","modified":1683206141295},{"_id":"public/archives/2022/12/index.html","hash":"dbb080b588f6b8969907555df69467df14527f19","modified":1683206141295},{"_id":"public/archives/2023/index.html","hash":"bf9f22f8b30e3b964d1401ac428e3d52c24a47bc","modified":1683206141295},{"_id":"public/archives/2023/04/index.html","hash":"0ffc5a290c99807549177f36718d830c93b6b493","modified":1683206141295},{"_id":"public/categories/开发者手册/index.html","hash":"01dd1c86b39ce1aa4afbcb6f5e01393f361070ea","modified":1683206141295},{"_id":"public/categories/golang/index.html","hash":"bdffdabc53415bae9c222934d5b974d8f1899299","modified":1683206141295},{"_id":"public/categories/golang/page/2/index.html","hash":"6188e5080f09ba6a6ac1a44b18d24854667dca5c","modified":1683206141295},{"_id":"public/categories/mongodb/index.html","hash":"c7abb22337da31ede9dd7f736be140829d6a26e2","modified":1683206141295},{"_id":"public/categories/clickhouse/index.html","hash":"4b249937b4616f8fa9a2d8ae914f5bf0804a50c6","modified":1683206141295},{"_id":"public/categories/docker/index.html","hash":"22ce019b46865dd257e3d8a364b6dd99b75cf774","modified":1683206141295},{"_id":"public/categories/git/index.html","hash":"b5b16123a80d8fb91ffc7f285d0f46606357671f","modified":1683206141295},{"_id":"public/categories/linux/index.html","hash":"6274a62cee259648032870b0f5af8941885cc64f","modified":1683206141295},{"_id":"public/categories/nginx/index.html","hash":"e0180c7342539de2c996507667e1778ed61b50a4","modified":1683206141295},{"_id":"public/categories/mysql/index.html","hash":"51d90295f7e23b06540cf1dbeec68750ffa3007f","modified":1683206141295},{"_id":"public/categories/ssh/index.html","hash":"bc12d996cf87d4abe0a3931abdb4fd4359755712","modified":1683206141295},{"_id":"public/index.html","hash":"89e8fce8afbe0fde04bcdc9a090d2e24bcfc46a9","modified":1683206141295},{"_id":"public/page/2/index.html","hash":"1cbac61d9ca2b805eb5e82f39e21b0955e5401a0","modified":1683206141295},{"_id":"public/page/3/index.html","hash":"12ea4ae55b4352f7802b5cd34d8050438645f8e2","modified":1683206141295},{"_id":"public/page/4/index.html","hash":"5fc5c0f952c8aa91e1d4b9f4a1db43c8e48f1843","modified":1683206141295},{"_id":"public/page/5/index.html","hash":"3b19f78baccbfde0070acffc3e2e063aff132d2b","modified":1683206141295},{"_id":"public/tags/gpg/index.html","hash":"fcdfa2917122df92aed9db8d11be38aa027241fc","modified":1683206141295},{"_id":"public/tags/rsa/index.html","hash":"60bf3b495e2eb8b3152caf0bf2bfb7b5abc123d7","modified":1683206141295},{"_id":"public/tags/golang/index.html","hash":"9cdca08a691ccd1b368dfd03a6dc789c2877288c","modified":1683206141295},{"_id":"public/tags/golang/page/2/index.html","hash":"9c9833c7a3f9438c656d8c0185d4bb896347443e","modified":1683206141295},{"_id":"public/tags/备份/index.html","hash":"18f0c63c5369f0177c00bd1285014ae8e6a8dee1","modified":1683206141295},{"_id":"public/tags/恢复/index.html","hash":"820e1b9210fb2355526cca722c45e0df6cf7c38c","modified":1683206141295},{"_id":"public/tags/clickhouse/index.html","hash":"c17c570f33b724bcb7393b1db63da7668f5ccbe6","modified":1683206141295},{"_id":"public/tags/docker-compose/index.html","hash":"9ba7adce3ee7a6581f6e1380514a3cc60bfc594f","modified":1683206141295},{"_id":"public/tags/docker/index.html","hash":"83fbf0c55cef21156a726559109264d9e9a3fcb4","modified":1683206141295},{"_id":"public/tags/git/index.html","hash":"f184729a3b1a3f95db90b0de65a94147dfdb6c54","modified":1683206141295},{"_id":"public/tags/add/index.html","hash":"92d4648e750f2a4c3fb25ec8dfc054b3cc19146c","modified":1683206141295},{"_id":"public/tags/tag/index.html","hash":"d7098fbf923d07d116c474e3f8da5a58830f8ebe","modified":1683206141295},{"_id":"public/tags/标签/index.html","hash":"e8fbff38220d5b466ee8daadab8f19cbee56a903","modified":1683206141295},{"_id":"public/tags/文件/index.html","hash":"65b76c1876ea9b19fd769ca84e2f8eecb99589b6","modified":1683206141295},{"_id":"public/tags/history/index.html","hash":"4c6fee38615fd4856b8c42613a95f058ac467365","modified":1683206141295},{"_id":"public/tags/status/index.html","hash":"5f15b991c9925f8f6842e7f519950caef6e88924","modified":1683206141295},{"_id":"public/tags/log/index.html","hash":"4d19acdc7267f18cf0c6709bca28f69daa851c16","modified":1683206141295},{"_id":"public/tags/aes/index.html","hash":"90d5e19a8673a723e302b51b549e3c281fd2d3e9","modified":1683206141295},{"_id":"public/tags/代理/index.html","hash":"68e1d3c9d634a00190e6a689e69563ba4096631a","modified":1683206141295},{"_id":"public/tags/cbc/index.html","hash":"f6ab8eae955bbf981cf81b276e6165f14b574f57","modified":1683206141295},{"_id":"public/tags/ecb/index.html","hash":"906b50225834b8195a57eaa31efd43743ca3ade0","modified":1683206141295},{"_id":"public/tags/pprof/index.html","hash":"b074e01d176c1e1c250810a91dd731bfb30d6a16","modified":1683206141295},{"_id":"public/tags/json/index.html","hash":"0b5e82bbde04dcb271b198fbfe950ddd933712fb","modified":1683206141295},{"_id":"public/tags/字符串/index.html","hash":"117ada3cbae3d377b7055e9703ebcdfb4679f89e","modified":1683206141295},{"_id":"public/tags/map/index.html","hash":"faf4871e08e9196464d209c744e64d85514bf2f6","modified":1683206141295},{"_id":"public/tags/cmd/index.html","hash":"cac06b97e27d02242896df4444550121a80bfd4a","modified":1683206141295},{"_id":"public/tags/redis/index.html","hash":"2e25cc17599fd10663ee7820cc44ebad3ecebc01","modified":1683206141295},{"_id":"public/tags/linux/index.html","hash":"a686b6b82e4446a613a2072158789d786e398e1a","modified":1683206141295},{"_id":"public/tags/bash/index.html","hash":"7ef77922c8054fece03560cc8cd223de2eb86fdd","modified":1683206141295},{"_id":"public/tags/mysql/index.html","hash":"c95ec2d81d50674c4ae58f0effd217cadd2c9475","modified":1683206141295},{"_id":"public/tags/nginx/index.html","hash":"a8fbd1692b2943958b517cd08c57b3a6b3cf7509","modified":1683206141295},{"_id":"public/tags/ssh/index.html","hash":"7dbff61fa9226cff1596a9dbad34ff084a99ffc8","modified":1683206141295},{"_id":"public/tags/rsync/index.html","hash":"8ff306a992a301cde51142c41f12c5557f526bdb","modified":1683206141295},{"_id":"public/tags/scp/index.html","hash":"2141d8bf5df029878d75208ec3815793a65e75be","modified":1683206141295},{"_id":"public/CNAME","hash":"079c5f5741080670120f62b4cd7700aee5209fdd","modified":1683206141295},{"_id":"public/pictures/1681230165886.jpg","hash":"0de77d6d55531fa27c0a652a43e956332e943e2e","modified":1683206141295},{"_id":"public/css/'","hash":"be1f684f720a7a4ed2fcbd9e8508e78e854889a3","modified":1683206141295},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1683206141295},{"_id":"public/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1683206141295},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1683206141295},{"_id":"public/css/background.css","hash":"acf6be5a7d7f1a8e7cc599abf6292b234d4f6cb3","modified":1683206141295},{"_id":"public/css/modify.css","hash":"ceaee8f51cd5eb1c97f6964a18416dd80255d7c7","modified":1683206141295},{"_id":"public/css/modify1.css","hash":"a1ebec25ef7f0b5572fe26e632ee23b22c05cb9b","modified":1683206141295},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1683206141295},{"_id":"public/js/universe.js","hash":"917e3c2bda5c898f50c9a123d6de9037bd9c9b89","modified":1683206141295},{"_id":"public/js/utils.js","hash":"2e74fe8ae5ac20067668a18df5985459faf419f9","modified":1683206141295},{"_id":"public/js/search/algolia.js","hash":"fd86281d4f0f99ce173e49c1a0df3507fe268d37","modified":1683206141295},{"_id":"public/js/search/local-search.js","hash":"8a0547ecb33ad2939450152adf54fca58e22a424","modified":1683206141295},{"_id":"public/css/index.css","hash":"694b758a114bbb478a158f999466eed51a1a1c13","modified":1683206141295},{"_id":"public/js/tw_cn.js","hash":"76d0c5c172cae44b34b0bd3125fd068b2c3cbd4a","modified":1683206141295},{"_id":"public/js/main.js","hash":"05c825962e365af62096d3f1b4d7c9ee1b5fc2f5","modified":1683206141295}],"Category":[{"name":"开发者手册","_id":"clh95h7j70004gwuvaaeuaj34"},{"name":"golang","_id":"clh95h7jd000agwuv18ve55dd"},{"name":"mongodb","_id":"clh95h7jf000fgwuvfkfognvd"},{"name":"clickhouse","_id":"clh95h7jn000rgwuv1v9xf6la"},{"name":"docker","_id":"clh95h7jw0019gwuv77bq3le0"},{"name":"git","_id":"clh95h7k9001vgwuv4b9t4wtx"},{"name":"linux","_id":"clh95h7kv003jgwuv29ng0qxi"},{"name":"mysql","_id":"clh95h7l30047gwuvbzto6kbo"},{"name":"nginx","_id":"clh95h7l4004dgwuv9huvd2te"},{"name":"ssh","_id":"clh95h7l6004tgwuv74li6jkw"}],"Data":[{"_id":"footer","data":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}],"Page":[{"title":"标签","date":"2022-06-07T09:32:35.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2022-06-07 17:32:35\ntype: tags\n---\n","updated":"2023-04-23T17:04:08.229Z","path":"tags/index.html","comments":1,"layout":"page","_id":"clh95h7iz0000gwuvaybtcxt7","content":"","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}},"cover":false,"excerpt":"","more":""},{"title":"分类","date":"2022-06-07T09:40:33.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2022-06-07 17:40:33\ntype: categories\n---\n","updated":"2023-04-23T17:04:08.228Z","path":"categories/index.html","comments":1,"layout":"page","_id":"clh95h7j50002gwuv6gll41cl","content":"","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}},"cover":false,"excerpt":"","more":""},{"title":"关于","date":"2022-06-08T07:52:19.000Z","type":"about","_content":"# CarrotVegeta的个人博客！！！\n","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2022-06-08 15:52:19\ntype: about\n---\n# CarrotVegeta的个人博客！！！\n","updated":"2023-04-23T17:04:08.228Z","path":"about/index.html","comments":1,"layout":"page","_id":"clh95h7j90006gwuvdxyy8evc","content":"<h1 id=\"CarrotVegeta的个人博客！！！\"><a href=\"#CarrotVegeta的个人博客！！！\" class=\"headerlink\" title=\"CarrotVegeta的个人博客！！！\"></a>CarrotVegeta的个人博客！！！</h1>","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}},"cover":false,"excerpt":"","more":"<h1 id=\"CarrotVegeta的个人博客！！！\"><a href=\"#CarrotVegeta的个人博客！！！\" class=\"headerlink\" title=\"CarrotVegeta的个人博客！！！\"></a>CarrotVegeta的个人博客！！！</h1>"}],"Post":[{"title":"GPG入门教程","url":"/archives/gpg-ru-men-jiao-cheng","abbrlink":"961344b2","date":"2022-03-01T15:04:25.000Z","updated":"2022-03-01T15:06:16.000Z","_content":"\n原文链接：<http://www.ruanyifeng.com/blog/2013/07/gpg.html>","source":"_posts/GPG入门教程.md","raw":"---\ntitle: GPG入门教程\nurl: /archives/gpg-ru-men-jiao-cheng\ncategories:\n  - 开发者手册\ntags:\n  - gpg\n  - rsa\nabbrlink: 961344b2\ndate: 2022-03-01 23:04:25\nupdated: 2022-03-01 23:06:16\n---\n\n原文链接：<http://www.ruanyifeng.com/blog/2013/07/gpg.html>","slug":"GPG入门教程","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clh95h7j20001gwuv8z62codl","content":"<p>原文链接：<a href=\"http://www.ruanyifeng.com/blog/2013/07/gpg.html\">http://www.ruanyifeng.com/blog/2013/07/gpg.html</a></p>\n","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}},"cover":false,"excerpt":"","more":"<p>原文链接：<a href=\"http://www.ruanyifeng.com/blog/2013/07/gpg.html\">http://www.ruanyifeng.com/blog/2013/07/gpg.html</a></p>\n"},{"title":"golang 统计代码行数","description":"golang 统计代码行数","abbrlink":"ea2c7bad","date":"2022-08-31T12:17:27.000Z","updated":"2022-08-31T12:17:27.000Z","_content":"\n# golang 统计代码行数\n\n## 使用gocloc工具进行统计\n\n获取gocloc工具：\n\n```bash\ngo get -u github.com/hhatto/gocloc/cmd/gocloc\n```\n使用gocloc命令 gocloc[目录路径或文件路径] 进行统计\n\n```bash\ngocloc .\n```\n\n`gocloc`会按类别统计路径下有多少文件，文件中的空行数，注释行数以及实际代码行数。如果目录下某类文件不需要统计，可以使用参数`--exclue-ext=[文件后缀]`\n\n例如：\n\n```bash\ngocloc --exclue-ext=txt .\n```\n\n","source":"_posts/2022-08-31-golang-统计代码行数.md","raw":"---\ntitle: golang 统计代码行数\ndescription: golang 统计代码行数\ncategories:\n  - golang\ntags:\n  - golang\nabbrlink: ea2c7bad\ndate: 2022-08-31 20:17:27\nupdated: 2022-08-31 20:17:27\n---\n\n# golang 统计代码行数\n\n## 使用gocloc工具进行统计\n\n获取gocloc工具：\n\n```bash\ngo get -u github.com/hhatto/gocloc/cmd/gocloc\n```\n使用gocloc命令 gocloc[目录路径或文件路径] 进行统计\n\n```bash\ngocloc .\n```\n\n`gocloc`会按类别统计路径下有多少文件，文件中的空行数，注释行数以及实际代码行数。如果目录下某类文件不需要统计，可以使用参数`--exclue-ext=[文件后缀]`\n\n例如：\n\n```bash\ngocloc --exclue-ext=txt .\n```\n\n","slug":"2022-08-31-golang-统计代码行数","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clh95h7j50003gwuv5g0n4kdz","content":"<h1 id=\"golang-统计代码行数\"><a href=\"#golang-统计代码行数\" class=\"headerlink\" title=\"golang 统计代码行数\"></a>golang 统计代码行数</h1><h2 id=\"使用gocloc工具进行统计\"><a href=\"#使用gocloc工具进行统计\" class=\"headerlink\" title=\"使用gocloc工具进行统计\"></a>使用gocloc工具进行统计</h2><p>获取gocloc工具：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">go get -u github.com/hhatto/gocloc/cmd/gocloc<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>使用gocloc命令 gocloc[目录路径或文件路径] 进行统计</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">gocloc <span class=\"token builtin class-name\">.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><code>gocloc</code>会按类别统计路径下有多少文件，文件中的空行数，注释行数以及实际代码行数。如果目录下某类文件不需要统计，可以使用参数<code>--exclue-ext=[文件后缀]</code></p>\n<p>例如：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">gocloc --exclue-ext<span class=\"token operator\">=</span>txt <span class=\"token builtin class-name\">.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}},"cover":false,"excerpt":"","more":"<h1 id=\"golang-统计代码行数\"><a href=\"#golang-统计代码行数\" class=\"headerlink\" title=\"golang 统计代码行数\"></a>golang 统计代码行数</h1><h2 id=\"使用gocloc工具进行统计\"><a href=\"#使用gocloc工具进行统计\" class=\"headerlink\" title=\"使用gocloc工具进行统计\"></a>使用gocloc工具进行统计</h2><p>获取gocloc工具：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">go get -u github.com/hhatto/gocloc/cmd/gocloc<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>使用gocloc命令 gocloc[目录路径或文件路径] 进行统计</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">gocloc <span class=\"token builtin class-name\">.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><code>gocloc</code>会按类别统计路径下有多少文件，文件中的空行数，注释行数以及实际代码行数。如果目录下某类文件不需要统计，可以使用参数<code>--exclue-ext=[文件后缀]</code></p>\n<p>例如：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">gocloc --exclue-ext<span class=\"token operator\">=</span>txt <span class=\"token builtin class-name\">.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n"},{"title":"MongoDB 备份(mongodump)与恢复(mongorestore)","url":"/archives/mongodbbei-fen-mongodump-yu-hui-fu-mongorestore","description":"MongoDB命令行备份数据以及恢复数据","abbrlink":"fd031881","date":"2022-02-16T07:55:26.000Z","updated":"2022-02-16T07:55:26.000Z","_content":"\n# MongoDB 备份(mongodump)与恢复(mongorestore)\n\n---\n\n## MongoDB数据备份\n\n在Mongodb中我们使用mongodump命令来备份MongoDB数据。该命令可以导出所有数据到指定目录中。\n\nmongodump命令可以通过参数指定导出的数据量级转存的服务器。\n\n### 语法\n\nmongodump命令脚本语法如下：\n\n```sql\n>mongodump -h dbhost -d dbname -o dbdirectory\n```\n\n- -h：\n  \n  MongDB所在服务器地址，例如：127.0.0.1，当然也可以指定端口号：127.0.0.1:27017\n  \n- -d：\n  \n  需要备份的数据库实例，例如：test\n  \n- -o：\n  \n  备份的数据存放位置，例如：c:\\data\\dump，当然该目录需要提前建立，在备份完成后，系统自动在dump目录下建立一个test目录，这个目录里面存放该数据库实例的备份数据。\n  \n\n### 实例\n\n在本地使用 27017 启动你的mongod服务。打开命令提示符窗口，进入MongoDB安装目录的bin目录输入命令mongodump:\n\n```mongo\n>mongodump\n```\n\n执行以上命令后，客户端会连接到ip为 127.0.0.1 端口号为 27017 的MongoDB服务上，并备份所有数据到 bin/dump/ 目录中。命令输出结果如下：\n\nmongodump 命令可选参数列表如下所示：\n\n| 语法  | 描述  | 实例  |\n| --- | --- | --- |\n| mongodump --host HOST_NAME --port PORT_NUMBER | 该命令将备份所有MongoDB数据 | mongodump --host runoob.com --port 27017 |\n| mongodump --dbpath DB_PATH --out BACKUP_DIRECTORY |     | mongodump --dbpath /data/db/ --out /data/backup/ |\n| mongodump --collection COLLECTION --db DB_NAME | 该命令将备份指定数据库的集合。 | mongodump --collection mycol --db test |\n\n---\n\n## MongoDB数据恢复\n\nmongodb使用 mongorestore 命令来恢复备份的数据\n\n### mongorestore命令脚本语法如下\n\n```mongo\n>mongorestore -h <hostname><:port> -d dbname <path>\n```\n\n- --host <:port>, -h <:port>：\n  \n  MongoDB所在服务器地址，默认为： localhost:27017\n  \n- --db , -d ：\n  \n  需要恢复的数据库实例，例如：test，当然这个名称也可以和备份时候的不一样，比如test2\n  \n- --drop：\n  \n  恢复的时候，先删除当前数据，然后恢复备份的数据。就是说，恢复后，备份后添加修改的数据都会被删除，慎用哦！\n  \n- `<path>`：\n  \n  mongorestore 最后的一个参数，设置备份数据所在位置，例如：c:\\data\\dump\\test。\n  \n  你不能同时指定 `<path>` 和 --dir 选项，--dir也可以设置备份目录。\n  \n- --dir：\n  \n  指定备份的目录\n  \n  你不能同时指定 `<path>` 和 --dir 选项。\n  \n\n接下来我们执行以下命令:\n\n```mongo\n>mongorestore\n```\n\n执行以上命令输出结果如下：\n","source":"_posts/MongoDB备份与恢复.md","raw":"---\ntitle: MongoDB 备份(mongodump)与恢复(mongorestore)\nurl: /archives/mongodbbei-fen-mongodump-yu-hui-fu-mongorestore\ndescription: MongoDB命令行备份数据以及恢复数据\ncategories:\n  - mongodb\ntags:\n  - 备份\n  - 恢复\nabbrlink: fd031881\ndate: 2022-02-16 15:55:26\nupdated: 2022-02-16 15:55:26\n---\n\n# MongoDB 备份(mongodump)与恢复(mongorestore)\n\n---\n\n## MongoDB数据备份\n\n在Mongodb中我们使用mongodump命令来备份MongoDB数据。该命令可以导出所有数据到指定目录中。\n\nmongodump命令可以通过参数指定导出的数据量级转存的服务器。\n\n### 语法\n\nmongodump命令脚本语法如下：\n\n```sql\n>mongodump -h dbhost -d dbname -o dbdirectory\n```\n\n- -h：\n  \n  MongDB所在服务器地址，例如：127.0.0.1，当然也可以指定端口号：127.0.0.1:27017\n  \n- -d：\n  \n  需要备份的数据库实例，例如：test\n  \n- -o：\n  \n  备份的数据存放位置，例如：c:\\data\\dump，当然该目录需要提前建立，在备份完成后，系统自动在dump目录下建立一个test目录，这个目录里面存放该数据库实例的备份数据。\n  \n\n### 实例\n\n在本地使用 27017 启动你的mongod服务。打开命令提示符窗口，进入MongoDB安装目录的bin目录输入命令mongodump:\n\n```mongo\n>mongodump\n```\n\n执行以上命令后，客户端会连接到ip为 127.0.0.1 端口号为 27017 的MongoDB服务上，并备份所有数据到 bin/dump/ 目录中。命令输出结果如下：\n\nmongodump 命令可选参数列表如下所示：\n\n| 语法  | 描述  | 实例  |\n| --- | --- | --- |\n| mongodump --host HOST_NAME --port PORT_NUMBER | 该命令将备份所有MongoDB数据 | mongodump --host runoob.com --port 27017 |\n| mongodump --dbpath DB_PATH --out BACKUP_DIRECTORY |     | mongodump --dbpath /data/db/ --out /data/backup/ |\n| mongodump --collection COLLECTION --db DB_NAME | 该命令将备份指定数据库的集合。 | mongodump --collection mycol --db test |\n\n---\n\n## MongoDB数据恢复\n\nmongodb使用 mongorestore 命令来恢复备份的数据\n\n### mongorestore命令脚本语法如下\n\n```mongo\n>mongorestore -h <hostname><:port> -d dbname <path>\n```\n\n- --host <:port>, -h <:port>：\n  \n  MongoDB所在服务器地址，默认为： localhost:27017\n  \n- --db , -d ：\n  \n  需要恢复的数据库实例，例如：test，当然这个名称也可以和备份时候的不一样，比如test2\n  \n- --drop：\n  \n  恢复的时候，先删除当前数据，然后恢复备份的数据。就是说，恢复后，备份后添加修改的数据都会被删除，慎用哦！\n  \n- `<path>`：\n  \n  mongorestore 最后的一个参数，设置备份数据所在位置，例如：c:\\data\\dump\\test。\n  \n  你不能同时指定 `<path>` 和 --dir 选项，--dir也可以设置备份目录。\n  \n- --dir：\n  \n  指定备份的目录\n  \n  你不能同时指定 `<path>` 和 --dir 选项。\n  \n\n接下来我们执行以下命令:\n\n```mongo\n>mongorestore\n```\n\n执行以上命令输出结果如下：\n","slug":"MongoDB备份与恢复","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clh95h7j90007gwuv36k0bhk1","content":"<h1 id=\"MongoDB-备份-mongodump-与恢复-mongorestore\"><a href=\"#MongoDB-备份-mongodump-与恢复-mongorestore\" class=\"headerlink\" title=\"MongoDB 备份(mongodump)与恢复(mongorestore)\"></a>MongoDB 备份(mongodump)与恢复(mongorestore)</h1><hr>\n<h2 id=\"MongoDB数据备份\"><a href=\"#MongoDB数据备份\" class=\"headerlink\" title=\"MongoDB数据备份\"></a>MongoDB数据备份</h2><p>在Mongodb中我们使用mongodump命令来备份MongoDB数据。该命令可以导出所有数据到指定目录中。</p>\n<p>mongodump命令可以通过参数指定导出的数据量级转存的服务器。</p>\n<h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><p>mongodump命令脚本语法如下：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token operator\">></span>mongodump <span class=\"token operator\">-</span>h dbhost <span class=\"token operator\">-</span>d dbname <span class=\"token operator\">-</span>o dbdirectory<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><p>-h：</p>\n<p>MongDB所在服务器地址，例如：127.0.0.1，当然也可以指定端口号：127.0.0.1:27017</p>\n</li>\n<li><p>-d：</p>\n<p>需要备份的数据库实例，例如：test</p>\n</li>\n<li><p>-o：</p>\n<p>备份的数据存放位置，例如：c:\\data\\dump，当然该目录需要提前建立，在备份完成后，系统自动在dump目录下建立一个test目录，这个目录里面存放该数据库实例的备份数据。</p>\n</li>\n</ul>\n<h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3><p>在本地使用 27017 启动你的mongod服务。打开命令提示符窗口，进入MongoDB安装目录的bin目录输入命令mongodump:</p>\n<pre class=\"line-numbers language-mongo\" data-language=\"mongo\"><code class=\"language-mongo\">&gt;mongodump<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>执行以上命令后，客户端会连接到ip为 127.0.0.1 端口号为 27017 的MongoDB服务上，并备份所有数据到 bin&#x2F;dump&#x2F; 目录中。命令输出结果如下：</p>\n<p>mongodump 命令可选参数列表如下所示：</p>\n<table>\n<thead>\n<tr>\n<th>语法</th>\n<th>描述</th>\n<th>实例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>mongodump –host HOST_NAME –port PORT_NUMBER</td>\n<td>该命令将备份所有MongoDB数据</td>\n<td>mongodump –host runoob.com –port 27017</td>\n</tr>\n<tr>\n<td>mongodump –dbpath DB_PATH –out BACKUP_DIRECTORY</td>\n<td></td>\n<td>mongodump –dbpath &#x2F;data&#x2F;db&#x2F; –out &#x2F;data&#x2F;backup&#x2F;</td>\n</tr>\n<tr>\n<td>mongodump –collection COLLECTION –db DB_NAME</td>\n<td>该命令将备份指定数据库的集合。</td>\n<td>mongodump –collection mycol –db test</td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"MongoDB数据恢复\"><a href=\"#MongoDB数据恢复\" class=\"headerlink\" title=\"MongoDB数据恢复\"></a>MongoDB数据恢复</h2><p>mongodb使用 mongorestore 命令来恢复备份的数据</p>\n<h3 id=\"mongorestore命令脚本语法如下\"><a href=\"#mongorestore命令脚本语法如下\" class=\"headerlink\" title=\"mongorestore命令脚本语法如下\"></a>mongorestore命令脚本语法如下</h3><pre class=\"line-numbers language-mongo\" data-language=\"mongo\"><code class=\"language-mongo\">&gt;mongorestore -h &lt;hostname&gt;&lt;:port&gt; -d dbname &lt;path&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><p>–host &lt;:port&gt;, -h &lt;:port&gt;：</p>\n<p>MongoDB所在服务器地址，默认为： localhost:27017</p>\n</li>\n<li><p>–db , -d ：</p>\n<p>需要恢复的数据库实例，例如：test，当然这个名称也可以和备份时候的不一样，比如test2</p>\n</li>\n<li><p>–drop：</p>\n<p>恢复的时候，先删除当前数据，然后恢复备份的数据。就是说，恢复后，备份后添加修改的数据都会被删除，慎用哦！</p>\n</li>\n<li><p><code>&lt;path&gt;</code>：</p>\n<p>mongorestore 最后的一个参数，设置备份数据所在位置，例如：c:\\data\\dump\\test。</p>\n<p>你不能同时指定 <code>&lt;path&gt;</code> 和 –dir 选项，–dir也可以设置备份目录。</p>\n</li>\n<li><p>–dir：</p>\n<p>指定备份的目录</p>\n<p>你不能同时指定 <code>&lt;path&gt;</code> 和 –dir 选项。</p>\n</li>\n</ul>\n<p>接下来我们执行以下命令:</p>\n<pre class=\"line-numbers language-mongo\" data-language=\"mongo\"><code class=\"language-mongo\">&gt;mongorestore<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>执行以上命令输出结果如下：</p>\n","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}},"cover":false,"excerpt":"","more":"<h1 id=\"MongoDB-备份-mongodump-与恢复-mongorestore\"><a href=\"#MongoDB-备份-mongodump-与恢复-mongorestore\" class=\"headerlink\" title=\"MongoDB 备份(mongodump)与恢复(mongorestore)\"></a>MongoDB 备份(mongodump)与恢复(mongorestore)</h1><hr>\n<h2 id=\"MongoDB数据备份\"><a href=\"#MongoDB数据备份\" class=\"headerlink\" title=\"MongoDB数据备份\"></a>MongoDB数据备份</h2><p>在Mongodb中我们使用mongodump命令来备份MongoDB数据。该命令可以导出所有数据到指定目录中。</p>\n<p>mongodump命令可以通过参数指定导出的数据量级转存的服务器。</p>\n<h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><p>mongodump命令脚本语法如下：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token operator\">></span>mongodump <span class=\"token operator\">-</span>h dbhost <span class=\"token operator\">-</span>d dbname <span class=\"token operator\">-</span>o dbdirectory<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><p>-h：</p>\n<p>MongDB所在服务器地址，例如：127.0.0.1，当然也可以指定端口号：127.0.0.1:27017</p>\n</li>\n<li><p>-d：</p>\n<p>需要备份的数据库实例，例如：test</p>\n</li>\n<li><p>-o：</p>\n<p>备份的数据存放位置，例如：c:\\data\\dump，当然该目录需要提前建立，在备份完成后，系统自动在dump目录下建立一个test目录，这个目录里面存放该数据库实例的备份数据。</p>\n</li>\n</ul>\n<h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3><p>在本地使用 27017 启动你的mongod服务。打开命令提示符窗口，进入MongoDB安装目录的bin目录输入命令mongodump:</p>\n<pre class=\"line-numbers language-mongo\" data-language=\"mongo\"><code class=\"language-mongo\">&gt;mongodump<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>执行以上命令后，客户端会连接到ip为 127.0.0.1 端口号为 27017 的MongoDB服务上，并备份所有数据到 bin&#x2F;dump&#x2F; 目录中。命令输出结果如下：</p>\n<p>mongodump 命令可选参数列表如下所示：</p>\n<table>\n<thead>\n<tr>\n<th>语法</th>\n<th>描述</th>\n<th>实例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>mongodump –host HOST_NAME –port PORT_NUMBER</td>\n<td>该命令将备份所有MongoDB数据</td>\n<td>mongodump –host runoob.com –port 27017</td>\n</tr>\n<tr>\n<td>mongodump –dbpath DB_PATH –out BACKUP_DIRECTORY</td>\n<td></td>\n<td>mongodump –dbpath &#x2F;data&#x2F;db&#x2F; –out &#x2F;data&#x2F;backup&#x2F;</td>\n</tr>\n<tr>\n<td>mongodump –collection COLLECTION –db DB_NAME</td>\n<td>该命令将备份指定数据库的集合。</td>\n<td>mongodump –collection mycol –db test</td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"MongoDB数据恢复\"><a href=\"#MongoDB数据恢复\" class=\"headerlink\" title=\"MongoDB数据恢复\"></a>MongoDB数据恢复</h2><p>mongodb使用 mongorestore 命令来恢复备份的数据</p>\n<h3 id=\"mongorestore命令脚本语法如下\"><a href=\"#mongorestore命令脚本语法如下\" class=\"headerlink\" title=\"mongorestore命令脚本语法如下\"></a>mongorestore命令脚本语法如下</h3><pre class=\"line-numbers language-mongo\" data-language=\"mongo\"><code class=\"language-mongo\">&gt;mongorestore -h &lt;hostname&gt;&lt;:port&gt; -d dbname &lt;path&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><p>–host &lt;:port&gt;, -h &lt;:port&gt;：</p>\n<p>MongoDB所在服务器地址，默认为： localhost:27017</p>\n</li>\n<li><p>–db , -d ：</p>\n<p>需要恢复的数据库实例，例如：test，当然这个名称也可以和备份时候的不一样，比如test2</p>\n</li>\n<li><p>–drop：</p>\n<p>恢复的时候，先删除当前数据，然后恢复备份的数据。就是说，恢复后，备份后添加修改的数据都会被删除，慎用哦！</p>\n</li>\n<li><p><code>&lt;path&gt;</code>：</p>\n<p>mongorestore 最后的一个参数，设置备份数据所在位置，例如：c:\\data\\dump\\test。</p>\n<p>你不能同时指定 <code>&lt;path&gt;</code> 和 –dir 选项，–dir也可以设置备份目录。</p>\n</li>\n<li><p>–dir：</p>\n<p>指定备份的目录</p>\n<p>你不能同时指定 <code>&lt;path&gt;</code> 和 –dir 选项。</p>\n</li>\n</ul>\n<p>接下来我们执行以下命令:</p>\n<pre class=\"line-numbers language-mongo\" data-language=\"mongo\"><code class=\"language-mongo\">&gt;mongorestore<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>执行以上命令输出结果如下：</p>\n"},{"title":"channel的死锁和panic总结","url":"/archives/channel的死锁和panic总结","description":"channel的死锁和panic总结","abbrlink":"2d9efd01","date":"2022-05-07T08:30:27.000Z","updated":"2022-05-07T09:17:18.000Z","_content":"\n# channel的死锁和panic总结\n\n## 1.channel的容量为0时\n\n### 第一种情况\n```go\nfunc main() {\n\tc := make(chan int, 0)\n     //一直接收不到消息发生阻塞，死锁\n\tfmt.Println(<-c)\n}\n```\n### 第二种情况\n```go\nfunc main() {\n\tc := make(chan int, 0)\n    //发送消息的时候无人接收\n\tc <- 1\n    //接收消息 的时候无人发送 死锁\n\tfmt.Println(<-c)\n}\n```\n这是因为channel size为0，之前把1传进c中，但是没有接收方，等到<-c时，已经接收不到数据传入channel，所以死锁\n\n### 第三种情况\n```go\nfunc main() {\n   //没有初始化\n\tvar ch chan int\n\tgo func() {\n\t\tch <- 1\n\t}()\n\tfmt.Println(<-ch)\n}\n```\n\n### 第四种情况\n\n```go\n\nfunc demo5() {\n    var c chan int //定义类型\n    c = make(chan int ,0) //初始化\n    go func() {\n        for i := 0; i < 3; i++ {\n            c <- i //传入channel数据\n        }\n    }()\n    for  v := range c{\n        fmt.Println(v)\n    }\n}\n```\n结果是死锁，应该将数据传进channel后，并没有关闭channel，for循环接收channel一直在监听，死锁\n\n数据传进channel后，输入方主动关闭channel\n```go\nfunc demo5() {\n    var c chan int\n    c = make(chan int ,0)\n    go func() {\n        for i := 0; i < 3; i++ {\n            c <- i\n        }\n        close(c) //或者defer close(c)\n    }()\n    for  v := range c{\n        fmt.Println(v)\n    }\n}\n```\n### 当channel 关闭且缓冲区为0时\n```go\nfunc demo6() {\n    c := make(chan int,1)\n    close(c)\n    fmt.Println(<-c)\n}\n\n//输出为0\n```\n### 关闭未初始化的channel，会panic\n```go\nfunc demo6() {\n    var c chan int\n    close(c)\n}\n```\n\n### 特殊情况\n```go\nfunc main() {\n    var ch chan int\n    //func1\n    go func() {\n        ch = make(chan int, 1)\n        ch <- 1\n    }()\n    //func2\n    go func(ch chan int) {\n        time.Sleep(time.Second)\n        <-ch\n    }(ch)\n    c := time.Tick(1 * time.Second)\n    for range c {\n        fmt.Printf(\"#goroutines: %d\\n\", runtime.NumGoroutine())\n    }\n}\n\n//一段时间后输出结果为#goroutines: 2\n```\n结果中的goroutines分别为fun2 和 main函数，因为fun2没有初始化ch 所以会一直阻塞（func1中的初始化只在其所在的闭包函数中有效)\n\n### 注意点：\n1. channel关闭后，再向channel中写入数据会panic\n2. channel关闭后，再次关闭channel，会panic\n3. 关闭未初始化的channel，会panic\n4. channel关闭后，可以继续从channel中接收数据\n5. 当channel 关闭且缓冲区为0时，继续从channel接收数据会接收到一个channel定义类型的零值\n6. channel先进先出\n\n作者：coldwarm7\n链接：https://www.jianshu.com/p/f25cdd72efce\n来源：简书\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n","source":"_posts/channel的死锁和panic总结.md","raw":"---\ntitle: channel的死锁和panic总结\nurl: /archives/channel的死锁和panic总结\ndescription: channel的死锁和panic总结\ncategories:\n  - golang\ntags:\n  - golang\nabbrlink: 2d9efd01\ndate: 2022-05-07 16:30:27\nupdated: 2022-05-07 17:17:18\n---\n\n# channel的死锁和panic总结\n\n## 1.channel的容量为0时\n\n### 第一种情况\n```go\nfunc main() {\n\tc := make(chan int, 0)\n     //一直接收不到消息发生阻塞，死锁\n\tfmt.Println(<-c)\n}\n```\n### 第二种情况\n```go\nfunc main() {\n\tc := make(chan int, 0)\n    //发送消息的时候无人接收\n\tc <- 1\n    //接收消息 的时候无人发送 死锁\n\tfmt.Println(<-c)\n}\n```\n这是因为channel size为0，之前把1传进c中，但是没有接收方，等到<-c时，已经接收不到数据传入channel，所以死锁\n\n### 第三种情况\n```go\nfunc main() {\n   //没有初始化\n\tvar ch chan int\n\tgo func() {\n\t\tch <- 1\n\t}()\n\tfmt.Println(<-ch)\n}\n```\n\n### 第四种情况\n\n```go\n\nfunc demo5() {\n    var c chan int //定义类型\n    c = make(chan int ,0) //初始化\n    go func() {\n        for i := 0; i < 3; i++ {\n            c <- i //传入channel数据\n        }\n    }()\n    for  v := range c{\n        fmt.Println(v)\n    }\n}\n```\n结果是死锁，应该将数据传进channel后，并没有关闭channel，for循环接收channel一直在监听，死锁\n\n数据传进channel后，输入方主动关闭channel\n```go\nfunc demo5() {\n    var c chan int\n    c = make(chan int ,0)\n    go func() {\n        for i := 0; i < 3; i++ {\n            c <- i\n        }\n        close(c) //或者defer close(c)\n    }()\n    for  v := range c{\n        fmt.Println(v)\n    }\n}\n```\n### 当channel 关闭且缓冲区为0时\n```go\nfunc demo6() {\n    c := make(chan int,1)\n    close(c)\n    fmt.Println(<-c)\n}\n\n//输出为0\n```\n### 关闭未初始化的channel，会panic\n```go\nfunc demo6() {\n    var c chan int\n    close(c)\n}\n```\n\n### 特殊情况\n```go\nfunc main() {\n    var ch chan int\n    //func1\n    go func() {\n        ch = make(chan int, 1)\n        ch <- 1\n    }()\n    //func2\n    go func(ch chan int) {\n        time.Sleep(time.Second)\n        <-ch\n    }(ch)\n    c := time.Tick(1 * time.Second)\n    for range c {\n        fmt.Printf(\"#goroutines: %d\\n\", runtime.NumGoroutine())\n    }\n}\n\n//一段时间后输出结果为#goroutines: 2\n```\n结果中的goroutines分别为fun2 和 main函数，因为fun2没有初始化ch 所以会一直阻塞（func1中的初始化只在其所在的闭包函数中有效)\n\n### 注意点：\n1. channel关闭后，再向channel中写入数据会panic\n2. channel关闭后，再次关闭channel，会panic\n3. 关闭未初始化的channel，会panic\n4. channel关闭后，可以继续从channel中接收数据\n5. 当channel 关闭且缓冲区为0时，继续从channel接收数据会接收到一个channel定义类型的零值\n6. channel先进先出\n\n作者：coldwarm7\n链接：https://www.jianshu.com/p/f25cdd72efce\n来源：简书\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n","slug":"channel的死锁和panic总结","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clh95h7jb0008gwuvd343ak39","content":"<h1 id=\"channel的死锁和panic总结\"><a href=\"#channel的死锁和panic总结\" class=\"headerlink\" title=\"channel的死锁和panic总结\"></a>channel的死锁和panic总结</h1><h2 id=\"1-channel的容量为0时\"><a href=\"#1-channel的容量为0时\" class=\"headerlink\" title=\"1.channel的容量为0时\"></a>1.channel的容量为0时</h2><h3 id=\"第一种情况\"><a href=\"#第一种情况\" class=\"headerlink\" title=\"第一种情况\"></a>第一种情况</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tc <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n     <span class=\"token comment\">//一直接收不到消息发生阻塞，死锁</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;-</span>c<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"第二种情况\"><a href=\"#第二种情况\" class=\"headerlink\" title=\"第二种情况\"></a>第二种情况</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tc <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">//发送消息的时候无人接收</span>\n\tc <span class=\"token operator\">&lt;-</span> <span class=\"token number\">1</span>\n    <span class=\"token comment\">//接收消息 的时候无人发送 死锁</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;-</span>c<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这是因为channel size为0，之前把1传进c中，但是没有接收方，等到&lt;-c时，已经接收不到数据传入channel，所以死锁</p>\n<h3 id=\"第三种情况\"><a href=\"#第三种情况\" class=\"headerlink\" title=\"第三种情况\"></a>第三种情况</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token comment\">//没有初始化</span>\n\t<span class=\"token keyword\">var</span> ch <span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span>\n\t<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\tch <span class=\"token operator\">&lt;-</span> <span class=\"token number\">1</span>\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;-</span>ch<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"第四种情况\"><a href=\"#第四种情况\" class=\"headerlink\" title=\"第四种情况\"></a>第四种情况</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">\n<span class=\"token keyword\">func</span> <span class=\"token function\">demo5</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> c <span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span> <span class=\"token comment\">//定义类型</span>\n    c <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//初始化</span>\n    <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span>\n            c <span class=\"token operator\">&lt;-</span> i <span class=\"token comment\">//传入channel数据</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span>  v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> c<span class=\"token punctuation\">&#123;</span>\n        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>结果是死锁，应该将数据传进channel后，并没有关闭channel，for循环接收channel一直在监听，死锁</p>\n<p>数据传进channel后，输入方主动关闭channel</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">demo5</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> c <span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span>\n    c <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span>\n            c <span class=\"token operator\">&lt;-</span> i\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token comment\">//或者defer close(c)</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span>  v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> c<span class=\"token punctuation\">&#123;</span>\n        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"当channel-关闭且缓冲区为0时\"><a href=\"#当channel-关闭且缓冲区为0时\" class=\"headerlink\" title=\"当channel 关闭且缓冲区为0时\"></a>当channel 关闭且缓冲区为0时</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">demo6</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    c <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;-</span>c<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//输出为0</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"关闭未初始化的channel，会panic\"><a href=\"#关闭未初始化的channel，会panic\" class=\"headerlink\" title=\"关闭未初始化的channel，会panic\"></a>关闭未初始化的channel，会panic</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">demo6</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> c <span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span>\n    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"特殊情况\"><a href=\"#特殊情况\" class=\"headerlink\" title=\"特殊情况\"></a>特殊情况</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> ch <span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span>\n    <span class=\"token comment\">//func1</span>\n    <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        ch <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        ch <span class=\"token operator\">&lt;-</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">//func2</span>\n    <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>ch <span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">&lt;-</span>ch\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span>\n    c <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Tick</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">*</span> time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> <span class=\"token keyword\">range</span> c <span class=\"token punctuation\">&#123;</span>\n        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#goroutines: %d\\n\"</span><span class=\"token punctuation\">,</span> runtime<span class=\"token punctuation\">.</span><span class=\"token function\">NumGoroutine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//一段时间后输出结果为#goroutines: 2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>结果中的goroutines分别为fun2 和 main函数，因为fun2没有初始化ch 所以会一直阻塞（func1中的初始化只在其所在的闭包函数中有效)</p>\n<h3 id=\"注意点：\"><a href=\"#注意点：\" class=\"headerlink\" title=\"注意点：\"></a>注意点：</h3><ol>\n<li>channel关闭后，再向channel中写入数据会panic</li>\n<li>channel关闭后，再次关闭channel，会panic</li>\n<li>关闭未初始化的channel，会panic</li>\n<li>channel关闭后，可以继续从channel中接收数据</li>\n<li>当channel 关闭且缓冲区为0时，继续从channel接收数据会接收到一个channel定义类型的零值</li>\n<li>channel先进先出</li>\n</ol>\n<p>作者：coldwarm7<br>链接：<a href=\"https://www.jianshu.com/p/f25cdd72efce\">https://www.jianshu.com/p/f25cdd72efce</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>\n","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}},"cover":false,"excerpt":"","more":"<h1 id=\"channel的死锁和panic总结\"><a href=\"#channel的死锁和panic总结\" class=\"headerlink\" title=\"channel的死锁和panic总结\"></a>channel的死锁和panic总结</h1><h2 id=\"1-channel的容量为0时\"><a href=\"#1-channel的容量为0时\" class=\"headerlink\" title=\"1.channel的容量为0时\"></a>1.channel的容量为0时</h2><h3 id=\"第一种情况\"><a href=\"#第一种情况\" class=\"headerlink\" title=\"第一种情况\"></a>第一种情况</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tc <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n     <span class=\"token comment\">//一直接收不到消息发生阻塞，死锁</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;-</span>c<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"第二种情况\"><a href=\"#第二种情况\" class=\"headerlink\" title=\"第二种情况\"></a>第二种情况</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tc <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">//发送消息的时候无人接收</span>\n\tc <span class=\"token operator\">&lt;-</span> <span class=\"token number\">1</span>\n    <span class=\"token comment\">//接收消息 的时候无人发送 死锁</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;-</span>c<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这是因为channel size为0，之前把1传进c中，但是没有接收方，等到&lt;-c时，已经接收不到数据传入channel，所以死锁</p>\n<h3 id=\"第三种情况\"><a href=\"#第三种情况\" class=\"headerlink\" title=\"第三种情况\"></a>第三种情况</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token comment\">//没有初始化</span>\n\t<span class=\"token keyword\">var</span> ch <span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span>\n\t<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\tch <span class=\"token operator\">&lt;-</span> <span class=\"token number\">1</span>\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;-</span>ch<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"第四种情况\"><a href=\"#第四种情况\" class=\"headerlink\" title=\"第四种情况\"></a>第四种情况</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">\n<span class=\"token keyword\">func</span> <span class=\"token function\">demo5</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> c <span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span> <span class=\"token comment\">//定义类型</span>\n    c <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//初始化</span>\n    <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span>\n            c <span class=\"token operator\">&lt;-</span> i <span class=\"token comment\">//传入channel数据</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span>  v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> c<span class=\"token punctuation\">&#123;</span>\n        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>结果是死锁，应该将数据传进channel后，并没有关闭channel，for循环接收channel一直在监听，死锁</p>\n<p>数据传进channel后，输入方主动关闭channel</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">demo5</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> c <span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span>\n    c <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span>\n            c <span class=\"token operator\">&lt;-</span> i\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token comment\">//或者defer close(c)</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span>  v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> c<span class=\"token punctuation\">&#123;</span>\n        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"当channel-关闭且缓冲区为0时\"><a href=\"#当channel-关闭且缓冲区为0时\" class=\"headerlink\" title=\"当channel 关闭且缓冲区为0时\"></a>当channel 关闭且缓冲区为0时</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">demo6</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    c <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;-</span>c<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//输出为0</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"关闭未初始化的channel，会panic\"><a href=\"#关闭未初始化的channel，会panic\" class=\"headerlink\" title=\"关闭未初始化的channel，会panic\"></a>关闭未初始化的channel，会panic</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">demo6</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> c <span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span>\n    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"特殊情况\"><a href=\"#特殊情况\" class=\"headerlink\" title=\"特殊情况\"></a>特殊情况</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> ch <span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span>\n    <span class=\"token comment\">//func1</span>\n    <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        ch <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        ch <span class=\"token operator\">&lt;-</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">//func2</span>\n    <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>ch <span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">&lt;-</span>ch\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span>\n    c <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Tick</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">*</span> time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> <span class=\"token keyword\">range</span> c <span class=\"token punctuation\">&#123;</span>\n        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#goroutines: %d\\n\"</span><span class=\"token punctuation\">,</span> runtime<span class=\"token punctuation\">.</span><span class=\"token function\">NumGoroutine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//一段时间后输出结果为#goroutines: 2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>结果中的goroutines分别为fun2 和 main函数，因为fun2没有初始化ch 所以会一直阻塞（func1中的初始化只在其所在的闭包函数中有效)</p>\n<h3 id=\"注意点：\"><a href=\"#注意点：\" class=\"headerlink\" title=\"注意点：\"></a>注意点：</h3><ol>\n<li>channel关闭后，再向channel中写入数据会panic</li>\n<li>channel关闭后，再次关闭channel，会panic</li>\n<li>关闭未初始化的channel，会panic</li>\n<li>channel关闭后，可以继续从channel中接收数据</li>\n<li>当channel 关闭且缓冲区为0时，继续从channel接收数据会接收到一个channel定义类型的零值</li>\n<li>channel先进先出</li>\n</ol>\n<p>作者：coldwarm7<br>链接：<a href=\"https://www.jianshu.com/p/f25cdd72efce\">https://www.jianshu.com/p/f25cdd72efce</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>\n"},{"title":"clickhouse安装使用笔记","description":"clickhouse 笔记","abbrlink":"bca9151e","date":"2022-12-14T12:17:27.000Z","updated":"2022-12-14T12:17:27.000Z","_content":"# clickhouse\n\n## clickhouse入门\n\nclickhouse 的特点：\n\n-  列式存储\n\n- DBMS的功能\n- 多样化引擎 （merge_tree)\n- 高吞吐写入能力\n- 数据分区与线程级并行\n- 性能-不适合用join查询\n\n##  安装\n\n**ClickHouse安装准备**\n\n- 确定防火墙关闭\n- Centos取消打开文件限制->用户可用文件数、用户可用最大进程数\n- 安装依赖\n- CentOS取消SELINUX\n\n - 查看selinux状态\n\n```shell\ngetenforce\n```\n\n修改/etc/selinux/config中的SELINUX=disabled\n\n```shell\nsudo vim /etc/selinux/config\nSELINUX=disabled\n```\n\n重启生效\n\n如果不想关闭机器，临时生效，如果是关闭状态必须重启机器\n\n```shell\nsetenforce 0\n```\n\n 执行同步操作\n\n```shell\nsudo /home/user/bin/xsync/etc/selinux/config\n```\n\n**下载安装包**\n\n- client  \n- common-static \n- common-static-dbg\n- server \n\n**版本差异**\n\n- 20.5 支持多线程\n- 20.6.3+ explain(执行计划)\n- 20.8 -> 实时同步mysql新引擎\n\n**安装命令**\n\n```shell\nmkdir clickhouse\ncd clickhouse\nsudo rpm -ivh *.rpm\n#输入密码\nenter password for default user:******\n#确认安装状态\nrpm -qa|grep clickhouse\n#显示有四个安装包则成功\nclickhouse-server.noarch\nclick-client.noarch\nclick-common-static-dbg\nclick-common-static\n```\n## clickhouse操作\n\n查看目录\n\n```shell\n#bin目录\ncd /usr/bin/\n#conf目录\ncd /etc/clickhouse-server/\n#lib目录\ncd /var/lib/clickhouse\n#log目录\ncd /var/log/clickhouse\n```\n查看配置\n```shell\n#进入clickhouse文件夹\ncd /etc/click-server/\nls\n#config.xml 通用服务端配置，可以修改数据路径和日志路径\nconfig.d config.xml\n#users.xml 用户一些参数配置\nusers.d users.xml\n \nvim config.xml \n查找listen,去掉注释，不对ip做限制\n<lisetn_host>::</listen_host> \n```\nclickhouse服务相关命令\n```shell\n#启动server\n#linux 查看状态\nsudo systemctl status clickhouse-server\n#clickhouse 自带命令查看状态\nsudo clickhouse status\n#重启\nsudo clickhouse restart\n#clickhouse-client 命令\nclickhouse-client -help\n-m 分号换行\n-h 链接远程\n--query \"加上查询语句\" clickhouse-client --query \"show databases\"\n-p 端口\n```\nclickhouse数据库操作命令\n```shell\n#链接clickhouse\nclickhouse -m\n#查看库\nshow databases;\n# 使用库\nuse system;\n#查看表\nshow tables;\n#查询\nselect * from users;\n```\n\n","source":"_posts/clickhouse安装使用笔记.md","raw":"---\ntitle: clickhouse安装使用笔记\ndescription: clickhouse 笔记\ncategories:\n  - clickhouse\ntags:\n  - clickhouse\nabbrlink: bca9151e\ndate: 2022-12-14 20:17:27\nupdated: 2022-12-14 20:17:27\n---\n# clickhouse\n\n## clickhouse入门\n\nclickhouse 的特点：\n\n-  列式存储\n\n- DBMS的功能\n- 多样化引擎 （merge_tree)\n- 高吞吐写入能力\n- 数据分区与线程级并行\n- 性能-不适合用join查询\n\n##  安装\n\n**ClickHouse安装准备**\n\n- 确定防火墙关闭\n- Centos取消打开文件限制->用户可用文件数、用户可用最大进程数\n- 安装依赖\n- CentOS取消SELINUX\n\n - 查看selinux状态\n\n```shell\ngetenforce\n```\n\n修改/etc/selinux/config中的SELINUX=disabled\n\n```shell\nsudo vim /etc/selinux/config\nSELINUX=disabled\n```\n\n重启生效\n\n如果不想关闭机器，临时生效，如果是关闭状态必须重启机器\n\n```shell\nsetenforce 0\n```\n\n 执行同步操作\n\n```shell\nsudo /home/user/bin/xsync/etc/selinux/config\n```\n\n**下载安装包**\n\n- client  \n- common-static \n- common-static-dbg\n- server \n\n**版本差异**\n\n- 20.5 支持多线程\n- 20.6.3+ explain(执行计划)\n- 20.8 -> 实时同步mysql新引擎\n\n**安装命令**\n\n```shell\nmkdir clickhouse\ncd clickhouse\nsudo rpm -ivh *.rpm\n#输入密码\nenter password for default user:******\n#确认安装状态\nrpm -qa|grep clickhouse\n#显示有四个安装包则成功\nclickhouse-server.noarch\nclick-client.noarch\nclick-common-static-dbg\nclick-common-static\n```\n## clickhouse操作\n\n查看目录\n\n```shell\n#bin目录\ncd /usr/bin/\n#conf目录\ncd /etc/clickhouse-server/\n#lib目录\ncd /var/lib/clickhouse\n#log目录\ncd /var/log/clickhouse\n```\n查看配置\n```shell\n#进入clickhouse文件夹\ncd /etc/click-server/\nls\n#config.xml 通用服务端配置，可以修改数据路径和日志路径\nconfig.d config.xml\n#users.xml 用户一些参数配置\nusers.d users.xml\n \nvim config.xml \n查找listen,去掉注释，不对ip做限制\n<lisetn_host>::</listen_host> \n```\nclickhouse服务相关命令\n```shell\n#启动server\n#linux 查看状态\nsudo systemctl status clickhouse-server\n#clickhouse 自带命令查看状态\nsudo clickhouse status\n#重启\nsudo clickhouse restart\n#clickhouse-client 命令\nclickhouse-client -help\n-m 分号换行\n-h 链接远程\n--query \"加上查询语句\" clickhouse-client --query \"show databases\"\n-p 端口\n```\nclickhouse数据库操作命令\n```shell\n#链接clickhouse\nclickhouse -m\n#查看库\nshow databases;\n# 使用库\nuse system;\n#查看表\nshow tables;\n#查询\nselect * from users;\n```\n\n","slug":"clickhouse安装使用笔记","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clh95h7jc0009gwuv80nh9sj4","content":"<h1 id=\"clickhouse\"><a href=\"#clickhouse\" class=\"headerlink\" title=\"clickhouse\"></a>clickhouse</h1><h2 id=\"clickhouse入门\"><a href=\"#clickhouse入门\" class=\"headerlink\" title=\"clickhouse入门\"></a>clickhouse入门</h2><p>clickhouse 的特点：</p>\n<ul>\n<li><p>列式存储</p>\n</li>\n<li><p>DBMS的功能</p>\n</li>\n<li><p>多样化引擎 （merge_tree)</p>\n</li>\n<li><p>高吞吐写入能力</p>\n</li>\n<li><p>数据分区与线程级并行</p>\n</li>\n<li><p>性能-不适合用join查询</p>\n</li>\n</ul>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p><strong>ClickHouse安装准备</strong></p>\n<ul>\n<li><p>确定防火墙关闭</p>\n</li>\n<li><p>Centos取消打开文件限制-&gt;用户可用文件数、用户可用最大进程数</p>\n</li>\n<li><p>安装依赖</p>\n</li>\n<li><p>CentOS取消SELINUX</p>\n</li>\n<li><p>查看selinux状态</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">getenforce<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>修改&#x2F;etc&#x2F;selinux&#x2F;config中的SELINUX&#x3D;disabled</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">vim</span> /etc/selinux/config\n<span class=\"token assign-left variable\">SELINUX</span><span class=\"token operator\">=</span>disabled<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>重启生效</p>\n<p>如果不想关闭机器，临时生效，如果是关闭状态必须重启机器</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">setenforce <span class=\"token number\">0</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p> 执行同步操作</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> /home/user/bin/xsync/etc/selinux/config<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>下载安装包</strong></p>\n<ul>\n<li>client  </li>\n<li>common-static </li>\n<li>common-static-dbg</li>\n<li>server</li>\n</ul>\n<p><strong>版本差异</strong></p>\n<ul>\n<li>20.5 支持多线程</li>\n<li>20.6.3+ explain(执行计划)</li>\n<li>20.8 -&gt; 实时同步mysql新引擎</li>\n</ul>\n<p><strong>安装命令</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> clickhouse\n<span class=\"token builtin class-name\">cd</span> clickhouse\n<span class=\"token function\">sudo</span> <span class=\"token function\">rpm</span> -ivh *.rpm\n<span class=\"token comment\">#输入密码</span>\nenter password <span class=\"token keyword\">for</span> default user:******\n<span class=\"token comment\">#确认安装状态</span>\n<span class=\"token function\">rpm</span> -qa<span class=\"token operator\">|</span><span class=\"token function\">grep</span> clickhouse\n<span class=\"token comment\">#显示有四个安装包则成功</span>\nclickhouse-server.noarch\nclick-client.noarch\nclick-common-static-dbg\nclick-common-static<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"clickhouse操作\"><a href=\"#clickhouse操作\" class=\"headerlink\" title=\"clickhouse操作\"></a>clickhouse操作</h2><p>查看目录</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#bin目录</span>\n<span class=\"token builtin class-name\">cd</span> /usr/bin/\n<span class=\"token comment\">#conf目录</span>\n<span class=\"token builtin class-name\">cd</span> /etc/clickhouse-server/\n<span class=\"token comment\">#lib目录</span>\n<span class=\"token builtin class-name\">cd</span> /var/lib/clickhouse\n<span class=\"token comment\">#log目录</span>\n<span class=\"token builtin class-name\">cd</span> /var/log/clickhouse<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>查看配置</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#进入clickhouse文件夹</span>\n<span class=\"token builtin class-name\">cd</span> /etc/click-server/\n<span class=\"token function\">ls</span>\n<span class=\"token comment\">#config.xml 通用服务端配置，可以修改数据路径和日志路径</span>\nconfig.d config.xml\n<span class=\"token comment\">#users.xml 用户一些参数配置</span>\nusers.d users.xml\n \n<span class=\"token function\">vim</span> config.xml \n查找listen,去掉注释，不对ip做限制\n<span class=\"token operator\">&lt;</span>lisetn_host<span class=\"token operator\">></span>::<span class=\"token operator\">&lt;</span>/listen_host<span class=\"token operator\">></span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>clickhouse服务相关命令</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#启动server</span>\n<span class=\"token comment\">#linux 查看状态</span>\n<span class=\"token function\">sudo</span> systemctl status clickhouse-server\n<span class=\"token comment\">#clickhouse 自带命令查看状态</span>\n<span class=\"token function\">sudo</span> clickhouse status\n<span class=\"token comment\">#重启</span>\n<span class=\"token function\">sudo</span> clickhouse restart\n<span class=\"token comment\">#clickhouse-client 命令</span>\nclickhouse-client -help\n-m 分号换行\n-h 链接远程\n--query <span class=\"token string\">\"加上查询语句\"</span> clickhouse-client --query <span class=\"token string\">\"show databases\"</span>\n-p 端口<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>clickhouse数据库操作命令</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#链接clickhouse</span>\nclickhouse -m\n<span class=\"token comment\">#查看库</span>\nshow databases<span class=\"token punctuation\">;</span>\n<span class=\"token comment\"># 使用库</span>\nuse system<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">#查看表</span>\nshow tables<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">#查询</span>\n<span class=\"token keyword\">select</span> * from <span class=\"token function\">users</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}},"cover":false,"excerpt":"","more":"<h1 id=\"clickhouse\"><a href=\"#clickhouse\" class=\"headerlink\" title=\"clickhouse\"></a>clickhouse</h1><h2 id=\"clickhouse入门\"><a href=\"#clickhouse入门\" class=\"headerlink\" title=\"clickhouse入门\"></a>clickhouse入门</h2><p>clickhouse 的特点：</p>\n<ul>\n<li><p>列式存储</p>\n</li>\n<li><p>DBMS的功能</p>\n</li>\n<li><p>多样化引擎 （merge_tree)</p>\n</li>\n<li><p>高吞吐写入能力</p>\n</li>\n<li><p>数据分区与线程级并行</p>\n</li>\n<li><p>性能-不适合用join查询</p>\n</li>\n</ul>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p><strong>ClickHouse安装准备</strong></p>\n<ul>\n<li><p>确定防火墙关闭</p>\n</li>\n<li><p>Centos取消打开文件限制-&gt;用户可用文件数、用户可用最大进程数</p>\n</li>\n<li><p>安装依赖</p>\n</li>\n<li><p>CentOS取消SELINUX</p>\n</li>\n<li><p>查看selinux状态</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">getenforce<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>修改&#x2F;etc&#x2F;selinux&#x2F;config中的SELINUX&#x3D;disabled</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">vim</span> /etc/selinux/config\n<span class=\"token assign-left variable\">SELINUX</span><span class=\"token operator\">=</span>disabled<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>重启生效</p>\n<p>如果不想关闭机器，临时生效，如果是关闭状态必须重启机器</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">setenforce <span class=\"token number\">0</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p> 执行同步操作</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> /home/user/bin/xsync/etc/selinux/config<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>下载安装包</strong></p>\n<ul>\n<li>client  </li>\n<li>common-static </li>\n<li>common-static-dbg</li>\n<li>server</li>\n</ul>\n<p><strong>版本差异</strong></p>\n<ul>\n<li>20.5 支持多线程</li>\n<li>20.6.3+ explain(执行计划)</li>\n<li>20.8 -&gt; 实时同步mysql新引擎</li>\n</ul>\n<p><strong>安装命令</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> clickhouse\n<span class=\"token builtin class-name\">cd</span> clickhouse\n<span class=\"token function\">sudo</span> <span class=\"token function\">rpm</span> -ivh *.rpm\n<span class=\"token comment\">#输入密码</span>\nenter password <span class=\"token keyword\">for</span> default user:******\n<span class=\"token comment\">#确认安装状态</span>\n<span class=\"token function\">rpm</span> -qa<span class=\"token operator\">|</span><span class=\"token function\">grep</span> clickhouse\n<span class=\"token comment\">#显示有四个安装包则成功</span>\nclickhouse-server.noarch\nclick-client.noarch\nclick-common-static-dbg\nclick-common-static<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"clickhouse操作\"><a href=\"#clickhouse操作\" class=\"headerlink\" title=\"clickhouse操作\"></a>clickhouse操作</h2><p>查看目录</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#bin目录</span>\n<span class=\"token builtin class-name\">cd</span> /usr/bin/\n<span class=\"token comment\">#conf目录</span>\n<span class=\"token builtin class-name\">cd</span> /etc/clickhouse-server/\n<span class=\"token comment\">#lib目录</span>\n<span class=\"token builtin class-name\">cd</span> /var/lib/clickhouse\n<span class=\"token comment\">#log目录</span>\n<span class=\"token builtin class-name\">cd</span> /var/log/clickhouse<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>查看配置</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#进入clickhouse文件夹</span>\n<span class=\"token builtin class-name\">cd</span> /etc/click-server/\n<span class=\"token function\">ls</span>\n<span class=\"token comment\">#config.xml 通用服务端配置，可以修改数据路径和日志路径</span>\nconfig.d config.xml\n<span class=\"token comment\">#users.xml 用户一些参数配置</span>\nusers.d users.xml\n \n<span class=\"token function\">vim</span> config.xml \n查找listen,去掉注释，不对ip做限制\n<span class=\"token operator\">&lt;</span>lisetn_host<span class=\"token operator\">></span>::<span class=\"token operator\">&lt;</span>/listen_host<span class=\"token operator\">></span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>clickhouse服务相关命令</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#启动server</span>\n<span class=\"token comment\">#linux 查看状态</span>\n<span class=\"token function\">sudo</span> systemctl status clickhouse-server\n<span class=\"token comment\">#clickhouse 自带命令查看状态</span>\n<span class=\"token function\">sudo</span> clickhouse status\n<span class=\"token comment\">#重启</span>\n<span class=\"token function\">sudo</span> clickhouse restart\n<span class=\"token comment\">#clickhouse-client 命令</span>\nclickhouse-client -help\n-m 分号换行\n-h 链接远程\n--query <span class=\"token string\">\"加上查询语句\"</span> clickhouse-client --query <span class=\"token string\">\"show databases\"</span>\n-p 端口<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>clickhouse数据库操作命令</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#链接clickhouse</span>\nclickhouse -m\n<span class=\"token comment\">#查看库</span>\nshow databases<span class=\"token punctuation\">;</span>\n<span class=\"token comment\"># 使用库</span>\nuse system<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">#查看表</span>\nshow tables<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">#查询</span>\n<span class=\"token keyword\">select</span> * from <span class=\"token function\">users</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n"},{"abbrlink":"clickhouse常用高阶函数操作","date":"2023-04-23T17:37:25.000Z","title":"clickhouse常用高阶函数操作","updated":"2023-04-23T17:37:26.000Z","_content":"原文地址[点击跳转](https://www.cnblogs.com/weijiqian/p/14852999.html)\n","source":"_posts/clickhouse常用高阶函数操作.md","raw":"---\nabbrlink: clickhouse常用高阶函数操作\ncategories:\n- - clickhouse\ndate: '2023-04-24 01:37:25'\ntags:\n- clickhouse\ntitle: clickhouse常用高阶函数操作\nupdated: Sun, 23 Apr 2023 17:37:26 GMT\n---\n原文地址[点击跳转](https://www.cnblogs.com/weijiqian/p/14852999.html)\n","slug":"clickhouse常用高阶函数操作","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clh95h7je000cgwuvg3e9h9dr","content":"<p>原文地址<a href=\"https://www.cnblogs.com/weijiqian/p/14852999.html\">点击跳转</a></p>\n","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}},"cover":false,"excerpt":"","more":"<p>原文地址<a href=\"https://www.cnblogs.com/weijiqian/p/14852999.html\">点击跳转</a></p>\n"},{"abbrlink":"6fa57dd2","date":"2023-04-23T16:43:07.000Z","title":"clickhouse数组函数操作","updated":"2023-04-23T17:38:53.000Z","_content":"原文地址：[点击跳转](https://www.cnblogs.com/traditional/p/15226704.html)\n","source":"_posts/clickhouse数组函数操作.md","raw":"---\nabbrlink: 6fa57dd2\ncategories:\n  - - clickhouse\ndate: '2023-04-24 00:43:07'\ntags:\n  - clickhouse\ntitle: clickhouse数组函数操作\nupdated: 'Sun, 23 Apr 2023 17:38:53 GMT'\n---\n原文地址：[点击跳转](https://www.cnblogs.com/traditional/p/15226704.html)\n","slug":"clickhouse数组函数操作","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clh95h7jf000dgwuv6dew24x0","content":"<p>原文地址：<a href=\"https://www.cnblogs.com/traditional/p/15226704.html\">点击跳转</a></p>\n","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}},"cover":false,"excerpt":"","more":"<p>原文地址：<a href=\"https://www.cnblogs.com/traditional/p/15226704.html\">点击跳转</a></p>\n"},{"title":"docker-compose 执行模板文件构建镜像","url":"/archives/docker-composetemplate","abbrlink":"88a0a7e9","date":"2022-02-15T07:56:01.000Z","updated":"2022-02-15T07:56:01.000Z","_content":"\n# docker-compose\n\n执行模板文件构建镜像\n\n```docker\ndocker-compose -f docker-compose.build.yml build --no-cache\n```\n","source":"_posts/docker-compose执行模板文件构建镜像.md","raw":"---\ntitle: docker-compose 执行模板文件构建镜像\nurl: /archives/docker-composetemplate\ncategories:\n  - docker\ntags:\n  - docker-compose\nabbrlink: 88a0a7e9\ndate: 2022-02-15 15:56:01\nupdated: 2022-02-15 15:56:01\n---\n\n# docker-compose\n\n执行模板文件构建镜像\n\n```docker\ndocker-compose -f docker-compose.build.yml build --no-cache\n```\n","slug":"docker-compose执行模板文件构建镜像","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clh95h7jh000hgwuv2qtjhdr8","content":"<h1 id=\"docker-compose\"><a href=\"#docker-compose\" class=\"headerlink\" title=\"docker-compose\"></a>docker-compose</h1><p>执行模板文件构建镜像</p>\n<pre class=\"line-numbers language-docker\" data-language=\"docker\"><code class=\"language-docker\">docker-compose -f docker-compose.build.yml build --no-cache<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}},"cover":false,"excerpt":"","more":"<h1 id=\"docker-compose\"><a href=\"#docker-compose\" class=\"headerlink\" title=\"docker-compose\"></a>docker-compose</h1><p>执行模板文件构建镜像</p>\n<pre class=\"line-numbers language-docker\" data-language=\"docker\"><code class=\"language-docker\">docker-compose -f docker-compose.build.yml build --no-cache<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n"},{"title":"docker 保存镜像到本地和加载镜像","url":"/archives/docker保存镜像到本地和加载镜像","description":"docker保存镜像到本地以及加载镜像","abbrlink":"a1015970","date":"2022-03-30T06:20:55.000Z","updated":"2022-03-30T06:32:57.000Z","_content":"\n# docker 保存镜像到本地和加载镜像\n\n## 导出docker镜像，到linux本地\n\n```bash   \ndocker save -o   指定地址和文件名   镜像名 \n```\n\n- 例子：  \n把名字为test，版本为4.0的docker镜像，保存到/data/export目录下，保存名字和格式为test.tar\n```bash \ndocker save -o /data/export/test.tar test:4.0\n```\n\n## 加载镜像文件\n\n```bash\ndocker load < 文件名\n```\n\n","source":"_posts/docker保存镜像到本地和加载镜像.md","raw":"---\ntitle: docker 保存镜像到本地和加载镜像\nurl: /archives/docker保存镜像到本地和加载镜像\ndescription: docker保存镜像到本地以及加载镜像\ncategories:\n  - docker\ntags:\n  - docker\nabbrlink: a1015970\ndate: 2022-03-30 14:20:55\nupdated: 2022-03-30 14:32:57\n---\n\n# docker 保存镜像到本地和加载镜像\n\n## 导出docker镜像，到linux本地\n\n```bash   \ndocker save -o   指定地址和文件名   镜像名 \n```\n\n- 例子：  \n把名字为test，版本为4.0的docker镜像，保存到/data/export目录下，保存名字和格式为test.tar\n```bash \ndocker save -o /data/export/test.tar test:4.0\n```\n\n## 加载镜像文件\n\n```bash\ndocker load < 文件名\n```\n\n","slug":"docker保存镜像到本地和加载镜像","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clh95h7ji000jgwuv170o0hiy","content":"<h1 id=\"docker-保存镜像到本地和加载镜像\"><a href=\"#docker-保存镜像到本地和加载镜像\" class=\"headerlink\" title=\"docker 保存镜像到本地和加载镜像\"></a>docker 保存镜像到本地和加载镜像</h1><h2 id=\"导出docker镜像，到linux本地\"><a href=\"#导出docker镜像，到linux本地\" class=\"headerlink\" title=\"导出docker镜像，到linux本地\"></a>导出docker镜像，到linux本地</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> save -o   指定地址和文件名   镜像名 <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li>例子：<br>把名字为test，版本为4.0的docker镜像，保存到&#x2F;data&#x2F;export目录下，保存名字和格式为test.tar<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> save -o /data/export/test.tar test:4.0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"加载镜像文件\"><a href=\"#加载镜像文件\" class=\"headerlink\" title=\"加载镜像文件\"></a>加载镜像文件</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> load <span class=\"token operator\">&lt;</span> 文件名<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}},"cover":false,"excerpt":"","more":"<h1 id=\"docker-保存镜像到本地和加载镜像\"><a href=\"#docker-保存镜像到本地和加载镜像\" class=\"headerlink\" title=\"docker 保存镜像到本地和加载镜像\"></a>docker 保存镜像到本地和加载镜像</h1><h2 id=\"导出docker镜像，到linux本地\"><a href=\"#导出docker镜像，到linux本地\" class=\"headerlink\" title=\"导出docker镜像，到linux本地\"></a>导出docker镜像，到linux本地</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> save -o   指定地址和文件名   镜像名 <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li>例子：<br>把名字为test，版本为4.0的docker镜像，保存到&#x2F;data&#x2F;export目录下，保存名字和格式为test.tar<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> save -o /data/export/test.tar test:4.0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"加载镜像文件\"><a href=\"#加载镜像文件\" class=\"headerlink\" title=\"加载镜像文件\"></a>加载镜像文件</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> load <span class=\"token operator\">&lt;</span> 文件名<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n"},{"title":"docker 拉取指定平台架构的镜像","url":"/archives/dockerla-qu-zhi-ding-ping-tai-de-jing-xiang","abbrlink":"bd1646ec","date":"2022-02-16T07:34:57.000Z","updated":"2022-03-31T12:07:53.000Z","_content":"\n# docker 拉取指定平台架构的镜像\n有时候我们需要拉取指定平台架构的镜像但是我们又没有对应架构的服务器和硬件的时候：\n比如我们需要拉取一个arm64的node镜像，首先进入docker hub 搜索node镜像\n![image.png](/upload/2022/03/image-f8364fe234a64afe9a6c1d20ee65a75e.png)\n复制digest\n![image.png](/upload/2022/03/image-38e509972a8f4187982b3a5922ff0072.png)\n拉取对应版本和对应架构的镜像\n```bash\ndocker pull nginx:latest@sha256:3df2ee4220cd7ce126d98cad124c93ed81ea58ee050400ec3c3bca3b553d5448\n```\n在DOCKERFILE文件里面\n```dockerfile\nFROM nginx:latest@sha256:3df2ee4220cd7ce126d98cad124c93ed81ea58ee050400ec3c3bca3b553d5448\n```\n成功拉取","source":"_posts/docker拉取指定平台架构的镜像.md","raw":"---\ntitle: docker 拉取指定平台架构的镜像\nurl: /archives/dockerla-qu-zhi-ding-ping-tai-de-jing-xiang\ncategories:\n  - docker\ntags:\n  - docker\nabbrlink: bd1646ec\ndate: 2022-02-16 15:34:57\nupdated: 2022-03-31 20:07:53\n---\n\n# docker 拉取指定平台架构的镜像\n有时候我们需要拉取指定平台架构的镜像但是我们又没有对应架构的服务器和硬件的时候：\n比如我们需要拉取一个arm64的node镜像，首先进入docker hub 搜索node镜像\n![image.png](/upload/2022/03/image-f8364fe234a64afe9a6c1d20ee65a75e.png)\n复制digest\n![image.png](/upload/2022/03/image-38e509972a8f4187982b3a5922ff0072.png)\n拉取对应版本和对应架构的镜像\n```bash\ndocker pull nginx:latest@sha256:3df2ee4220cd7ce126d98cad124c93ed81ea58ee050400ec3c3bca3b553d5448\n```\n在DOCKERFILE文件里面\n```dockerfile\nFROM nginx:latest@sha256:3df2ee4220cd7ce126d98cad124c93ed81ea58ee050400ec3c3bca3b553d5448\n```\n成功拉取","slug":"docker拉取指定平台架构的镜像","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clh95h7jk000ogwuvcvb058r4","content":"<h1 id=\"docker-拉取指定平台架构的镜像\"><a href=\"#docker-拉取指定平台架构的镜像\" class=\"headerlink\" title=\"docker 拉取指定平台架构的镜像\"></a>docker 拉取指定平台架构的镜像</h1><p>有时候我们需要拉取指定平台架构的镜像但是我们又没有对应架构的服务器和硬件的时候：<br>比如我们需要拉取一个arm64的node镜像，首先进入docker hub 搜索node镜像<br><img src=\"/upload/2022/03/image-f8364fe234a64afe9a6c1d20ee65a75e.png\" alt=\"image.png\"><br>复制digest<br><img src=\"/upload/2022/03/image-38e509972a8f4187982b3a5922ff0072.png\" alt=\"image.png\"><br>拉取对应版本和对应架构的镜像</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> pull nginx:latest@sha256:3df2ee4220cd7ce126d98cad124c93ed81ea58ee050400ec3c3bca3b553d5448<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>在DOCKERFILE文件里面</p>\n<pre class=\"line-numbers language-docker\" data-language=\"docker\"><code class=\"language-docker\"><span class=\"token instruction\"><span class=\"token keyword\">FROM</span> nginx:latest@sha256:3df2ee4220cd7ce126d98cad124c93ed81ea58ee050400ec3c3bca3b553d5448</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>成功拉取</p>\n","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}},"cover":false,"excerpt":"","more":"<h1 id=\"docker-拉取指定平台架构的镜像\"><a href=\"#docker-拉取指定平台架构的镜像\" class=\"headerlink\" title=\"docker 拉取指定平台架构的镜像\"></a>docker 拉取指定平台架构的镜像</h1><p>有时候我们需要拉取指定平台架构的镜像但是我们又没有对应架构的服务器和硬件的时候：<br>比如我们需要拉取一个arm64的node镜像，首先进入docker hub 搜索node镜像<br><img src=\"/upload/2022/03/image-f8364fe234a64afe9a6c1d20ee65a75e.png\" alt=\"image.png\"><br>复制digest<br><img src=\"/upload/2022/03/image-38e509972a8f4187982b3a5922ff0072.png\" alt=\"image.png\"><br>拉取对应版本和对应架构的镜像</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> pull nginx:latest@sha256:3df2ee4220cd7ce126d98cad124c93ed81ea58ee050400ec3c3bca3b553d5448<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>在DOCKERFILE文件里面</p>\n<pre class=\"line-numbers language-docker\" data-language=\"docker\"><code class=\"language-docker\"><span class=\"token instruction\"><span class=\"token keyword\">FROM</span> nginx:latest@sha256:3df2ee4220cd7ce126d98cad124c93ed81ea58ee050400ec3c3bca3b553d5448</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>成功拉取</p>\n"},{"title":"git add 暂存","url":"/archives/gitaddzan-cun","abbrlink":"e204e3f8","date":"2022-02-16T07:50:57.000Z","updated":"2022-02-16T07:50:57.000Z","_content":"\n# add命令\n\n## git add 命令可将该文件添加到暂存区。\n\n添加一个或多个文件到暂存区：\n\n```bash\ngit add [fle1] [file2] ...\n```\n\n添加指定目录到暂存区，包括子目录：\n\n```bash\ngit add [dir]\n```\n\n添加当前目录下的所有文件到暂存区：\n\n```bash\ngit add .\n```","source":"_posts/git add 暂存.md","raw":"---\ntitle: git add 暂存\nurl: /archives/gitaddzan-cun\ncategories:\n  - git\ntags:\n  - git\n  - add\nabbrlink: e204e3f8\ndate: 2022-02-16 15:50:57\nupdated: 2022-02-16 15:50:57\n---\n\n# add命令\n\n## git add 命令可将该文件添加到暂存区。\n\n添加一个或多个文件到暂存区：\n\n```bash\ngit add [fle1] [file2] ...\n```\n\n添加指定目录到暂存区，包括子目录：\n\n```bash\ngit add [dir]\n```\n\n添加当前目录下的所有文件到暂存区：\n\n```bash\ngit add .\n```","slug":"git add 暂存","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clh95h7jl000qgwuv7vph1hns","content":"<h1 id=\"add命令\"><a href=\"#add命令\" class=\"headerlink\" title=\"add命令\"></a>add命令</h1><h2 id=\"git-add-命令可将该文件添加到暂存区。\"><a href=\"#git-add-命令可将该文件添加到暂存区。\" class=\"headerlink\" title=\"git add 命令可将该文件添加到暂存区。\"></a>git add 命令可将该文件添加到暂存区。</h2><p>添加一个或多个文件到暂存区：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token punctuation\">[</span>fle1<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>file2<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">..</span>.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>添加指定目录到暂存区，包括子目录：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token punctuation\">[</span>dir<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>添加当前目录下的所有文件到暂存区：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}},"cover":false,"excerpt":"","more":"<h1 id=\"add命令\"><a href=\"#add命令\" class=\"headerlink\" title=\"add命令\"></a>add命令</h1><h2 id=\"git-add-命令可将该文件添加到暂存区。\"><a href=\"#git-add-命令可将该文件添加到暂存区。\" class=\"headerlink\" title=\"git add 命令可将该文件添加到暂存区。\"></a>git add 命令可将该文件添加到暂存区。</h2><p>添加一个或多个文件到暂存区：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token punctuation\">[</span>fle1<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>file2<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">..</span>.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>添加指定目录到暂存区，包括子目录：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token punctuation\">[</span>dir<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>添加当前目录下的所有文件到暂存区：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>"},{"title":"git 标签","url":"/archives/gitbiao-qian","abbrlink":"9cbf95f7","date":"2022-02-16T07:43:25.000Z","updated":"2022-02-16T07:44:17.000Z","_content":"\n# git tag\n\n## 打标签\n\n```bash\ngit tag -a v1.2.0 -m \"new version\"\n```\n\n## 显示标签以及备注\n\n```bash\ngit tag -n\n```\n\n## 实现标签以及备注，按照打标签的时间排序\n\n```bash\ngit tag -n --sort=taggerdate\n```\n\n--sort=key\n\n关于key的值可以参考 [https://git-scm.com/docs/git-for-each-ref](https://git-scm.com/docs/git-for-each-ref)\n\n## 同时有时间、tag、备注使用以下命令\n\n```bash\ngit for-each-ref --sort=taggerdate --format '%(refname:short) %(taggerdate:short) %(subject)'\n```\n\n## 对某个版本进行补打标签，commitId 只要填入前7位即可\n\n```bash\ngit tag -a v1.2 423445a\n```\n\n## 删除标签，并不会删除版本，只是删除标签\n\n```bash\ngit tag -d v1.2\n```\n\n## 推送标签\n\n```bash\ngit push origin master --tags\n```","source":"_posts/git tag 标签.md","raw":"---\ntitle: git 标签\nurl: /archives/gitbiao-qian\ncategories:\n  - git\ntags:\n  - git\n  - tag\n  - 标签\nabbrlink: 9cbf95f7\ndate: 2022-02-16 15:43:25\nupdated: 2022-02-16 15:44:17\n---\n\n# git tag\n\n## 打标签\n\n```bash\ngit tag -a v1.2.0 -m \"new version\"\n```\n\n## 显示标签以及备注\n\n```bash\ngit tag -n\n```\n\n## 实现标签以及备注，按照打标签的时间排序\n\n```bash\ngit tag -n --sort=taggerdate\n```\n\n--sort=key\n\n关于key的值可以参考 [https://git-scm.com/docs/git-for-each-ref](https://git-scm.com/docs/git-for-each-ref)\n\n## 同时有时间、tag、备注使用以下命令\n\n```bash\ngit for-each-ref --sort=taggerdate --format '%(refname:short) %(taggerdate:short) %(subject)'\n```\n\n## 对某个版本进行补打标签，commitId 只要填入前7位即可\n\n```bash\ngit tag -a v1.2 423445a\n```\n\n## 删除标签，并不会删除版本，只是删除标签\n\n```bash\ngit tag -d v1.2\n```\n\n## 推送标签\n\n```bash\ngit push origin master --tags\n```","slug":"git tag 标签","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clh95h7jo000ugwuvhf9w6qij","content":"<h1 id=\"git-tag\"><a href=\"#git-tag\" class=\"headerlink\" title=\"git tag\"></a>git tag</h1><h2 id=\"打标签\"><a href=\"#打标签\" class=\"headerlink\" title=\"打标签\"></a>打标签</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> tag -a v1.2.0 -m <span class=\"token string\">\"new version\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"显示标签以及备注\"><a href=\"#显示标签以及备注\" class=\"headerlink\" title=\"显示标签以及备注\"></a>显示标签以及备注</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> tag -n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"实现标签以及备注，按照打标签的时间排序\"><a href=\"#实现标签以及备注，按照打标签的时间排序\" class=\"headerlink\" title=\"实现标签以及备注，按照打标签的时间排序\"></a>实现标签以及备注，按照打标签的时间排序</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> tag -n --sort<span class=\"token operator\">=</span>taggerdate<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>–sort&#x3D;key</p>\n<p>关于key的值可以参考 <a href=\"https://git-scm.com/docs/git-for-each-ref\">https://git-scm.com/docs/git-for-each-ref</a></p>\n<h2 id=\"同时有时间、tag、备注使用以下命令\"><a href=\"#同时有时间、tag、备注使用以下命令\" class=\"headerlink\" title=\"同时有时间、tag、备注使用以下命令\"></a>同时有时间、tag、备注使用以下命令</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> for-each-ref --sort<span class=\"token operator\">=</span>taggerdate --format <span class=\"token string\">'%(refname:short) %(taggerdate:short) %(subject)'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"对某个版本进行补打标签，commitId-只要填入前7位即可\"><a href=\"#对某个版本进行补打标签，commitId-只要填入前7位即可\" class=\"headerlink\" title=\"对某个版本进行补打标签，commitId 只要填入前7位即可\"></a>对某个版本进行补打标签，commitId 只要填入前7位即可</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> tag -a v1.2 423445a<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"删除标签，并不会删除版本，只是删除标签\"><a href=\"#删除标签，并不会删除版本，只是删除标签\" class=\"headerlink\" title=\"删除标签，并不会删除版本，只是删除标签\"></a>删除标签，并不会删除版本，只是删除标签</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> tag -d v1.2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"推送标签\"><a href=\"#推送标签\" class=\"headerlink\" title=\"推送标签\"></a>推送标签</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> push origin master --tags<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}},"cover":false,"excerpt":"","more":"<h1 id=\"git-tag\"><a href=\"#git-tag\" class=\"headerlink\" title=\"git tag\"></a>git tag</h1><h2 id=\"打标签\"><a href=\"#打标签\" class=\"headerlink\" title=\"打标签\"></a>打标签</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> tag -a v1.2.0 -m <span class=\"token string\">\"new version\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"显示标签以及备注\"><a href=\"#显示标签以及备注\" class=\"headerlink\" title=\"显示标签以及备注\"></a>显示标签以及备注</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> tag -n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"实现标签以及备注，按照打标签的时间排序\"><a href=\"#实现标签以及备注，按照打标签的时间排序\" class=\"headerlink\" title=\"实现标签以及备注，按照打标签的时间排序\"></a>实现标签以及备注，按照打标签的时间排序</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> tag -n --sort<span class=\"token operator\">=</span>taggerdate<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>–sort&#x3D;key</p>\n<p>关于key的值可以参考 <a href=\"https://git-scm.com/docs/git-for-each-ref\">https://git-scm.com/docs/git-for-each-ref</a></p>\n<h2 id=\"同时有时间、tag、备注使用以下命令\"><a href=\"#同时有时间、tag、备注使用以下命令\" class=\"headerlink\" title=\"同时有时间、tag、备注使用以下命令\"></a>同时有时间、tag、备注使用以下命令</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> for-each-ref --sort<span class=\"token operator\">=</span>taggerdate --format <span class=\"token string\">'%(refname:short) %(taggerdate:short) %(subject)'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"对某个版本进行补打标签，commitId-只要填入前7位即可\"><a href=\"#对某个版本进行补打标签，commitId-只要填入前7位即可\" class=\"headerlink\" title=\"对某个版本进行补打标签，commitId 只要填入前7位即可\"></a>对某个版本进行补打标签，commitId 只要填入前7位即可</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> tag -a v1.2 423445a<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"删除标签，并不会删除版本，只是删除标签\"><a href=\"#删除标签，并不会删除版本，只是删除标签\" class=\"headerlink\" title=\"删除标签，并不会删除版本，只是删除标签\"></a>删除标签，并不会删除版本，只是删除标签</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> tag -d v1.2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"推送标签\"><a href=\"#推送标签\" class=\"headerlink\" title=\"推送标签\"></a>推送标签</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> push origin master --tags<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>"},{"title":"git 报错refusing to merge unrelated histories，强制提交","url":"/archives/gitbao-cuo-refusingtomergeunrelatedhistories-qiang-zhi-ti-jiao","abbrlink":"a5058aec","date":"2022-02-16T07:37:51.000Z","updated":"2022-02-16T07:37:51.000Z","_content":"\n拉取代码或者推送代码报错\n\n```bash\nrefusing to merge unrelated histories\n```\n\n解决：  \n方法一: 允许不相关历史提交，并强制合并\n\n```bash\ngit pull origin master --allow-unrelated-histories\n```\n\n方法二： 强制提交\n\n```bash\ngit push --force origin master\n```","source":"_posts/git 报错refusing to merge unrelated histories，强制提交.md","raw":"---\ntitle: git 报错refusing to merge unrelated histories，强制提交\nurl: /archives/gitbao-cuo-refusingtomergeunrelatedhistories-qiang-zhi-ti-jiao\ncategories:\n  - git\ntags:\n  - git\nabbrlink: a5058aec\ndate: 2022-02-16 15:37:51\nupdated: 2022-02-16 15:37:51\n---\n\n拉取代码或者推送代码报错\n\n```bash\nrefusing to merge unrelated histories\n```\n\n解决：  \n方法一: 允许不相关历史提交，并强制合并\n\n```bash\ngit pull origin master --allow-unrelated-histories\n```\n\n方法二： 强制提交\n\n```bash\ngit push --force origin master\n```","slug":"git 报错refusing to merge unrelated histories，强制提交","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clh95h7jp000vgwuv8d26gzao","content":"<p>拉取代码或者推送代码报错</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">refusing to merge unrelated histories<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>解决：<br>方法一: 允许不相关历史提交，并强制合并</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> pull origin master --allow-unrelated-histories<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>方法二： 强制提交</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> push --force origin master<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}},"cover":false,"excerpt":"","more":"<p>拉取代码或者推送代码报错</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">refusing to merge unrelated histories<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>解决：<br>方法一: 允许不相关历史提交，并强制合并</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> pull origin master --allow-unrelated-histories<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>方法二： 强制提交</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> push --force origin master<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>"},{"title":"git 文件状态 、status","url":"/archives/gitwen-jian-zhuang-tai-status","abbrlink":"56d54cc1","date":"2022-02-16T07:44:04.000Z","updated":"2022-02-16T07:51:13.000Z","_content":"\n# git status命令\n\n查看文件更改状态\n\n```bash\ngit status\n```\n\n带文件状态码查看\n\n```bash\ngit status -s\n```\n\n- **A**: 你本地新增的文件（服务器上没有）.\n  \n- **C**: 文件的一个新拷贝.\n  \n- **D**: 你本地删除的文件（服务器上还在）.\n  \n- **M**: 文件的内容或者mode被修改了.\n  \n- **R**: 文件名被修改了。\n  \n- **T**: 文件的类型被修改了。\n  \n- **U**: 文件没有被合并(你需要完成合并才能进行提交)。\n  \n- **X**: 未知状态(很可能是遇到git的bug了，你可以向git提交bug report)\n  \n- **?**：未被git进行管理，可以使用git add file1把file1添加进git能被git所进行管理","source":"_posts/git 文件状态 、status.md","raw":"---\ntitle: git 文件状态 、status\nurl: /archives/gitwen-jian-zhuang-tai-status\ncategories:\n  - git\ntags:\n  - git\n  - 文件\n  - status\nabbrlink: 56d54cc1\ndate: 2022-02-16 15:44:04\nupdated: 2022-02-16 15:51:13\n---\n\n# git status命令\n\n查看文件更改状态\n\n```bash\ngit status\n```\n\n带文件状态码查看\n\n```bash\ngit status -s\n```\n\n- **A**: 你本地新增的文件（服务器上没有）.\n  \n- **C**: 文件的一个新拷贝.\n  \n- **D**: 你本地删除的文件（服务器上还在）.\n  \n- **M**: 文件的内容或者mode被修改了.\n  \n- **R**: 文件名被修改了。\n  \n- **T**: 文件的类型被修改了。\n  \n- **U**: 文件没有被合并(你需要完成合并才能进行提交)。\n  \n- **X**: 未知状态(很可能是遇到git的bug了，你可以向git提交bug report)\n  \n- **?**：未被git进行管理，可以使用git add file1把file1添加进git能被git所进行管理","slug":"git 文件状态 、status","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clh95h7jq000ygwuvf0yg330g","content":"<h1 id=\"git-status命令\"><a href=\"#git-status命令\" class=\"headerlink\" title=\"git status命令\"></a>git status命令</h1><p>查看文件更改状态</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> status<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>带文件状态码查看</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> status -s<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><p><strong>A</strong>: 你本地新增的文件（服务器上没有）.</p>\n</li>\n<li><p><strong>C</strong>: 文件的一个新拷贝.</p>\n</li>\n<li><p><strong>D</strong>: 你本地删除的文件（服务器上还在）.</p>\n</li>\n<li><p><strong>M</strong>: 文件的内容或者mode被修改了.</p>\n</li>\n<li><p><strong>R</strong>: 文件名被修改了。</p>\n</li>\n<li><p><strong>T</strong>: 文件的类型被修改了。</p>\n</li>\n<li><p><strong>U</strong>: 文件没有被合并(你需要完成合并才能进行提交)。</p>\n</li>\n<li><p><strong>X</strong>: 未知状态(很可能是遇到git的bug了，你可以向git提交bug report)</p>\n</li>\n<li><p>**?**：未被git进行管理，可以使用git add file1把file1添加进git能被git所进行管理</p>\n</li>\n</ul>\n","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}},"cover":false,"excerpt":"","more":"<h1 id=\"git-status命令\"><a href=\"#git-status命令\" class=\"headerlink\" title=\"git status命令\"></a>git status命令</h1><p>查看文件更改状态</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> status<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>带文件状态码查看</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> status -s<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><p><strong>A</strong>: 你本地新增的文件（服务器上没有）.</p>\n</li>\n<li><p><strong>C</strong>: 文件的一个新拷贝.</p>\n</li>\n<li><p><strong>D</strong>: 你本地删除的文件（服务器上还在）.</p>\n</li>\n<li><p><strong>M</strong>: 文件的内容或者mode被修改了.</p>\n</li>\n<li><p><strong>R</strong>: 文件名被修改了。</p>\n</li>\n<li><p><strong>T</strong>: 文件的类型被修改了。</p>\n</li>\n<li><p><strong>U</strong>: 文件没有被合并(你需要完成合并才能进行提交)。</p>\n</li>\n<li><p><strong>X</strong>: 未知状态(很可能是遇到git的bug了，你可以向git提交bug report)</p>\n</li>\n<li><p>**?**：未被git进行管理，可以使用git add file1把file1添加进git能被git所进行管理</p>\n</li>\n</ul>\n"},{"title":"git 查看提交历史记录","url":"/archives/gitcha-kan-ti-jiao-li-shi-ji-lu","abbrlink":"b85e5b1d","date":"2022-02-16T07:44:48.000Z","updated":"2022-02-16T07:45:01.000Z","_content":"\n# 查看历史\n\n## 查看所有提交历史记录\n\n```bash\ngit log\n```\n\n--oneline 查看历史记录简洁版本\n\n```bash\ngit log --oneline\n```\n\n## 查看指定文件的修改记录\n\n```bash\ngit blame <file>\n```","source":"_posts/git 查看提交历史记录.md","raw":"---\ntitle: git 查看提交历史记录\nurl: /archives/gitcha-kan-ti-jiao-li-shi-ji-lu\ncategories:\n  - git\ntags:\n  - git\n  - history\n  - log\nabbrlink: b85e5b1d\ndate: 2022-02-16 15:44:48\nupdated: 2022-02-16 15:45:01\n---\n\n# 查看历史\n\n## 查看所有提交历史记录\n\n```bash\ngit log\n```\n\n--oneline 查看历史记录简洁版本\n\n```bash\ngit log --oneline\n```\n\n## 查看指定文件的修改记录\n\n```bash\ngit blame <file>\n```","slug":"git 查看提交历史记录","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clh95h7jr0011gwuv87aua8t6","content":"<h1 id=\"查看历史\"><a href=\"#查看历史\" class=\"headerlink\" title=\"查看历史\"></a>查看历史</h1><h2 id=\"查看所有提交历史记录\"><a href=\"#查看所有提交历史记录\" class=\"headerlink\" title=\"查看所有提交历史记录\"></a>查看所有提交历史记录</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> log<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>–oneline 查看历史记录简洁版本</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> log --oneline<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"查看指定文件的修改记录\"><a href=\"#查看指定文件的修改记录\" class=\"headerlink\" title=\"查看指定文件的修改记录\"></a>查看指定文件的修改记录</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> blame <span class=\"token operator\">&lt;</span>file<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}},"cover":false,"excerpt":"","more":"<h1 id=\"查看历史\"><a href=\"#查看历史\" class=\"headerlink\" title=\"查看历史\"></a>查看历史</h1><h2 id=\"查看所有提交历史记录\"><a href=\"#查看所有提交历史记录\" class=\"headerlink\" title=\"查看所有提交历史记录\"></a>查看所有提交历史记录</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> log<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>–oneline 查看历史记录简洁版本</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> log --oneline<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"查看指定文件的修改记录\"><a href=\"#查看指定文件的修改记录\" class=\"headerlink\" title=\"查看指定文件的修改记录\"></a>查看指定文件的修改记录</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> blame <span class=\"token operator\">&lt;</span>file<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>"},{"title":"git 设置ssh 代理","url":"/archives/gitshe-zhi-sshdai-li","abbrlink":"a8f1a3f0","date":"2022-02-16T07:41:21.000Z","updated":"2022-02-16T07:41:44.000Z","_content":"\n配置文件，如果不存在则自行创建一个\n\n```bash\nvim ~\\.ssh\\config\n```\n\n增加内容,端口号设置socks端口号\n\n```bash\nProxyCommand connect -S 127.0.0.1:10808 -a none %h %p\n\nHost github.com\n  User git\n  Port 22\n  Hostname github.com\n  # 注意修改路径为你的路径\n  IdentityFile \"~\\.ssh\\id_rsa\"\n  TCPKeepAlive yes\n\nHost ssh.github.com\n  User git\n  Port 443\n  Hostname ssh.github.com\n  # 注意修改路径为你的路径\n  IdentityFile \"~\\.ssh\\id_rsa\"\n  TCPKeepAlive yes\n```","source":"_posts/git 设置ssh 代理.md","raw":"---\ntitle: git 设置ssh 代理\nurl: /archives/gitshe-zhi-sshdai-li\ncategories:\n  - git\ntags:\n  - git\n  - 代理\nabbrlink: a8f1a3f0\ndate: 2022-02-16 15:41:21\nupdated: 2022-02-16 15:41:44\n---\n\n配置文件，如果不存在则自行创建一个\n\n```bash\nvim ~\\.ssh\\config\n```\n\n增加内容,端口号设置socks端口号\n\n```bash\nProxyCommand connect -S 127.0.0.1:10808 -a none %h %p\n\nHost github.com\n  User git\n  Port 22\n  Hostname github.com\n  # 注意修改路径为你的路径\n  IdentityFile \"~\\.ssh\\id_rsa\"\n  TCPKeepAlive yes\n\nHost ssh.github.com\n  User git\n  Port 443\n  Hostname ssh.github.com\n  # 注意修改路径为你的路径\n  IdentityFile \"~\\.ssh\\id_rsa\"\n  TCPKeepAlive yes\n```","slug":"git 设置ssh 代理","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clh95h7jt0015gwuv1yho5el4","content":"<p>配置文件，如果不存在则自行创建一个</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">vim</span> ~<span class=\"token punctuation\">\\</span>.ssh<span class=\"token punctuation\">\\</span>config<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>增加内容,端口号设置socks端口号</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ProxyCommand connect -S <span class=\"token number\">127.0</span>.0.1:10808 -a none %h %p\n\nHost github.com\n  User <span class=\"token function\">git</span>\n  Port <span class=\"token number\">22</span>\n  Hostname github.com\n  <span class=\"token comment\"># 注意修改路径为你的路径</span>\n  IdentityFile <span class=\"token string\">\"~\\.ssh\\id_rsa\"</span>\n  TCPKeepAlive <span class=\"token function\">yes</span>\n\nHost ssh.github.com\n  User <span class=\"token function\">git</span>\n  Port <span class=\"token number\">443</span>\n  Hostname ssh.github.com\n  <span class=\"token comment\"># 注意修改路径为你的路径</span>\n  IdentityFile <span class=\"token string\">\"~\\.ssh\\id_rsa\"</span>\n  TCPKeepAlive <span class=\"token function\">yes</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}},"cover":false,"excerpt":"","more":"<p>配置文件，如果不存在则自行创建一个</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">vim</span> ~<span class=\"token punctuation\">\\</span>.ssh<span class=\"token punctuation\">\\</span>config<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>增加内容,端口号设置socks端口号</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ProxyCommand connect -S <span class=\"token number\">127.0</span>.0.1:10808 -a none %h %p\n\nHost github.com\n  User <span class=\"token function\">git</span>\n  Port <span class=\"token number\">22</span>\n  Hostname github.com\n  <span class=\"token comment\"># 注意修改路径为你的路径</span>\n  IdentityFile <span class=\"token string\">\"~\\.ssh\\id_rsa\"</span>\n  TCPKeepAlive <span class=\"token function\">yes</span>\n\nHost ssh.github.com\n  User <span class=\"token function\">git</span>\n  Port <span class=\"token number\">443</span>\n  Hostname ssh.github.com\n  <span class=\"token comment\"># 注意修改路径为你的路径</span>\n  IdentityFile <span class=\"token string\">\"~\\.ssh\\id_rsa\"</span>\n  TCPKeepAlive <span class=\"token function\">yes</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>"},{"title":"git 配置http代理","url":"/archives/gitpei-zhi-http-dai-li","abbrlink":"34f1116b","date":"2022-02-16T07:40:39.000Z","updated":"2022-02-16T07:41:34.000Z","_content":"\n设置代理\n\n```bash\ngit config --global https.proxy http://127.0.0.1:1080  \ngit config --global https.proxy https://127.0.0.1:1080\n```\n\n取消代理\n\n```bash\ngit config --global --unset http.proxy\ngit config --global --unset https.proxy\n```","source":"_posts/git 配置http代理.md","raw":"---\ntitle: git 配置http代理\nurl: /archives/gitpei-zhi-http-dai-li\ncategories:\n  - git\ntags:\n  - git\n  - 代理\nabbrlink: 34f1116b\ndate: 2022-02-16 15:40:39\nupdated: 2022-02-16 15:41:34\n---\n\n设置代理\n\n```bash\ngit config --global https.proxy http://127.0.0.1:1080  \ngit config --global https.proxy https://127.0.0.1:1080\n```\n\n取消代理\n\n```bash\ngit config --global --unset http.proxy\ngit config --global --unset https.proxy\n```","slug":"git 配置http代理","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clh95h7jv0018gwuvaqu373mi","content":"<p>设置代理</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> config --global https.proxy http://127.0.0.1:1080  \n<span class=\"token function\">git</span> config --global https.proxy https://127.0.0.1:1080<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>取消代理</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> config --global --unset http.proxy\n<span class=\"token function\">git</span> config --global --unset https.proxy<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}},"cover":false,"excerpt":"","more":"<p>设置代理</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> config --global https.proxy http://127.0.0.1:1080  \n<span class=\"token function\">git</span> config --global https.proxy https://127.0.0.1:1080<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>取消代理</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> config --global --unset http.proxy\n<span class=\"token function\">git</span> config --global --unset https.proxy<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>"},{"title":"git 配置用户名邮箱","url":"/archives/gitpei-zhi-yong-hu-ming-you-xiang","abbrlink":"98c9ab4f","date":"2022-02-16T07:36:50.000Z","updated":"2022-02-16T07:36:50.000Z","_content":"\n## git全局用户名邮箱配置\n\n```bash\ngit config --global user.name  \"username\"  \ngit config --global user.email  \"email\"\n```\n\n## git局部用户名邮箱配置\n\n```bash\ngit config  user.name  \"username\"  \ngit config  user.email  \"email\"\n```\n\n## 修改已有配置信息\n\n```bash\ngit config --replace-all user.name \"name\"\n\ngit config --replace-all user.email \"123@qq.com\"\n```\n\n### 注意：局部变量覆盖全局变量！！！","source":"_posts/git 配置用户名邮箱.md","raw":"---\ntitle: git 配置用户名邮箱\nurl: /archives/gitpei-zhi-yong-hu-ming-you-xiang\ncategories:\n  - git\ntags:\n  - git\nabbrlink: 98c9ab4f\ndate: 2022-02-16 15:36:50\nupdated: 2022-02-16 15:36:50\n---\n\n## git全局用户名邮箱配置\n\n```bash\ngit config --global user.name  \"username\"  \ngit config --global user.email  \"email\"\n```\n\n## git局部用户名邮箱配置\n\n```bash\ngit config  user.name  \"username\"  \ngit config  user.email  \"email\"\n```\n\n## 修改已有配置信息\n\n```bash\ngit config --replace-all user.name \"name\"\n\ngit config --replace-all user.email \"123@qq.com\"\n```\n\n### 注意：局部变量覆盖全局变量！！！","slug":"git 配置用户名邮箱","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clh95h7jx001agwuvg1rxcs95","content":"<h2 id=\"git全局用户名邮箱配置\"><a href=\"#git全局用户名邮箱配置\" class=\"headerlink\" title=\"git全局用户名邮箱配置\"></a>git全局用户名邮箱配置</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> config --global user.name  <span class=\"token string\">\"username\"</span>  \n<span class=\"token function\">git</span> config --global user.email  <span class=\"token string\">\"email\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"git局部用户名邮箱配置\"><a href=\"#git局部用户名邮箱配置\" class=\"headerlink\" title=\"git局部用户名邮箱配置\"></a>git局部用户名邮箱配置</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> config  user.name  <span class=\"token string\">\"username\"</span>  \n<span class=\"token function\">git</span> config  user.email  <span class=\"token string\">\"email\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"修改已有配置信息\"><a href=\"#修改已有配置信息\" class=\"headerlink\" title=\"修改已有配置信息\"></a>修改已有配置信息</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> config --replace-all user.name <span class=\"token string\">\"name\"</span>\n\n<span class=\"token function\">git</span> config --replace-all user.email <span class=\"token string\">\"123@qq.com\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"注意：局部变量覆盖全局变量！！！\"><a href=\"#注意：局部变量覆盖全局变量！！！\" class=\"headerlink\" title=\"注意：局部变量覆盖全局变量！！！\"></a>注意：局部变量覆盖全局变量！！！</h3>","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}},"cover":false,"excerpt":"","more":"<h2 id=\"git全局用户名邮箱配置\"><a href=\"#git全局用户名邮箱配置\" class=\"headerlink\" title=\"git全局用户名邮箱配置\"></a>git全局用户名邮箱配置</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> config --global user.name  <span class=\"token string\">\"username\"</span>  \n<span class=\"token function\">git</span> config --global user.email  <span class=\"token string\">\"email\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"git局部用户名邮箱配置\"><a href=\"#git局部用户名邮箱配置\" class=\"headerlink\" title=\"git局部用户名邮箱配置\"></a>git局部用户名邮箱配置</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> config  user.name  <span class=\"token string\">\"username\"</span>  \n<span class=\"token function\">git</span> config  user.email  <span class=\"token string\">\"email\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"修改已有配置信息\"><a href=\"#修改已有配置信息\" class=\"headerlink\" title=\"修改已有配置信息\"></a>修改已有配置信息</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> config --replace-all user.name <span class=\"token string\">\"name\"</span>\n\n<span class=\"token function\">git</span> config --replace-all user.email <span class=\"token string\">\"123@qq.com\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"注意：局部变量覆盖全局变量！！！\"><a href=\"#注意：局部变量覆盖全局变量！！！\" class=\"headerlink\" title=\"注意：局部变量覆盖全局变量！！！\"></a>注意：局部变量覆盖全局变量！！！</h3>"},{"title":"go mod tidy 报错timeout","url":"/archives/gomodtidy报错timeout","abbrlink":"394fab29","date":"2022-05-05T08:33:04.000Z","updated":"2022-05-05T08:39:43.000Z","_content":"\n# go mod tidy 报错timeout\n当我们设置了GOPROXY代理之后\n```bash\ngo env -w GOPROXY=https://goproxy.io,direct\n```\n或者\n```bash\ngo env -w GOPROXY=https://goproxy.cn,direct\n```\n执行 go mod tidy 命令报错\n```bash\ngo mod tidy\ngithub.com/spf13/viper: github.com/spf13/viper@v1.11.0: verifying module: github.com/spf13/viper@v1.11.0: Get \"https://sum.golang.org/lookup/github.com/spf13/viper@v1.11.0\": dial tcp 142.251.42.241:443: i/o timeout\n```\n报错是因为更改了GOPROXY 导致校验不通过\n解决办法\n1.关闭GOSUMDB 校验\n```bash\ngo env -w GOSUMDB=off\n```\n2.设置另一个国内可用的sum验证服务\n```bash\ngo env -w GOSUMDB=\"sum.golang.google.cn\"\n```\n","source":"_posts/go mod tidy 报错timeout.md","raw":"---\ntitle: go mod tidy 报错timeout\nurl: /archives/gomodtidy报错timeout\ncategories:\n  - golang\ntags:\n  - golang\nabbrlink: 394fab29\ndate: 2022-05-05 16:33:04\nupdated: 2022-05-05 16:39:43\n---\n\n# go mod tidy 报错timeout\n当我们设置了GOPROXY代理之后\n```bash\ngo env -w GOPROXY=https://goproxy.io,direct\n```\n或者\n```bash\ngo env -w GOPROXY=https://goproxy.cn,direct\n```\n执行 go mod tidy 命令报错\n```bash\ngo mod tidy\ngithub.com/spf13/viper: github.com/spf13/viper@v1.11.0: verifying module: github.com/spf13/viper@v1.11.0: Get \"https://sum.golang.org/lookup/github.com/spf13/viper@v1.11.0\": dial tcp 142.251.42.241:443: i/o timeout\n```\n报错是因为更改了GOPROXY 导致校验不通过\n解决办法\n1.关闭GOSUMDB 校验\n```bash\ngo env -w GOSUMDB=off\n```\n2.设置另一个国内可用的sum验证服务\n```bash\ngo env -w GOSUMDB=\"sum.golang.google.cn\"\n```\n","slug":"go mod tidy 报错timeout","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clh95h7k0001dgwuv4sus2kvm","content":"<h1 id=\"go-mod-tidy-报错timeout\"><a href=\"#go-mod-tidy-报错timeout\" class=\"headerlink\" title=\"go mod tidy 报错timeout\"></a>go mod tidy 报错timeout</h1><p>当我们设置了GOPROXY代理之后</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">go <span class=\"token function\">env</span> -w <span class=\"token assign-left variable\">GOPROXY</span><span class=\"token operator\">=</span>https://goproxy.io,direct<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>或者</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">go <span class=\"token function\">env</span> -w <span class=\"token assign-left variable\">GOPROXY</span><span class=\"token operator\">=</span>https://goproxy.cn,direct<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>执行 go mod tidy 命令报错</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">go mod tidy\ngithub.com/spf13/viper: github.com/spf13/viper@v1.11.0: verifying module: github.com/spf13/viper@v1.11.0: Get <span class=\"token string\">\"https://sum.golang.org/lookup/github.com/spf13/viper@v1.11.0\"</span><span class=\"token builtin class-name\">:</span> dial tcp <span class=\"token number\">142.251</span>.42.241:443: i/o <span class=\"token function\">timeout</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>报错是因为更改了GOPROXY 导致校验不通过<br>解决办法<br>1.关闭GOSUMDB 校验</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">go <span class=\"token function\">env</span> -w <span class=\"token assign-left variable\">GOSUMDB</span><span class=\"token operator\">=</span>off<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>2.设置另一个国内可用的sum验证服务</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">go <span class=\"token function\">env</span> -w <span class=\"token assign-left variable\">GOSUMDB</span><span class=\"token operator\">=</span><span class=\"token string\">\"sum.golang.google.cn\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}},"cover":false,"excerpt":"","more":"<h1 id=\"go-mod-tidy-报错timeout\"><a href=\"#go-mod-tidy-报错timeout\" class=\"headerlink\" title=\"go mod tidy 报错timeout\"></a>go mod tidy 报错timeout</h1><p>当我们设置了GOPROXY代理之后</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">go <span class=\"token function\">env</span> -w <span class=\"token assign-left variable\">GOPROXY</span><span class=\"token operator\">=</span>https://goproxy.io,direct<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>或者</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">go <span class=\"token function\">env</span> -w <span class=\"token assign-left variable\">GOPROXY</span><span class=\"token operator\">=</span>https://goproxy.cn,direct<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>执行 go mod tidy 命令报错</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">go mod tidy\ngithub.com/spf13/viper: github.com/spf13/viper@v1.11.0: verifying module: github.com/spf13/viper@v1.11.0: Get <span class=\"token string\">\"https://sum.golang.org/lookup/github.com/spf13/viper@v1.11.0\"</span><span class=\"token builtin class-name\">:</span> dial tcp <span class=\"token number\">142.251</span>.42.241:443: i/o <span class=\"token function\">timeout</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>报错是因为更改了GOPROXY 导致校验不通过<br>解决办法<br>1.关闭GOSUMDB 校验</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">go <span class=\"token function\">env</span> -w <span class=\"token assign-left variable\">GOSUMDB</span><span class=\"token operator\">=</span>off<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>2.设置另一个国内可用的sum验证服务</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">go <span class=\"token function\">env</span> -w <span class=\"token assign-left variable\">GOSUMDB</span><span class=\"token operator\">=</span><span class=\"token string\">\"sum.golang.google.cn\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n"},{"title":"golang AES算法 CBC加密","url":"/archives/golangaes-suan-fa-cbc-jia-mi","description":"golang代码实现AES算法 CBC加密","abbrlink":"3c90a07d","date":"2022-04-18T10:18:51.000Z","updated":"2022-04-18T10:18:51.000Z","_content":"\n```golang\npackage aes\n\nimport (\n\t\"bytes\"\n\t\"crypto/aes\"\n\t\"crypto/cipher\"\n\t\"encoding/base64\"\n\t\"errors\"\n)\n\n//pkcs7Padding 填充\nfunc pkcs7Padding(data []byte, blockSize int) []byte {\n\t//判断缺少几位长度。最少1，最多 blockSize\n\tpadding := blockSize - len(data)%blockSize\n\t//补足位数。把切片[]byte{byte(padding)}复制padding个\n\tpadText := bytes.Repeat([]byte{byte(padding)}, padding)\n\treturn append(data, padText...)\n}\n\n//pkcs7UnPadding 填充的反向操作\nfunc pkcs7UnPadding(data []byte) ([]byte, error) {\n\tlength := len(data)\n\tif length == 0 {\n\t\treturn nil, errors.New(\"加密字符串错误！\")\n\t}\n\t//获取填充的个数\n\tunPadding := int(data[length-1])\n\treturn data[:(length - unPadding)], nil\n}\n\n//AesEncrypt 加密\nfunc AesEncrypt(data []byte, key []byte) ([]byte, error) {\n\t//创建加密实例\n\tblock, err := aes.NewCipher(key)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\t//判断加密快的大小\n\tblockSize := block.BlockSize()\n\t//填充\n\tencryptBytes := pkcs7Padding(data, blockSize)\n\t//初始化加密数据接收切片\n\tcrypted := make([]byte, len(encryptBytes))\n\t//使用cbc加密模式\n\tblockMode := cipher.NewCBCEncrypter(block, key[:blockSize])\n\t//执行加密\n\tblockMode.CryptBlocks(crypted, encryptBytes)\n\treturn crypted, nil\n}\n\n//AesDecrypt 解密\nfunc AesDecrypt(data []byte, key []byte) ([]byte, error) {\n\t//创建实例\n\tblock, err := aes.NewCipher(key)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\t//获取块的大小\n\tblockSize := block.BlockSize()\n\t//使用cbc\n\tblockMode := cipher.NewCBCDecrypter(block, key[:blockSize])\n\t//初始化解密数据接收切片\n\tcrypted := make([]byte, len(data))\n\t//执行解密\n\tblockMode.CryptBlocks(crypted, data)\n\t//去除填充\n\tcrypted, err = pkcs7UnPadding(crypted)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn crypted, nil\n}\n\n//EncryptByAes Aes加密 后 base64 再加\nfunc EncryptByAes(data, key []byte) (string, error) {\n\tres, err := AesEncrypt(data, key)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\treturn base64.StdEncoding.EncodeToString(res), nil\n}\n\n//DecryptByAes Aes 解密\nfunc DecryptByAes(data, key string) ([]byte, error) {\n\tdataByte, err := base64.StdEncoding.DecodeString(data)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn AesDecrypt(dataByte, []byte(key))\n}\n```\n","source":"_posts/golang AES算法 CBC加密.md","raw":"---\ntitle: golang AES算法 CBC加密\nurl: /archives/golangaes-suan-fa-cbc-jia-mi\ndescription: golang代码实现AES算法 CBC加密\ncategories:\n  - golang\ntags:\n  - golang\n  - aes\n  - cbc\nabbrlink: 3c90a07d\ndate: 2022-04-18 18:18:51\nupdated: 2022-04-18 18:18:51\n---\n\n```golang\npackage aes\n\nimport (\n\t\"bytes\"\n\t\"crypto/aes\"\n\t\"crypto/cipher\"\n\t\"encoding/base64\"\n\t\"errors\"\n)\n\n//pkcs7Padding 填充\nfunc pkcs7Padding(data []byte, blockSize int) []byte {\n\t//判断缺少几位长度。最少1，最多 blockSize\n\tpadding := blockSize - len(data)%blockSize\n\t//补足位数。把切片[]byte{byte(padding)}复制padding个\n\tpadText := bytes.Repeat([]byte{byte(padding)}, padding)\n\treturn append(data, padText...)\n}\n\n//pkcs7UnPadding 填充的反向操作\nfunc pkcs7UnPadding(data []byte) ([]byte, error) {\n\tlength := len(data)\n\tif length == 0 {\n\t\treturn nil, errors.New(\"加密字符串错误！\")\n\t}\n\t//获取填充的个数\n\tunPadding := int(data[length-1])\n\treturn data[:(length - unPadding)], nil\n}\n\n//AesEncrypt 加密\nfunc AesEncrypt(data []byte, key []byte) ([]byte, error) {\n\t//创建加密实例\n\tblock, err := aes.NewCipher(key)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\t//判断加密快的大小\n\tblockSize := block.BlockSize()\n\t//填充\n\tencryptBytes := pkcs7Padding(data, blockSize)\n\t//初始化加密数据接收切片\n\tcrypted := make([]byte, len(encryptBytes))\n\t//使用cbc加密模式\n\tblockMode := cipher.NewCBCEncrypter(block, key[:blockSize])\n\t//执行加密\n\tblockMode.CryptBlocks(crypted, encryptBytes)\n\treturn crypted, nil\n}\n\n//AesDecrypt 解密\nfunc AesDecrypt(data []byte, key []byte) ([]byte, error) {\n\t//创建实例\n\tblock, err := aes.NewCipher(key)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\t//获取块的大小\n\tblockSize := block.BlockSize()\n\t//使用cbc\n\tblockMode := cipher.NewCBCDecrypter(block, key[:blockSize])\n\t//初始化解密数据接收切片\n\tcrypted := make([]byte, len(data))\n\t//执行解密\n\tblockMode.CryptBlocks(crypted, data)\n\t//去除填充\n\tcrypted, err = pkcs7UnPadding(crypted)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn crypted, nil\n}\n\n//EncryptByAes Aes加密 后 base64 再加\nfunc EncryptByAes(data, key []byte) (string, error) {\n\tres, err := AesEncrypt(data, key)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\treturn base64.StdEncoding.EncodeToString(res), nil\n}\n\n//DecryptByAes Aes 解密\nfunc DecryptByAes(data, key string) ([]byte, error) {\n\tdataByte, err := base64.StdEncoding.DecodeString(data)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn AesDecrypt(dataByte, []byte(key))\n}\n```\n","slug":"golang AES算法 CBC加密","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clh95h7k1001fgwuvg1wn4nyc","content":"<pre class=\"line-numbers language-golang\" data-language=\"golang\"><code class=\"language-golang\">package aes\n\nimport (\n\t&quot;bytes&quot;\n\t&quot;crypto&#x2F;aes&quot;\n\t&quot;crypto&#x2F;cipher&quot;\n\t&quot;encoding&#x2F;base64&quot;\n\t&quot;errors&quot;\n)\n\n&#x2F;&#x2F;pkcs7Padding 填充\nfunc pkcs7Padding(data []byte, blockSize int) []byte &#123;\n\t&#x2F;&#x2F;判断缺少几位长度。最少1，最多 blockSize\n\tpadding :&#x3D; blockSize - len(data)%blockSize\n\t&#x2F;&#x2F;补足位数。把切片[]byte&#123;byte(padding)&#125;复制padding个\n\tpadText :&#x3D; bytes.Repeat([]byte&#123;byte(padding)&#125;, padding)\n\treturn append(data, padText...)\n&#125;\n\n&#x2F;&#x2F;pkcs7UnPadding 填充的反向操作\nfunc pkcs7UnPadding(data []byte) ([]byte, error) &#123;\n\tlength :&#x3D; len(data)\n\tif length &#x3D;&#x3D; 0 &#123;\n\t\treturn nil, errors.New(&quot;加密字符串错误！&quot;)\n\t&#125;\n\t&#x2F;&#x2F;获取填充的个数\n\tunPadding :&#x3D; int(data[length-1])\n\treturn data[:(length - unPadding)], nil\n&#125;\n\n&#x2F;&#x2F;AesEncrypt 加密\nfunc AesEncrypt(data []byte, key []byte) ([]byte, error) &#123;\n\t&#x2F;&#x2F;创建加密实例\n\tblock, err :&#x3D; aes.NewCipher(key)\n\tif err !&#x3D; nil &#123;\n\t\treturn nil, err\n\t&#125;\n\t&#x2F;&#x2F;判断加密快的大小\n\tblockSize :&#x3D; block.BlockSize()\n\t&#x2F;&#x2F;填充\n\tencryptBytes :&#x3D; pkcs7Padding(data, blockSize)\n\t&#x2F;&#x2F;初始化加密数据接收切片\n\tcrypted :&#x3D; make([]byte, len(encryptBytes))\n\t&#x2F;&#x2F;使用cbc加密模式\n\tblockMode :&#x3D; cipher.NewCBCEncrypter(block, key[:blockSize])\n\t&#x2F;&#x2F;执行加密\n\tblockMode.CryptBlocks(crypted, encryptBytes)\n\treturn crypted, nil\n&#125;\n\n&#x2F;&#x2F;AesDecrypt 解密\nfunc AesDecrypt(data []byte, key []byte) ([]byte, error) &#123;\n\t&#x2F;&#x2F;创建实例\n\tblock, err :&#x3D; aes.NewCipher(key)\n\tif err !&#x3D; nil &#123;\n\t\treturn nil, err\n\t&#125;\n\t&#x2F;&#x2F;获取块的大小\n\tblockSize :&#x3D; block.BlockSize()\n\t&#x2F;&#x2F;使用cbc\n\tblockMode :&#x3D; cipher.NewCBCDecrypter(block, key[:blockSize])\n\t&#x2F;&#x2F;初始化解密数据接收切片\n\tcrypted :&#x3D; make([]byte, len(data))\n\t&#x2F;&#x2F;执行解密\n\tblockMode.CryptBlocks(crypted, data)\n\t&#x2F;&#x2F;去除填充\n\tcrypted, err &#x3D; pkcs7UnPadding(crypted)\n\tif err !&#x3D; nil &#123;\n\t\treturn nil, err\n\t&#125;\n\treturn crypted, nil\n&#125;\n\n&#x2F;&#x2F;EncryptByAes Aes加密 后 base64 再加\nfunc EncryptByAes(data, key []byte) (string, error) &#123;\n\tres, err :&#x3D; AesEncrypt(data, key)\n\tif err !&#x3D; nil &#123;\n\t\treturn &quot;&quot;, err\n\t&#125;\n\treturn base64.StdEncoding.EncodeToString(res), nil\n&#125;\n\n&#x2F;&#x2F;DecryptByAes Aes 解密\nfunc DecryptByAes(data, key string) ([]byte, error) &#123;\n\tdataByte, err :&#x3D; base64.StdEncoding.DecodeString(data)\n\tif err !&#x3D; nil &#123;\n\t\treturn nil, err\n\t&#125;\n\treturn AesDecrypt(dataByte, []byte(key))\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}},"cover":false,"excerpt":"","more":"<pre class=\"line-numbers language-golang\" data-language=\"golang\"><code class=\"language-golang\">package aes\n\nimport (\n\t&quot;bytes&quot;\n\t&quot;crypto&#x2F;aes&quot;\n\t&quot;crypto&#x2F;cipher&quot;\n\t&quot;encoding&#x2F;base64&quot;\n\t&quot;errors&quot;\n)\n\n&#x2F;&#x2F;pkcs7Padding 填充\nfunc pkcs7Padding(data []byte, blockSize int) []byte &#123;\n\t&#x2F;&#x2F;判断缺少几位长度。最少1，最多 blockSize\n\tpadding :&#x3D; blockSize - len(data)%blockSize\n\t&#x2F;&#x2F;补足位数。把切片[]byte&#123;byte(padding)&#125;复制padding个\n\tpadText :&#x3D; bytes.Repeat([]byte&#123;byte(padding)&#125;, padding)\n\treturn append(data, padText...)\n&#125;\n\n&#x2F;&#x2F;pkcs7UnPadding 填充的反向操作\nfunc pkcs7UnPadding(data []byte) ([]byte, error) &#123;\n\tlength :&#x3D; len(data)\n\tif length &#x3D;&#x3D; 0 &#123;\n\t\treturn nil, errors.New(&quot;加密字符串错误！&quot;)\n\t&#125;\n\t&#x2F;&#x2F;获取填充的个数\n\tunPadding :&#x3D; int(data[length-1])\n\treturn data[:(length - unPadding)], nil\n&#125;\n\n&#x2F;&#x2F;AesEncrypt 加密\nfunc AesEncrypt(data []byte, key []byte) ([]byte, error) &#123;\n\t&#x2F;&#x2F;创建加密实例\n\tblock, err :&#x3D; aes.NewCipher(key)\n\tif err !&#x3D; nil &#123;\n\t\treturn nil, err\n\t&#125;\n\t&#x2F;&#x2F;判断加密快的大小\n\tblockSize :&#x3D; block.BlockSize()\n\t&#x2F;&#x2F;填充\n\tencryptBytes :&#x3D; pkcs7Padding(data, blockSize)\n\t&#x2F;&#x2F;初始化加密数据接收切片\n\tcrypted :&#x3D; make([]byte, len(encryptBytes))\n\t&#x2F;&#x2F;使用cbc加密模式\n\tblockMode :&#x3D; cipher.NewCBCEncrypter(block, key[:blockSize])\n\t&#x2F;&#x2F;执行加密\n\tblockMode.CryptBlocks(crypted, encryptBytes)\n\treturn crypted, nil\n&#125;\n\n&#x2F;&#x2F;AesDecrypt 解密\nfunc AesDecrypt(data []byte, key []byte) ([]byte, error) &#123;\n\t&#x2F;&#x2F;创建实例\n\tblock, err :&#x3D; aes.NewCipher(key)\n\tif err !&#x3D; nil &#123;\n\t\treturn nil, err\n\t&#125;\n\t&#x2F;&#x2F;获取块的大小\n\tblockSize :&#x3D; block.BlockSize()\n\t&#x2F;&#x2F;使用cbc\n\tblockMode :&#x3D; cipher.NewCBCDecrypter(block, key[:blockSize])\n\t&#x2F;&#x2F;初始化解密数据接收切片\n\tcrypted :&#x3D; make([]byte, len(data))\n\t&#x2F;&#x2F;执行解密\n\tblockMode.CryptBlocks(crypted, data)\n\t&#x2F;&#x2F;去除填充\n\tcrypted, err &#x3D; pkcs7UnPadding(crypted)\n\tif err !&#x3D; nil &#123;\n\t\treturn nil, err\n\t&#125;\n\treturn crypted, nil\n&#125;\n\n&#x2F;&#x2F;EncryptByAes Aes加密 后 base64 再加\nfunc EncryptByAes(data, key []byte) (string, error) &#123;\n\tres, err :&#x3D; AesEncrypt(data, key)\n\tif err !&#x3D; nil &#123;\n\t\treturn &quot;&quot;, err\n\t&#125;\n\treturn base64.StdEncoding.EncodeToString(res), nil\n&#125;\n\n&#x2F;&#x2F;DecryptByAes Aes 解密\nfunc DecryptByAes(data, key string) ([]byte, error) &#123;\n\tdataByte, err :&#x3D; base64.StdEncoding.DecodeString(data)\n\tif err !&#x3D; nil &#123;\n\t\treturn nil, err\n\t&#125;\n\treturn AesDecrypt(dataByte, []byte(key))\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"golang AES算法 ECB模式加密","url":"/archives/golangaes-suan-fa-ecb-mo-shi-jia-mi","description":"golang代码实现AES算法ECB模式加密","abbrlink":"d7d262c7","date":"2022-04-18T10:18:03.000Z","updated":"2022-04-18T10:18:03.000Z","_content":"\n```golang\npackage aes\n\nimport (\n\t\"bytes\"\n\t\"crypto/aes\"\n)\n\nfunc EcbDecrypt(data, key []byte) ([]byte, error) {\n\tblock, err := aes.NewCipher(key)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdecrypted := make([]byte, len(data))\n\tsize := block.BlockSize()\n\n\tfor bs, be := 0, size; bs < len(data); bs, be = bs+size, be+size {\n\t\tblock.Decrypt(decrypted[bs:be], data[bs:be])\n\t}\n\n\treturn PKCS5UnPadding(decrypted), nil\n}\n\nfunc EcbEncrypt(data, key []byte) ([]byte, error) {\n\tblock, err := aes.NewCipher(key)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdata = PKCS5Padding(data, block.BlockSize())\n\tdecrypted := make([]byte, len(data))\n\tsize := block.BlockSize()\n\n\tfor bs, be := 0, size; bs < len(data); bs, be = bs+size, be+size {\n\t\tblock.Encrypt(decrypted[bs:be], data[bs:be])\n\t}\n\treturn decrypted, nil\n}\nfunc PKCS5Padding(ciphertext []byte, blockSize int) []byte {\n\tpadding := blockSize - len(ciphertext)%blockSize\n\tpadtext := bytes.Repeat([]byte{byte(padding)}, padding)\n\treturn append(ciphertext, padtext...)\n}\n\nfunc PKCS5UnPadding(origData []byte) []byte {\n\tlength := len(origData)\n\t// 去掉最后一个字节 unpadding 次\n\tunpadding := int(origData[length-1])\n\treturn origData[:(length - unpadding)]\n}\n```\n","source":"_posts/golang AES算法 ECB模式加密.md","raw":"---\ntitle: golang AES算法 ECB模式加密\nurl: /archives/golangaes-suan-fa-ecb-mo-shi-jia-mi\ndescription: golang代码实现AES算法ECB模式加密\ncategories:\n  - golang\ntags:\n  - golang\n  - aes\n  - ecb\nabbrlink: d7d262c7\ndate: 2022-04-18 18:18:03\nupdated: 2022-04-18 18:18:03\n---\n\n```golang\npackage aes\n\nimport (\n\t\"bytes\"\n\t\"crypto/aes\"\n)\n\nfunc EcbDecrypt(data, key []byte) ([]byte, error) {\n\tblock, err := aes.NewCipher(key)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdecrypted := make([]byte, len(data))\n\tsize := block.BlockSize()\n\n\tfor bs, be := 0, size; bs < len(data); bs, be = bs+size, be+size {\n\t\tblock.Decrypt(decrypted[bs:be], data[bs:be])\n\t}\n\n\treturn PKCS5UnPadding(decrypted), nil\n}\n\nfunc EcbEncrypt(data, key []byte) ([]byte, error) {\n\tblock, err := aes.NewCipher(key)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdata = PKCS5Padding(data, block.BlockSize())\n\tdecrypted := make([]byte, len(data))\n\tsize := block.BlockSize()\n\n\tfor bs, be := 0, size; bs < len(data); bs, be = bs+size, be+size {\n\t\tblock.Encrypt(decrypted[bs:be], data[bs:be])\n\t}\n\treturn decrypted, nil\n}\nfunc PKCS5Padding(ciphertext []byte, blockSize int) []byte {\n\tpadding := blockSize - len(ciphertext)%blockSize\n\tpadtext := bytes.Repeat([]byte{byte(padding)}, padding)\n\treturn append(ciphertext, padtext...)\n}\n\nfunc PKCS5UnPadding(origData []byte) []byte {\n\tlength := len(origData)\n\t// 去掉最后一个字节 unpadding 次\n\tunpadding := int(origData[length-1])\n\treturn origData[:(length - unpadding)]\n}\n```\n","slug":"golang AES算法 ECB模式加密","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clh95h7k3001kgwuvbcqc8lrd","content":"<pre class=\"line-numbers language-golang\" data-language=\"golang\"><code class=\"language-golang\">package aes\n\nimport (\n\t&quot;bytes&quot;\n\t&quot;crypto&#x2F;aes&quot;\n)\n\nfunc EcbDecrypt(data, key []byte) ([]byte, error) &#123;\n\tblock, err :&#x3D; aes.NewCipher(key)\n\tif err !&#x3D; nil &#123;\n\t\treturn nil, err\n\t&#125;\n\tdecrypted :&#x3D; make([]byte, len(data))\n\tsize :&#x3D; block.BlockSize()\n\n\tfor bs, be :&#x3D; 0, size; bs &lt; len(data); bs, be &#x3D; bs+size, be+size &#123;\n\t\tblock.Decrypt(decrypted[bs:be], data[bs:be])\n\t&#125;\n\n\treturn PKCS5UnPadding(decrypted), nil\n&#125;\n\nfunc EcbEncrypt(data, key []byte) ([]byte, error) &#123;\n\tblock, err :&#x3D; aes.NewCipher(key)\n\tif err !&#x3D; nil &#123;\n\t\treturn nil, err\n\t&#125;\n\tdata &#x3D; PKCS5Padding(data, block.BlockSize())\n\tdecrypted :&#x3D; make([]byte, len(data))\n\tsize :&#x3D; block.BlockSize()\n\n\tfor bs, be :&#x3D; 0, size; bs &lt; len(data); bs, be &#x3D; bs+size, be+size &#123;\n\t\tblock.Encrypt(decrypted[bs:be], data[bs:be])\n\t&#125;\n\treturn decrypted, nil\n&#125;\nfunc PKCS5Padding(ciphertext []byte, blockSize int) []byte &#123;\n\tpadding :&#x3D; blockSize - len(ciphertext)%blockSize\n\tpadtext :&#x3D; bytes.Repeat([]byte&#123;byte(padding)&#125;, padding)\n\treturn append(ciphertext, padtext...)\n&#125;\n\nfunc PKCS5UnPadding(origData []byte) []byte &#123;\n\tlength :&#x3D; len(origData)\n\t&#x2F;&#x2F; 去掉最后一个字节 unpadding 次\n\tunpadding :&#x3D; int(origData[length-1])\n\treturn origData[:(length - unpadding)]\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}},"cover":false,"excerpt":"","more":"<pre class=\"line-numbers language-golang\" data-language=\"golang\"><code class=\"language-golang\">package aes\n\nimport (\n\t&quot;bytes&quot;\n\t&quot;crypto&#x2F;aes&quot;\n)\n\nfunc EcbDecrypt(data, key []byte) ([]byte, error) &#123;\n\tblock, err :&#x3D; aes.NewCipher(key)\n\tif err !&#x3D; nil &#123;\n\t\treturn nil, err\n\t&#125;\n\tdecrypted :&#x3D; make([]byte, len(data))\n\tsize :&#x3D; block.BlockSize()\n\n\tfor bs, be :&#x3D; 0, size; bs &lt; len(data); bs, be &#x3D; bs+size, be+size &#123;\n\t\tblock.Decrypt(decrypted[bs:be], data[bs:be])\n\t&#125;\n\n\treturn PKCS5UnPadding(decrypted), nil\n&#125;\n\nfunc EcbEncrypt(data, key []byte) ([]byte, error) &#123;\n\tblock, err :&#x3D; aes.NewCipher(key)\n\tif err !&#x3D; nil &#123;\n\t\treturn nil, err\n\t&#125;\n\tdata &#x3D; PKCS5Padding(data, block.BlockSize())\n\tdecrypted :&#x3D; make([]byte, len(data))\n\tsize :&#x3D; block.BlockSize()\n\n\tfor bs, be :&#x3D; 0, size; bs &lt; len(data); bs, be &#x3D; bs+size, be+size &#123;\n\t\tblock.Encrypt(decrypted[bs:be], data[bs:be])\n\t&#125;\n\treturn decrypted, nil\n&#125;\nfunc PKCS5Padding(ciphertext []byte, blockSize int) []byte &#123;\n\tpadding :&#x3D; blockSize - len(ciphertext)%blockSize\n\tpadtext :&#x3D; bytes.Repeat([]byte&#123;byte(padding)&#125;, padding)\n\treturn append(ciphertext, padtext...)\n&#125;\n\nfunc PKCS5UnPadding(origData []byte) []byte &#123;\n\tlength :&#x3D; len(origData)\n\t&#x2F;&#x2F; 去掉最后一个字节 unpadding 次\n\tunpadding :&#x3D; int(origData[length-1])\n\treturn origData[:(length - unpadding)]\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"golang 获取系统相关信息","url":"/archives/golanghuo-qu-xi-tong-xiang-guan-xin-xi","abbrlink":"46454e21","date":"2022-03-01T02:21:26.000Z","updated":"2022-03-01T02:21:26.000Z","_content":"\n```go\npackage main\n\nimport (\n    \"os\"\n    \"runtime\"\n)\n\nfunc main() {\n    println(`系统类型：`, runtime.GOOS)\n\n    println(`系统架构：`, runtime.GOARCH)\n\n    println(`CPU 核数：`, runtime.GOMAXPROCS(0))\n\n    name, err := os.Hostname()\n    if err != nil {\n        panic(err)\n    }\n    println(`电脑名称：`, name)\n}\n```","source":"_posts/golang 获取系统相关信息.md","raw":"---\ntitle: golang 获取系统相关信息\nurl: /archives/golanghuo-qu-xi-tong-xiang-guan-xin-xi\ncategories:\n  - golang\ntags:\n  - golang\nabbrlink: '46454e21'\ndate: 2022-03-01 10:21:26\nupdated: 2022-03-01 10:21:26\n---\n\n```go\npackage main\n\nimport (\n    \"os\"\n    \"runtime\"\n)\n\nfunc main() {\n    println(`系统类型：`, runtime.GOOS)\n\n    println(`系统架构：`, runtime.GOARCH)\n\n    println(`CPU 核数：`, runtime.GOMAXPROCS(0))\n\n    name, err := os.Hostname()\n    if err != nil {\n        panic(err)\n    }\n    println(`电脑名称：`, name)\n}\n```","slug":"golang 获取系统相关信息","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clh95h7k4001mgwuv3xskbitw","content":"<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"os\"</span>\n    <span class=\"token string\">\"runtime\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">`系统类型：`</span><span class=\"token punctuation\">,</span> runtime<span class=\"token punctuation\">.</span>GOOS<span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">`系统架构：`</span><span class=\"token punctuation\">,</span> runtime<span class=\"token punctuation\">.</span>GOARCH<span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">`CPU 核数：`</span><span class=\"token punctuation\">,</span> runtime<span class=\"token punctuation\">.</span><span class=\"token function\">GOMAXPROCS</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    name<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">Hostname</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">`电脑名称：`</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}},"cover":false,"excerpt":"","more":"<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"os\"</span>\n    <span class=\"token string\">\"runtime\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">`系统类型：`</span><span class=\"token punctuation\">,</span> runtime<span class=\"token punctuation\">.</span>GOOS<span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">`系统架构：`</span><span class=\"token punctuation\">,</span> runtime<span class=\"token punctuation\">.</span>GOARCH<span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">`CPU 核数：`</span><span class=\"token punctuation\">,</span> runtime<span class=\"token punctuation\">.</span><span class=\"token function\">GOMAXPROCS</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    name<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">Hostname</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">`电脑名称：`</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>"},{"title":"golang 使用pprof 进行性能分析","url":"/archives/golangshi-yong-pprofjin-xing-xing-neng-fen-xi","abbrlink":"afd7e5bb","date":"2022-02-16T07:58:29.000Z","updated":"2022-02-16T07:58:29.000Z","_content":"\n# golang 性能分析\n\n## 性能分析web地址\n\nhttp://ip:port/debug/pprof/\n<!--more-->\n## go tool 命令\n\ntop 排序\n\nlist 列出调用栈\n\n## 内存分析\n\n- -insue_space 生成当前程序内存占用图\n- --alloc_space 生成历史内存占用图\n\n### 命令行生成svg图片分析\n\n- go tool pprof -inuse_space -cum -svg http://ip:port/debug/pprof/heap > heap_inuse1.svg\n\n## cpu占用分析\n\n### 命令行分析\n\n- go tool pprof im_gate cpu.prof # im_gate 是程序名字\n\n### 生成图片分析\n\n- go tool pprof -png http://127.0.0.1:8888/debug/pprof/profile > cpu.png\n","source":"_posts/golang使用pprof进行性能分析.md","raw":"---\ntitle: golang 使用pprof 进行性能分析\nurl: /archives/golangshi-yong-pprofjin-xing-xing-neng-fen-xi\ncategories:\n  - golang\ntags:\n  - pprof\n  - golang\nabbrlink: afd7e5bb\ndate: 2022-02-16 15:58:29\nupdated: 2022-02-16 15:58:29\n---\n\n# golang 性能分析\n\n## 性能分析web地址\n\nhttp://ip:port/debug/pprof/\n<!--more-->\n## go tool 命令\n\ntop 排序\n\nlist 列出调用栈\n\n## 内存分析\n\n- -insue_space 生成当前程序内存占用图\n- --alloc_space 生成历史内存占用图\n\n### 命令行生成svg图片分析\n\n- go tool pprof -inuse_space -cum -svg http://ip:port/debug/pprof/heap > heap_inuse1.svg\n\n## cpu占用分析\n\n### 命令行分析\n\n- go tool pprof im_gate cpu.prof # im_gate 是程序名字\n\n### 生成图片分析\n\n- go tool pprof -png http://127.0.0.1:8888/debug/pprof/profile > cpu.png\n","slug":"golang使用pprof进行性能分析","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clh95h7k5001qgwuv3gn17tsc","content":"<h1 id=\"golang-性能分析\"><a href=\"#golang-性能分析\" class=\"headerlink\" title=\"golang 性能分析\"></a>golang 性能分析</h1><h2 id=\"性能分析web地址\"><a href=\"#性能分析web地址\" class=\"headerlink\" title=\"性能分析web地址\"></a>性能分析web地址</h2><p><a href=\"http://ip:port/debug/pprof/\">http://ip:port/debug/pprof/</a></p>\n<span id=\"more\"></span>\n<h2 id=\"go-tool-命令\"><a href=\"#go-tool-命令\" class=\"headerlink\" title=\"go tool 命令\"></a>go tool 命令</h2><p>top 排序</p>\n<p>list 列出调用栈</p>\n<h2 id=\"内存分析\"><a href=\"#内存分析\" class=\"headerlink\" title=\"内存分析\"></a>内存分析</h2><ul>\n<li>-insue_space 生成当前程序内存占用图</li>\n<li>–alloc_space 生成历史内存占用图</li>\n</ul>\n<h3 id=\"命令行生成svg图片分析\"><a href=\"#命令行生成svg图片分析\" class=\"headerlink\" title=\"命令行生成svg图片分析\"></a>命令行生成svg图片分析</h3><ul>\n<li>go tool pprof -inuse_space -cum -svg <a href=\"http://ip:port/debug/pprof/heap\">http://ip:port/debug/pprof/heap</a> &gt; heap_inuse1.svg</li>\n</ul>\n<h2 id=\"cpu占用分析\"><a href=\"#cpu占用分析\" class=\"headerlink\" title=\"cpu占用分析\"></a>cpu占用分析</h2><h3 id=\"命令行分析\"><a href=\"#命令行分析\" class=\"headerlink\" title=\"命令行分析\"></a>命令行分析</h3><ul>\n<li>go tool pprof im_gate cpu.prof # im_gate 是程序名字</li>\n</ul>\n<h3 id=\"生成图片分析\"><a href=\"#生成图片分析\" class=\"headerlink\" title=\"生成图片分析\"></a>生成图片分析</h3><ul>\n<li>go tool pprof -png <a href=\"http://127.0.0.1:8888/debug/pprof/profile\">http://127.0.0.1:8888/debug/pprof/profile</a> &gt; cpu.png</li>\n</ul>\n","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}},"cover":false,"excerpt":"<h1 id=\"golang-性能分析\"><a href=\"#golang-性能分析\" class=\"headerlink\" title=\"golang 性能分析\"></a>golang 性能分析</h1><h2 id=\"性能分析web地址\"><a href=\"#性能分析web地址\" class=\"headerlink\" title=\"性能分析web地址\"></a>性能分析web地址</h2><p><a href=\"http://ip:port/debug/pprof/\">http://ip:port/debug/pprof/</a></p>","more":"<h2 id=\"go-tool-命令\"><a href=\"#go-tool-命令\" class=\"headerlink\" title=\"go tool 命令\"></a>go tool 命令</h2><p>top 排序</p>\n<p>list 列出调用栈</p>\n<h2 id=\"内存分析\"><a href=\"#内存分析\" class=\"headerlink\" title=\"内存分析\"></a>内存分析</h2><ul>\n<li>-insue_space 生成当前程序内存占用图</li>\n<li>–alloc_space 生成历史内存占用图</li>\n</ul>\n<h3 id=\"命令行生成svg图片分析\"><a href=\"#命令行生成svg图片分析\" class=\"headerlink\" title=\"命令行生成svg图片分析\"></a>命令行生成svg图片分析</h3><ul>\n<li>go tool pprof -inuse_space -cum -svg <a href=\"http://ip:port/debug/pprof/heap\">http://ip:port/debug/pprof/heap</a> &gt; heap_inuse1.svg</li>\n</ul>\n<h2 id=\"cpu占用分析\"><a href=\"#cpu占用分析\" class=\"headerlink\" title=\"cpu占用分析\"></a>cpu占用分析</h2><h3 id=\"命令行分析\"><a href=\"#命令行分析\" class=\"headerlink\" title=\"命令行分析\"></a>命令行分析</h3><ul>\n<li>go tool pprof im_gate cpu.prof # im_gate 是程序名字</li>\n</ul>\n<h3 id=\"生成图片分析\"><a href=\"#生成图片分析\" class=\"headerlink\" title=\"生成图片分析\"></a>生成图片分析</h3><ul>\n<li>go tool pprof -png <a href=\"http://127.0.0.1:8888/debug/pprof/profile\">http://127.0.0.1:8888/debug/pprof/profile</a> &gt; cpu.png</li>\n</ul>"},{"title":"golang 字符串、json、map之间转换","url":"/archives/golangzi-fu-chuan-jsonmap-zhi-jian-zhuan-huan","abbrlink":"9fdcaa40","date":"2022-02-16T07:59:20.000Z","updated":"2022-02-16T08:08:13.000Z","_content":"\n# golang 字符串、json、map之间的转换\n<!--more-->\n```go\nimport (\n\"encoding/json\"\n\"fmt\"\n\"os\"\n)\n\ntype ConfigStruct struct {\n   Host              string   `json:\"host\"`\n   Port              int      `json:\"port\"`\n   AnalyticsFile     string   `json:\"analytics_file\"`\n   StaticFileVersion int      `json:\"static_file_version\"`\n   StaticDir         string   `json:\"static_dir\"`\n   TemplatesDir      string   `json:\"templates_dir\"`\n   SerTcpSocketHost  string   `json:\"serTcpSocketHost\"`\n   SerTcpSocketPort  int      `json:\"serTcpSocketPort\"`\n   Fruits            []string `json:\"fruits\"`\n}\n\ntype Other struct {\n   SerTcpSocketHost string   `json:\"serTcpSocketHost\"`\n   SerTcpSocketPort int      `json:\"serTcpSocketPort\"`\n   Fruits           []string `json:\"fruits\"`\n}\n\nfunc main() {\n   jsonStr := `{\"host\": \"http://localhost:9090\",\"port\": 9090,\"analytics_file\": \"\",\"static_file_version\": 1,\"static_dir\": \"E:/Project/goTest/src/\",\"templates_dir\": \"E:/Project/goTest/src/templates/\",\"serTcpSocketHost\": \":12340\",\"serTcpSocketPort\": 12340,\"fruits\": [\"apple\", \"peach\"]}`\n\n   //json str 转map\n   var dat map[string]interface{}\n   if err := json.Unmarshal([]byte(jsonStr), &dat); err == nil {\n      fmt.Println(\"==============json str 转map=======================\")\n      fmt.Println(dat)\n      fmt.Println(dat[\"host\"])\n   }\n\n   //json str 转struct\n   var config ConfigStruct\n   if err := json.Unmarshal([]byte(jsonStr), &config); err == nil {\n      fmt.Println(\"================json str 转struct==\")\n      fmt.Println(config)\n      fmt.Println(config.Host)\n   }\n\n   //json str 转struct(部份字段)\n   var part Other\n   if err := json.Unmarshal([]byte(jsonStr), &part); err == nil {\n      fmt.Println(\"================json str 转struct==\")\n      fmt.Println(part)\n      fmt.Println(part.SerTcpSocketPort)\n   }\n\n   //struct 到json str\n   if b, err := json.Marshal(config); err == nil {\n      fmt.Println(\"================struct 到json str==\")\n      fmt.Println(string(b))\n   }\n\n   //map 到json str\n   fmt.Println(\"================map 到json str=====================\")\n   enc := json.NewEncoder(os.Stdout)\n   enc.Encode(dat)\n\n   //array 到 json str\n   arr := []string{\"hello\", \"apple\", \"python\", \"golang\", \"base\", \"peach\", \"pear\"}\n   lang, err := json.Marshal(arr)\n   if err == nil {\n      fmt.Println(\"================array 到 json str==\")\n      fmt.Println(string(lang))\n   }\n\n   //json 到 []string\n   var wo []string\n   if err := json.Unmarshal(lang, &wo); err == nil {\n      fmt.Println(\"================json 到 []string==\")\n      fmt.Println(wo)\n   }\n}\n```\n","source":"_posts/golang字符串、json、map之间转换.md","raw":"---\ntitle: golang 字符串、json、map之间转换\nurl: /archives/golangzi-fu-chuan-jsonmap-zhi-jian-zhuan-huan\ncategories:\n  - golang\ntags:\n  - 字符串\n  - json\n  - map\nabbrlink: 9fdcaa40\ndate: 2022-02-16 15:59:20\nupdated: 2022-02-16 16:08:13\n---\n\n# golang 字符串、json、map之间的转换\n<!--more-->\n```go\nimport (\n\"encoding/json\"\n\"fmt\"\n\"os\"\n)\n\ntype ConfigStruct struct {\n   Host              string   `json:\"host\"`\n   Port              int      `json:\"port\"`\n   AnalyticsFile     string   `json:\"analytics_file\"`\n   StaticFileVersion int      `json:\"static_file_version\"`\n   StaticDir         string   `json:\"static_dir\"`\n   TemplatesDir      string   `json:\"templates_dir\"`\n   SerTcpSocketHost  string   `json:\"serTcpSocketHost\"`\n   SerTcpSocketPort  int      `json:\"serTcpSocketPort\"`\n   Fruits            []string `json:\"fruits\"`\n}\n\ntype Other struct {\n   SerTcpSocketHost string   `json:\"serTcpSocketHost\"`\n   SerTcpSocketPort int      `json:\"serTcpSocketPort\"`\n   Fruits           []string `json:\"fruits\"`\n}\n\nfunc main() {\n   jsonStr := `{\"host\": \"http://localhost:9090\",\"port\": 9090,\"analytics_file\": \"\",\"static_file_version\": 1,\"static_dir\": \"E:/Project/goTest/src/\",\"templates_dir\": \"E:/Project/goTest/src/templates/\",\"serTcpSocketHost\": \":12340\",\"serTcpSocketPort\": 12340,\"fruits\": [\"apple\", \"peach\"]}`\n\n   //json str 转map\n   var dat map[string]interface{}\n   if err := json.Unmarshal([]byte(jsonStr), &dat); err == nil {\n      fmt.Println(\"==============json str 转map=======================\")\n      fmt.Println(dat)\n      fmt.Println(dat[\"host\"])\n   }\n\n   //json str 转struct\n   var config ConfigStruct\n   if err := json.Unmarshal([]byte(jsonStr), &config); err == nil {\n      fmt.Println(\"================json str 转struct==\")\n      fmt.Println(config)\n      fmt.Println(config.Host)\n   }\n\n   //json str 转struct(部份字段)\n   var part Other\n   if err := json.Unmarshal([]byte(jsonStr), &part); err == nil {\n      fmt.Println(\"================json str 转struct==\")\n      fmt.Println(part)\n      fmt.Println(part.SerTcpSocketPort)\n   }\n\n   //struct 到json str\n   if b, err := json.Marshal(config); err == nil {\n      fmt.Println(\"================struct 到json str==\")\n      fmt.Println(string(b))\n   }\n\n   //map 到json str\n   fmt.Println(\"================map 到json str=====================\")\n   enc := json.NewEncoder(os.Stdout)\n   enc.Encode(dat)\n\n   //array 到 json str\n   arr := []string{\"hello\", \"apple\", \"python\", \"golang\", \"base\", \"peach\", \"pear\"}\n   lang, err := json.Marshal(arr)\n   if err == nil {\n      fmt.Println(\"================array 到 json str==\")\n      fmt.Println(string(lang))\n   }\n\n   //json 到 []string\n   var wo []string\n   if err := json.Unmarshal(lang, &wo); err == nil {\n      fmt.Println(\"================json 到 []string==\")\n      fmt.Println(wo)\n   }\n}\n```\n","slug":"golang字符串、json、map之间转换","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clh95h7k8001tgwuv4w2kcviz","content":"<h1 id=\"golang-字符串、json、map之间的转换\"><a href=\"#golang-字符串、json、map之间的转换\" class=\"headerlink\" title=\"golang 字符串、json、map之间的转换\"></a>golang 字符串、json、map之间的转换</h1><span id=\"more\"></span>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n<span class=\"token string\">\"encoding/json\"</span>\n<span class=\"token string\">\"fmt\"</span>\n<span class=\"token string\">\"os\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">type</span> ConfigStruct <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n   Host              <span class=\"token builtin\">string</span>   <span class=\"token string\">`json:\"host\"`</span>\n   Port              <span class=\"token builtin\">int</span>      <span class=\"token string\">`json:\"port\"`</span>\n   AnalyticsFile     <span class=\"token builtin\">string</span>   <span class=\"token string\">`json:\"analytics_file\"`</span>\n   StaticFileVersion <span class=\"token builtin\">int</span>      <span class=\"token string\">`json:\"static_file_version\"`</span>\n   StaticDir         <span class=\"token builtin\">string</span>   <span class=\"token string\">`json:\"static_dir\"`</span>\n   TemplatesDir      <span class=\"token builtin\">string</span>   <span class=\"token string\">`json:\"templates_dir\"`</span>\n   SerTcpSocketHost  <span class=\"token builtin\">string</span>   <span class=\"token string\">`json:\"serTcpSocketHost\"`</span>\n   SerTcpSocketPort  <span class=\"token builtin\">int</span>      <span class=\"token string\">`json:\"serTcpSocketPort\"`</span>\n   Fruits            <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span> <span class=\"token string\">`json:\"fruits\"`</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">type</span> Other <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n   SerTcpSocketHost <span class=\"token builtin\">string</span>   <span class=\"token string\">`json:\"serTcpSocketHost\"`</span>\n   SerTcpSocketPort <span class=\"token builtin\">int</span>      <span class=\"token string\">`json:\"serTcpSocketPort\"`</span>\n   Fruits           <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span> <span class=\"token string\">`json:\"fruits\"`</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   jsonStr <span class=\"token operator\">:=</span> <span class=\"token string\">`&#123;\"host\": \"http://localhost:9090\",\"port\": 9090,\"analytics_file\": \"\",\"static_file_version\": 1,\"static_dir\": \"E:/Project/goTest/src/\",\"templates_dir\": \"E:/Project/goTest/src/templates/\",\"serTcpSocketHost\": \":12340\",\"serTcpSocketPort\": 12340,\"fruits\": [\"apple\", \"peach\"]&#125;`</span>\n\n   <span class=\"token comment\">//json str 转map</span>\n   <span class=\"token keyword\">var</span> dat <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n   <span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">Unmarshal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span>jsonStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>dat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n      fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"==============json str 转map=======================\"</span><span class=\"token punctuation\">)</span>\n      fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>dat<span class=\"token punctuation\">)</span>\n      fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>dat<span class=\"token punctuation\">[</span><span class=\"token string\">\"host\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n\n   <span class=\"token comment\">//json str 转struct</span>\n   <span class=\"token keyword\">var</span> config ConfigStruct\n   <span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">Unmarshal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span>jsonStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n      fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"================json str 转struct==\"</span><span class=\"token punctuation\">)</span>\n      fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span>\n      fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>Host<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n\n   <span class=\"token comment\">//json str 转struct(部份字段)</span>\n   <span class=\"token keyword\">var</span> part Other\n   <span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">Unmarshal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span>jsonStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>part<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n      fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"================json str 转struct==\"</span><span class=\"token punctuation\">)</span>\n      fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>part<span class=\"token punctuation\">)</span>\n      fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>part<span class=\"token punctuation\">.</span>SerTcpSocketPort<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n\n   <span class=\"token comment\">//struct 到json str</span>\n   <span class=\"token keyword\">if</span> b<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">Marshal</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n      fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"================struct 到json str==\"</span><span class=\"token punctuation\">)</span>\n      fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n\n   <span class=\"token comment\">//map 到json str</span>\n   fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"================map 到json str=====================\"</span><span class=\"token punctuation\">)</span>\n   enc <span class=\"token operator\">:=</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">NewEncoder</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>Stdout<span class=\"token punctuation\">)</span>\n   enc<span class=\"token punctuation\">.</span><span class=\"token function\">Encode</span><span class=\"token punctuation\">(</span>dat<span class=\"token punctuation\">)</span>\n\n   <span class=\"token comment\">//array 到 json str</span>\n   arr <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"python\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"golang\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"base\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"peach\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pear\"</span><span class=\"token punctuation\">&#125;</span>\n   lang<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">Marshal</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">if</span> err <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n      fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"================array 到 json str==\"</span><span class=\"token punctuation\">)</span>\n      fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span>lang<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n\n   <span class=\"token comment\">//json 到 []string</span>\n   <span class=\"token keyword\">var</span> wo <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span>\n   <span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">Unmarshal</span><span class=\"token punctuation\">(</span>lang<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>wo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n      fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"================json 到 []string==\"</span><span class=\"token punctuation\">)</span>\n      fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>wo<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}},"cover":false,"excerpt":"<h1 id=\"golang-字符串、json、map之间的转换\"><a href=\"#golang-字符串、json、map之间的转换\" class=\"headerlink\" title=\"golang 字符串、json、map之间的转换\"></a>golang 字符串、json、map之间的转换</h1>","more":"<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n<span class=\"token string\">\"encoding/json\"</span>\n<span class=\"token string\">\"fmt\"</span>\n<span class=\"token string\">\"os\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">type</span> ConfigStruct <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n   Host              <span class=\"token builtin\">string</span>   <span class=\"token string\">`json:\"host\"`</span>\n   Port              <span class=\"token builtin\">int</span>      <span class=\"token string\">`json:\"port\"`</span>\n   AnalyticsFile     <span class=\"token builtin\">string</span>   <span class=\"token string\">`json:\"analytics_file\"`</span>\n   StaticFileVersion <span class=\"token builtin\">int</span>      <span class=\"token string\">`json:\"static_file_version\"`</span>\n   StaticDir         <span class=\"token builtin\">string</span>   <span class=\"token string\">`json:\"static_dir\"`</span>\n   TemplatesDir      <span class=\"token builtin\">string</span>   <span class=\"token string\">`json:\"templates_dir\"`</span>\n   SerTcpSocketHost  <span class=\"token builtin\">string</span>   <span class=\"token string\">`json:\"serTcpSocketHost\"`</span>\n   SerTcpSocketPort  <span class=\"token builtin\">int</span>      <span class=\"token string\">`json:\"serTcpSocketPort\"`</span>\n   Fruits            <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span> <span class=\"token string\">`json:\"fruits\"`</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">type</span> Other <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n   SerTcpSocketHost <span class=\"token builtin\">string</span>   <span class=\"token string\">`json:\"serTcpSocketHost\"`</span>\n   SerTcpSocketPort <span class=\"token builtin\">int</span>      <span class=\"token string\">`json:\"serTcpSocketPort\"`</span>\n   Fruits           <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span> <span class=\"token string\">`json:\"fruits\"`</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   jsonStr <span class=\"token operator\">:=</span> <span class=\"token string\">`&#123;\"host\": \"http://localhost:9090\",\"port\": 9090,\"analytics_file\": \"\",\"static_file_version\": 1,\"static_dir\": \"E:/Project/goTest/src/\",\"templates_dir\": \"E:/Project/goTest/src/templates/\",\"serTcpSocketHost\": \":12340\",\"serTcpSocketPort\": 12340,\"fruits\": [\"apple\", \"peach\"]&#125;`</span>\n\n   <span class=\"token comment\">//json str 转map</span>\n   <span class=\"token keyword\">var</span> dat <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n   <span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">Unmarshal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span>jsonStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>dat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n      fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"==============json str 转map=======================\"</span><span class=\"token punctuation\">)</span>\n      fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>dat<span class=\"token punctuation\">)</span>\n      fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>dat<span class=\"token punctuation\">[</span><span class=\"token string\">\"host\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n\n   <span class=\"token comment\">//json str 转struct</span>\n   <span class=\"token keyword\">var</span> config ConfigStruct\n   <span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">Unmarshal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span>jsonStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n      fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"================json str 转struct==\"</span><span class=\"token punctuation\">)</span>\n      fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span>\n      fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>Host<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n\n   <span class=\"token comment\">//json str 转struct(部份字段)</span>\n   <span class=\"token keyword\">var</span> part Other\n   <span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">Unmarshal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span>jsonStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>part<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n      fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"================json str 转struct==\"</span><span class=\"token punctuation\">)</span>\n      fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>part<span class=\"token punctuation\">)</span>\n      fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>part<span class=\"token punctuation\">.</span>SerTcpSocketPort<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n\n   <span class=\"token comment\">//struct 到json str</span>\n   <span class=\"token keyword\">if</span> b<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">Marshal</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n      fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"================struct 到json str==\"</span><span class=\"token punctuation\">)</span>\n      fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n\n   <span class=\"token comment\">//map 到json str</span>\n   fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"================map 到json str=====================\"</span><span class=\"token punctuation\">)</span>\n   enc <span class=\"token operator\">:=</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">NewEncoder</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>Stdout<span class=\"token punctuation\">)</span>\n   enc<span class=\"token punctuation\">.</span><span class=\"token function\">Encode</span><span class=\"token punctuation\">(</span>dat<span class=\"token punctuation\">)</span>\n\n   <span class=\"token comment\">//array 到 json str</span>\n   arr <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"python\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"golang\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"base\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"peach\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pear\"</span><span class=\"token punctuation\">&#125;</span>\n   lang<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">Marshal</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">if</span> err <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n      fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"================array 到 json str==\"</span><span class=\"token punctuation\">)</span>\n      fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span>lang<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n\n   <span class=\"token comment\">//json 到 []string</span>\n   <span class=\"token keyword\">var</span> wo <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span>\n   <span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">Unmarshal</span><span class=\"token punctuation\">(</span>lang<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>wo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n      fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"================json 到 []string==\"</span><span class=\"token punctuation\">)</span>\n      fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>wo<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>"},{"title":"golang cmd命令执行","url":"/archives/golangcmd-ming-ling-zhi-xing","description":"golang执行cmd命令.demo","abbrlink":"48709b05","date":"2022-03-01T02:12:39.000Z","updated":"2022-03-01T02:12:39.000Z","_content":"\n\n1.golang cmd命令执行\n（１．）执行命令并获取执行结果\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"os/exec\"\n)\n\nfunc main() {\n\t// 通过exec.Command函数执行命令或者shell\n\t// 第一个参数是命令路径，当然如果PATH路径可以搜索到命令，可以不用输入完整的路径\n\t// 第二到第N个参数是命令的参数\n\t// 下面语句等价于执行命令: ls -l /var/\n\tcmd := exec.Command(\"/bin/ls\", \"-l\", \"/var/\")\n\t// 执行命令，并返回结果\n\toutput,err := cmd.Output()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\t// 因为结果是字节数组，需要转换成string\n\tfmt.Println(string(output))\n\n}\n```\n（２．）执行命令不返回结果\n```go\npackage main\n\nimport (\n\t\"os/exec\"\n)\n\nfunc main() {\n\tcmd := exec.Command(\"/bin/ls\", \"-l\", \"/var/\")\n\t// 执行命令，返回命令是否执行成功\n\terr := cmd.Run()\n\t\n\tif err != nil {\n\t\t// 命令执行失败\n\t\tpanic(err)\n\t}\n}\n```\n","source":"_posts/golang执行cmd命令.md","raw":"---\ntitle: golang cmd命令执行\nurl: /archives/golangcmd-ming-ling-zhi-xing\ndescription: golang执行cmd命令.demo\ncategories:\n  - golang\ntags:\n  - golang\n  - cmd\nabbrlink: 48709b05\ndate: 2022-03-01 10:12:39\nupdated: 2022-03-01 10:12:39\n---\n\n\n1.golang cmd命令执行\n（１．）执行命令并获取执行结果\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"os/exec\"\n)\n\nfunc main() {\n\t// 通过exec.Command函数执行命令或者shell\n\t// 第一个参数是命令路径，当然如果PATH路径可以搜索到命令，可以不用输入完整的路径\n\t// 第二到第N个参数是命令的参数\n\t// 下面语句等价于执行命令: ls -l /var/\n\tcmd := exec.Command(\"/bin/ls\", \"-l\", \"/var/\")\n\t// 执行命令，并返回结果\n\toutput,err := cmd.Output()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\t// 因为结果是字节数组，需要转换成string\n\tfmt.Println(string(output))\n\n}\n```\n（２．）执行命令不返回结果\n```go\npackage main\n\nimport (\n\t\"os/exec\"\n)\n\nfunc main() {\n\tcmd := exec.Command(\"/bin/ls\", \"-l\", \"/var/\")\n\t// 执行命令，返回命令是否执行成功\n\terr := cmd.Run()\n\t\n\tif err != nil {\n\t\t// 命令执行失败\n\t\tpanic(err)\n\t}\n}\n```\n","slug":"golang执行cmd命令","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clh95h7k9001ygwuv7uyk6cff","content":"<p>1.golang cmd命令执行<br>（１．）执行命令并获取执行结果</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"os/exec\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// 通过exec.Command函数执行命令或者shell</span>\n\t<span class=\"token comment\">// 第一个参数是命令路径，当然如果PATH路径可以搜索到命令，可以不用输入完整的路径</span>\n\t<span class=\"token comment\">// 第二到第N个参数是命令的参数</span>\n\t<span class=\"token comment\">// 下面语句等价于执行命令: ls -l /var/</span>\n\tcmd <span class=\"token operator\">:=</span> exec<span class=\"token punctuation\">.</span><span class=\"token function\">Command</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/bin/ls\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-l\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/var/\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// 执行命令，并返回结果</span>\n\toutput<span class=\"token punctuation\">,</span>err <span class=\"token operator\">:=</span> cmd<span class=\"token punctuation\">.</span><span class=\"token function\">Output</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// 因为结果是字节数组，需要转换成string</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>（２．）执行命令不返回结果</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"os/exec\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tcmd <span class=\"token operator\">:=</span> exec<span class=\"token punctuation\">.</span><span class=\"token function\">Command</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/bin/ls\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-l\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/var/\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// 执行命令，返回命令是否执行成功</span>\n\terr <span class=\"token operator\">:=</span> cmd<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// 命令执行失败</span>\n\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}},"cover":false,"excerpt":"","more":"<p>1.golang cmd命令执行<br>（１．）执行命令并获取执行结果</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"os/exec\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// 通过exec.Command函数执行命令或者shell</span>\n\t<span class=\"token comment\">// 第一个参数是命令路径，当然如果PATH路径可以搜索到命令，可以不用输入完整的路径</span>\n\t<span class=\"token comment\">// 第二到第N个参数是命令的参数</span>\n\t<span class=\"token comment\">// 下面语句等价于执行命令: ls -l /var/</span>\n\tcmd <span class=\"token operator\">:=</span> exec<span class=\"token punctuation\">.</span><span class=\"token function\">Command</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/bin/ls\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-l\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/var/\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// 执行命令，并返回结果</span>\n\toutput<span class=\"token punctuation\">,</span>err <span class=\"token operator\">:=</span> cmd<span class=\"token punctuation\">.</span><span class=\"token function\">Output</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// 因为结果是字节数组，需要转换成string</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>（２．）执行命令不返回结果</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"os/exec\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tcmd <span class=\"token operator\">:=</span> exec<span class=\"token punctuation\">.</span><span class=\"token function\">Command</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/bin/ls\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-l\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/var/\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// 执行命令，返回命令是否执行成功</span>\n\terr <span class=\"token operator\">:=</span> cmd<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// 命令执行失败</span>\n\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"golang 换行读写","url":"/archives/golanghuan-xing-du-xie","description":"golang换行读写示例代码","abbrlink":"f906baad","date":"2022-03-02T08:19:40.000Z","updated":"2022-03-02T08:19:40.000Z","_content":"\n```go\npackage utils\n\nimport (\n\t\"bufio\"\n\t\"bytes\"\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n\t\"strings\"\n)\nfunc ReadLines(path string) (lines []string, err error) {\n\tvar (\n\t\tfile   *os.File\n\t\tpart   []byte\n\t\tprefix bool\n\t)\n\n\tif file, err = os.Open(path); err != nil {\n\t\treturn\n\t}\n\n\treader := bufio.NewReader(file)\n\tbuffer := bytes.NewBuffer(make([]byte, 1024))\n\n\tfor {\n\t\tif part, prefix, err = reader.ReadLine(); err != nil {\n\t\t\tbreak\n\t\t}\n\t\tbuffer.Write(part)\n\t\tif !prefix {\n\t\t\tlines = append(lines, buffer.String())\n\t\t\tbuffer.Reset()\n\t\t}\n\t}\n\tif err == io.EOF {\n\t\terr = nil\n\t}\n\treturn\n}\n\nfunc WriteLines(lines []string, path string) (err error) {\n\tvar file *os.File\n\n\tif file, err = os.Create(path); err != nil {\n\t\treturn\n\t}\n\n\tdefer file.Close()\n\n\tfor _, elem := range lines {\n\t\t_, err := file.WriteString(strings.TrimSpace(elem) + \"\\n\")\n\t\tif err != nil {\n\t\t\tfmt.Println(err)\n\t\t\tbreak\n\t\t}\n\t}\n\treturn\n}\n```\n","source":"_posts/golang换行读写.md","raw":"---\ntitle: golang 换行读写\nurl: /archives/golanghuan-xing-du-xie\ndescription: golang换行读写示例代码\ncategories:\n  - golang\ntags:\n  - golang\nabbrlink: f906baad\ndate: 2022-03-02 16:19:40\nupdated: 2022-03-02 16:19:40\n---\n\n```go\npackage utils\n\nimport (\n\t\"bufio\"\n\t\"bytes\"\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n\t\"strings\"\n)\nfunc ReadLines(path string) (lines []string, err error) {\n\tvar (\n\t\tfile   *os.File\n\t\tpart   []byte\n\t\tprefix bool\n\t)\n\n\tif file, err = os.Open(path); err != nil {\n\t\treturn\n\t}\n\n\treader := bufio.NewReader(file)\n\tbuffer := bytes.NewBuffer(make([]byte, 1024))\n\n\tfor {\n\t\tif part, prefix, err = reader.ReadLine(); err != nil {\n\t\t\tbreak\n\t\t}\n\t\tbuffer.Write(part)\n\t\tif !prefix {\n\t\t\tlines = append(lines, buffer.String())\n\t\t\tbuffer.Reset()\n\t\t}\n\t}\n\tif err == io.EOF {\n\t\terr = nil\n\t}\n\treturn\n}\n\nfunc WriteLines(lines []string, path string) (err error) {\n\tvar file *os.File\n\n\tif file, err = os.Create(path); err != nil {\n\t\treturn\n\t}\n\n\tdefer file.Close()\n\n\tfor _, elem := range lines {\n\t\t_, err := file.WriteString(strings.TrimSpace(elem) + \"\\n\")\n\t\tif err != nil {\n\t\t\tfmt.Println(err)\n\t\t\tbreak\n\t\t}\n\t}\n\treturn\n}\n```\n","slug":"golang换行读写","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clh95h7ka0021gwuv6wd8gh85","content":"<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> utils\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"bufio\"</span>\n\t<span class=\"token string\">\"bytes\"</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"io\"</span>\n\t<span class=\"token string\">\"os\"</span>\n\t<span class=\"token string\">\"strings\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">ReadLines</span><span class=\"token punctuation\">(</span>path <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>lines <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">var</span> <span class=\"token punctuation\">(</span>\n\t\tfile   <span class=\"token operator\">*</span>os<span class=\"token punctuation\">.</span>File\n\t\tpart   <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span>\n\t\tprefix <span class=\"token builtin\">bool</span>\n\t<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">if</span> file<span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">Open</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\treader <span class=\"token operator\">:=</span> bufio<span class=\"token punctuation\">.</span><span class=\"token function\">NewReader</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span>\n\tbuffer <span class=\"token operator\">:=</span> bytes<span class=\"token punctuation\">.</span><span class=\"token function\">NewBuffer</span><span class=\"token punctuation\">(</span><span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span> part<span class=\"token punctuation\">,</span> prefix<span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> reader<span class=\"token punctuation\">.</span><span class=\"token function\">ReadLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">break</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\tbuffer<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span>part<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>prefix <span class=\"token punctuation\">&#123;</span>\n\t\t\tlines <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>lines<span class=\"token punctuation\">,</span> buffer<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\tbuffer<span class=\"token punctuation\">.</span><span class=\"token function\">Reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">==</span> io<span class=\"token punctuation\">.</span>EOF <span class=\"token punctuation\">&#123;</span>\n\t\terr <span class=\"token operator\">=</span> <span class=\"token boolean\">nil</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">WriteLines</span><span class=\"token punctuation\">(</span>lines <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> path <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">var</span> file <span class=\"token operator\">*</span>os<span class=\"token punctuation\">.</span>File\n\n\t<span class=\"token keyword\">if</span> file<span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token keyword\">defer</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> elem <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> lines <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">WriteString</span><span class=\"token punctuation\">(</span>strings<span class=\"token punctuation\">.</span><span class=\"token function\">TrimSpace</span><span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">break</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}},"cover":false,"excerpt":"","more":"<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> utils\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"bufio\"</span>\n\t<span class=\"token string\">\"bytes\"</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"io\"</span>\n\t<span class=\"token string\">\"os\"</span>\n\t<span class=\"token string\">\"strings\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">ReadLines</span><span class=\"token punctuation\">(</span>path <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>lines <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">var</span> <span class=\"token punctuation\">(</span>\n\t\tfile   <span class=\"token operator\">*</span>os<span class=\"token punctuation\">.</span>File\n\t\tpart   <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span>\n\t\tprefix <span class=\"token builtin\">bool</span>\n\t<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">if</span> file<span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">Open</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\treader <span class=\"token operator\">:=</span> bufio<span class=\"token punctuation\">.</span><span class=\"token function\">NewReader</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span>\n\tbuffer <span class=\"token operator\">:=</span> bytes<span class=\"token punctuation\">.</span><span class=\"token function\">NewBuffer</span><span class=\"token punctuation\">(</span><span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span> part<span class=\"token punctuation\">,</span> prefix<span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> reader<span class=\"token punctuation\">.</span><span class=\"token function\">ReadLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">break</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\tbuffer<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span>part<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>prefix <span class=\"token punctuation\">&#123;</span>\n\t\t\tlines <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>lines<span class=\"token punctuation\">,</span> buffer<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\tbuffer<span class=\"token punctuation\">.</span><span class=\"token function\">Reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">==</span> io<span class=\"token punctuation\">.</span>EOF <span class=\"token punctuation\">&#123;</span>\n\t\terr <span class=\"token operator\">=</span> <span class=\"token boolean\">nil</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">WriteLines</span><span class=\"token punctuation\">(</span>lines <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> path <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">var</span> file <span class=\"token operator\">*</span>os<span class=\"token punctuation\">.</span>File\n\n\t<span class=\"token keyword\">if</span> file<span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token keyword\">defer</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> elem <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> lines <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">WriteString</span><span class=\"token punctuation\">(</span>strings<span class=\"token punctuation\">.</span><span class=\"token function\">TrimSpace</span><span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">break</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"golang 操作redis","url":"/archives/golangcao-zuo-redis","abbrlink":"7e553d6e","date":"2022-02-21T04:29:11.000Z","updated":"2022-02-21T04:54:07.000Z","_content":"golang操作redis库\n<!--more-->\n```go\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/go-redis/redis/v8\"\n\t\"log\"\n)\n\nvar rdb *redis.Client\n\nfunc main() {\n\tOpenDB()\n\tSetKeyValue(\"key\", \"value\")\n\tv1, err := GetValueByValue(\"key\")\n\tif err != nil {\n\t\tlog.Fatal(err.Error())\n\t}\n\tfmt.Println(\"v1:\", v1)\n\n\tv2, err := GetValueByValue(\"key\")\n\tif err != nil {\n\t\tlog.Fatal(err.Error())\n\t}\n\tfmt.Println(\"v2:\", v2)\n}\nfunc OpenDB() {\n\trdb = redis.NewClient(&redis.Options{\n\t\tAddr:     \"localhost:6379\",\n\t\tPassword: \"\", // no password set\n\t\tDB:       0,  // use default DB\n\t})\n\n}\nfunc SetKeyValue(key, value string) {\n\terr := rdb.Set(context.Background(), key, value, 0).Err()\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\nfunc GetValueByValue(key string) (string, error) {\n\tv, err := rdb.Get(context.Background(), key).Result()\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t\treturn \"\", err\n\t}\n\treturn v, nil\n}\n\n\n```\n","source":"_posts/golang操作redis.md","raw":"---\ntitle: golang 操作redis\nurl: /archives/golangcao-zuo-redis\ncategories:\n  - golang\ntags:\n  - golang\n  - redis\nabbrlink: 7e553d6e\ndate: 2022-02-21 12:29:11\nupdated: 2022-02-21 12:54:07\n---\ngolang操作redis库\n<!--more-->\n```go\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/go-redis/redis/v8\"\n\t\"log\"\n)\n\nvar rdb *redis.Client\n\nfunc main() {\n\tOpenDB()\n\tSetKeyValue(\"key\", \"value\")\n\tv1, err := GetValueByValue(\"key\")\n\tif err != nil {\n\t\tlog.Fatal(err.Error())\n\t}\n\tfmt.Println(\"v1:\", v1)\n\n\tv2, err := GetValueByValue(\"key\")\n\tif err != nil {\n\t\tlog.Fatal(err.Error())\n\t}\n\tfmt.Println(\"v2:\", v2)\n}\nfunc OpenDB() {\n\trdb = redis.NewClient(&redis.Options{\n\t\tAddr:     \"localhost:6379\",\n\t\tPassword: \"\", // no password set\n\t\tDB:       0,  // use default DB\n\t})\n\n}\nfunc SetKeyValue(key, value string) {\n\terr := rdb.Set(context.Background(), key, value, 0).Err()\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\nfunc GetValueByValue(key string) (string, error) {\n\tv, err := rdb.Get(context.Background(), key).Result()\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t\treturn \"\", err\n\t}\n\treturn v, nil\n}\n\n\n```\n","slug":"golang操作redis","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clh95h7kc0025gwuv2mou02u7","content":"<p>golang操作redis库</p>\n<span id=\"more\"></span>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"context\"</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"github.com/go-redis/redis/v8\"</span>\n\t<span class=\"token string\">\"log\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">var</span> rdb <span class=\"token operator\">*</span>redis<span class=\"token punctuation\">.</span>Client\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">OpenDB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">SetKeyValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"value\"</span><span class=\"token punctuation\">)</span>\n\tv1<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> <span class=\"token function\">GetValueByValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"v1:\"</span><span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">)</span>\n\n\tv2<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> <span class=\"token function\">GetValueByValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"v2:\"</span><span class=\"token punctuation\">,</span> v2<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">OpenDB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\trdb <span class=\"token operator\">=</span> redis<span class=\"token punctuation\">.</span><span class=\"token function\">NewClient</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>redis<span class=\"token punctuation\">.</span>Options<span class=\"token punctuation\">&#123;</span>\n\t\tAddr<span class=\"token punctuation\">:</span>     <span class=\"token string\">\"localhost:6379\"</span><span class=\"token punctuation\">,</span>\n\t\tPassword<span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// no password set</span>\n\t\tDB<span class=\"token punctuation\">:</span>       <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// use default DB</span>\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">SetKeyValue</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\terr <span class=\"token operator\">:=</span> rdb<span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">Background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Err</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">GetValueByValue</span><span class=\"token punctuation\">(</span>key <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tv<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> rdb<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">Background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Result</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> err\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> v<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}},"cover":false,"excerpt":"<p>golang操作redis库</p>","more":"<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"context\"</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"github.com/go-redis/redis/v8\"</span>\n\t<span class=\"token string\">\"log\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">var</span> rdb <span class=\"token operator\">*</span>redis<span class=\"token punctuation\">.</span>Client\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">OpenDB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">SetKeyValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"value\"</span><span class=\"token punctuation\">)</span>\n\tv1<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> <span class=\"token function\">GetValueByValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"v1:\"</span><span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">)</span>\n\n\tv2<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> <span class=\"token function\">GetValueByValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"v2:\"</span><span class=\"token punctuation\">,</span> v2<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">OpenDB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\trdb <span class=\"token operator\">=</span> redis<span class=\"token punctuation\">.</span><span class=\"token function\">NewClient</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>redis<span class=\"token punctuation\">.</span>Options<span class=\"token punctuation\">&#123;</span>\n\t\tAddr<span class=\"token punctuation\">:</span>     <span class=\"token string\">\"localhost:6379\"</span><span class=\"token punctuation\">,</span>\n\t\tPassword<span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// no password set</span>\n\t\tDB<span class=\"token punctuation\">:</span>       <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// use default DB</span>\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">SetKeyValue</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\terr <span class=\"token operator\">:=</span> rdb<span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">Background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Err</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">GetValueByValue</span><span class=\"token punctuation\">(</span>key <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tv<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> rdb<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">Background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Result</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> err\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> v<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>"},{"title":"golang 用两个栈实现队列","url":"/archives/golangyong-liang-ge-zhan-shi-xian-dui-lie","description":"golang用栈实现队列代码","abbrlink":"26cc78f7","date":"2022-03-15T03:09:43.000Z","updated":"2022-03-15T03:09:43.000Z","_content":"\n```go\npackage main\n\n\nimport (\n\t\"container/list\"\n\t\"fmt\"\n)\n\nfunc main() {\n\tc := Constructor()\n\tc.AppendTail(3)\n\te := c.DeleteHead()\n\tfmt.Println(e)\n\te = c.DeleteHead()\n\tfmt.Println(e)\n\te = c.DeleteHead()\n\tfmt.Println(e)\n}\n\ntype CQueue struct {\n\tstack1, stack2 *list.List\n}\n\nfunc Constructor() CQueue {\n\treturn CQueue{\n\t\tstack1: list.New(),\n\t\tstack2: list.New(),\n\t}\n}\n\nfunc (this *CQueue) AppendTail(value int) {\n\tthis.stack1.PushBack(value)\n}\n\nfunc (this *CQueue) DeleteHead() int {\n\tif this.stack2.Len() == 0 {\n\t\tfor this.stack1.Len() > 0 {\n\t\t\tthis.stack2.PushBack(this.stack1.Remove(this.stack1.Back()))\n\t\t}\n\t}\n\tif this.stack2.Len() != 0 {\n\t\treturn this.stack2.Remove(this.stack2.Back()).(int)\n\t}\n\treturn -1\n}\n\n/**\n* Your CQueue object will be instantiated and called as such:\n* obj := Constructor();\n* obj.AppendTail(value);\n* param_2 := obj.DeleteHead();\n*/\n```\n","source":"_posts/golang用两个栈实现队列.md","raw":"---\ntitle: golang 用两个栈实现队列\nurl: /archives/golangyong-liang-ge-zhan-shi-xian-dui-lie\ndescription: golang用栈实现队列代码\ncategories:\n  - golang\ntags:\n  - golang\nabbrlink: 26cc78f7\ndate: 2022-03-15 11:09:43\nupdated: 2022-03-15 11:09:43\n---\n\n```go\npackage main\n\n\nimport (\n\t\"container/list\"\n\t\"fmt\"\n)\n\nfunc main() {\n\tc := Constructor()\n\tc.AppendTail(3)\n\te := c.DeleteHead()\n\tfmt.Println(e)\n\te = c.DeleteHead()\n\tfmt.Println(e)\n\te = c.DeleteHead()\n\tfmt.Println(e)\n}\n\ntype CQueue struct {\n\tstack1, stack2 *list.List\n}\n\nfunc Constructor() CQueue {\n\treturn CQueue{\n\t\tstack1: list.New(),\n\t\tstack2: list.New(),\n\t}\n}\n\nfunc (this *CQueue) AppendTail(value int) {\n\tthis.stack1.PushBack(value)\n}\n\nfunc (this *CQueue) DeleteHead() int {\n\tif this.stack2.Len() == 0 {\n\t\tfor this.stack1.Len() > 0 {\n\t\t\tthis.stack2.PushBack(this.stack1.Remove(this.stack1.Back()))\n\t\t}\n\t}\n\tif this.stack2.Len() != 0 {\n\t\treturn this.stack2.Remove(this.stack2.Back()).(int)\n\t}\n\treturn -1\n}\n\n/**\n* Your CQueue object will be instantiated and called as such:\n* obj := Constructor();\n* obj.AppendTail(value);\n* param_2 := obj.DeleteHead();\n*/\n```\n","slug":"golang用两个栈实现队列","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clh95h7kd0028gwuv7i62hyu1","content":"<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"container/list\"</span>\n\t<span class=\"token string\">\"fmt\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tc <span class=\"token operator\">:=</span> <span class=\"token function\">Constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tc<span class=\"token punctuation\">.</span><span class=\"token function\">AppendTail</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\te <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">DeleteHead</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n\te <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">DeleteHead</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n\te <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">DeleteHead</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">type</span> CQueue <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\tstack1<span class=\"token punctuation\">,</span> stack2 <span class=\"token operator\">*</span>list<span class=\"token punctuation\">.</span>List\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">Constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> CQueue <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> CQueue<span class=\"token punctuation\">&#123;</span>\n\t\tstack1<span class=\"token punctuation\">:</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\tstack2<span class=\"token punctuation\">:</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>this <span class=\"token operator\">*</span>CQueue<span class=\"token punctuation\">)</span> <span class=\"token function\">AppendTail</span><span class=\"token punctuation\">(</span>value <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tthis<span class=\"token punctuation\">.</span>stack1<span class=\"token punctuation\">.</span><span class=\"token function\">PushBack</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>this <span class=\"token operator\">*</span>CQueue<span class=\"token punctuation\">)</span> <span class=\"token function\">DeleteHead</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> this<span class=\"token punctuation\">.</span>stack2<span class=\"token punctuation\">.</span><span class=\"token function\">Len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">for</span> this<span class=\"token punctuation\">.</span>stack1<span class=\"token punctuation\">.</span><span class=\"token function\">Len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\tthis<span class=\"token punctuation\">.</span>stack2<span class=\"token punctuation\">.</span><span class=\"token function\">PushBack</span><span class=\"token punctuation\">(</span>this<span class=\"token punctuation\">.</span>stack1<span class=\"token punctuation\">.</span><span class=\"token function\">Remove</span><span class=\"token punctuation\">(</span>this<span class=\"token punctuation\">.</span>stack1<span class=\"token punctuation\">.</span><span class=\"token function\">Back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">if</span> this<span class=\"token punctuation\">.</span>stack2<span class=\"token punctuation\">.</span><span class=\"token function\">Len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> this<span class=\"token punctuation\">.</span>stack2<span class=\"token punctuation\">.</span><span class=\"token function\">Remove</span><span class=\"token punctuation\">(</span>this<span class=\"token punctuation\">.</span>stack2<span class=\"token punctuation\">.</span><span class=\"token function\">Back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">/**\n* Your CQueue object will be instantiated and called as such:\n* obj := Constructor();\n* obj.AppendTail(value);\n* param_2 := obj.DeleteHead();\n*/</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}},"cover":false,"excerpt":"","more":"<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"container/list\"</span>\n\t<span class=\"token string\">\"fmt\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tc <span class=\"token operator\">:=</span> <span class=\"token function\">Constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tc<span class=\"token punctuation\">.</span><span class=\"token function\">AppendTail</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\te <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">DeleteHead</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n\te <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">DeleteHead</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n\te <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">DeleteHead</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">type</span> CQueue <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\tstack1<span class=\"token punctuation\">,</span> stack2 <span class=\"token operator\">*</span>list<span class=\"token punctuation\">.</span>List\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">Constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> CQueue <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> CQueue<span class=\"token punctuation\">&#123;</span>\n\t\tstack1<span class=\"token punctuation\">:</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\tstack2<span class=\"token punctuation\">:</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>this <span class=\"token operator\">*</span>CQueue<span class=\"token punctuation\">)</span> <span class=\"token function\">AppendTail</span><span class=\"token punctuation\">(</span>value <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tthis<span class=\"token punctuation\">.</span>stack1<span class=\"token punctuation\">.</span><span class=\"token function\">PushBack</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>this <span class=\"token operator\">*</span>CQueue<span class=\"token punctuation\">)</span> <span class=\"token function\">DeleteHead</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> this<span class=\"token punctuation\">.</span>stack2<span class=\"token punctuation\">.</span><span class=\"token function\">Len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">for</span> this<span class=\"token punctuation\">.</span>stack1<span class=\"token punctuation\">.</span><span class=\"token function\">Len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\tthis<span class=\"token punctuation\">.</span>stack2<span class=\"token punctuation\">.</span><span class=\"token function\">PushBack</span><span class=\"token punctuation\">(</span>this<span class=\"token punctuation\">.</span>stack1<span class=\"token punctuation\">.</span><span class=\"token function\">Remove</span><span class=\"token punctuation\">(</span>this<span class=\"token punctuation\">.</span>stack1<span class=\"token punctuation\">.</span><span class=\"token function\">Back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">if</span> this<span class=\"token punctuation\">.</span>stack2<span class=\"token punctuation\">.</span><span class=\"token function\">Len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> this<span class=\"token punctuation\">.</span>stack2<span class=\"token punctuation\">.</span><span class=\"token function\">Remove</span><span class=\"token punctuation\">(</span>this<span class=\"token punctuation\">.</span>stack2<span class=\"token punctuation\">.</span><span class=\"token function\">Back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">/**\n* Your CQueue object will be instantiated and called as such:\n* obj := Constructor();\n* obj.AppendTail(value);\n* param_2 := obj.DeleteHead();\n*/</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"abbrlink":"6a5d58b5","date":"2023-04-11T15:44:01.000Z","excerpt":"golang远程调试 第一步：安装go ```shell 下载go wget https://dl.google.com/go/go1.20.3.linux-amd64.tar.gz 解压 tar -xzf go1.20.3.linux-amd64.tar.gz 移动解压的目录到/usr/local/src目录下 mv go /usr/local/src 配置环境变量 export PATH=$P...","title":"golang远程调试","updated":"2023-04-25T16:05:08.000Z","url":"/archives/golang-remote-debug","_content":"# golang远程调试\n\n## 第一步：安装go\n\n```shell\n#下载go\nwget https://dl.google.com/go/go1.20.3.linux-amd64.tar.gz\n#解压\ntar -xzf go1.20.3.linux-amd64.tar.gz\n#移动解压的目录到/usr/local/src目录下\nmv go /usr/local/src\n#配置环境变量\nexport PATH=$PATH:/usr/local/src/go/bin\n#使profile配置立即生效\nsource /etc/profile\n#查看go版本\ngo version\n#若显示 go version go1.20.3 linux/amd64 则成功\n# 查看环境变量\ngo env \n#设置 goproxy\ngo env -w GOPROXY=https://goproxy.io,direct\n```\n\n## 第二步：安装dlv\n\n```shell\ngo install github.com/go-delve/delve/cmd/dlv@latest\n#移动dlv工具到bin目录下\nmv dlv /usr/local/src/go/bin\n```\n\n## 第三步 启动dlv 实例\n\n### 1、编译运行程序\n\n```shell\n#编译运行文件\ngo build -gcflags='all -N -l' main.go\n```\n\n- -N:禁止编译器优化\n- -l:关闭内联结\n\n### 2、dlv attach\n\n这个相当于gdb -p 或者 gdb attach ，即跟踪一个正在运行的程序。这中用法也是很常见，对于一个后台程序，它已经运行很久了，此时你需要查看程序内部的一些状态，只能借助attach.\n\n```shell\ndlv attach --headless --listen \":2345\" --log --api-version 2  4977 ## 后面的进程的ID\n```\n\n### 3、dlv直接运行\n\n```shell\n dlv --listen=:2345 --headless=true --api-version=2 --accept-multiclient exec ./main\n```\n\n## goland 远程调试\n\n打开goland配置 选择go remote 填写服务器地址和端口\n\n![http://img.carrotvegeta.icu/blog/2023-4-04a0eafad3b9f3430e02fd50cf4afb26.jpg](http://img.carrotvegeta.icu/blog/2023-4-04a0eafad3b9f3430e02fd50cf4afb26.jpg)\n","source":"_posts/golang远程调试.md","raw":"---\nabbrlink: 6a5d58b5\ncategories:\n  - golang\ndate: '2023-04-11 23:44:01'\nexcerpt: >-\n  golang远程调试 第一步：安装go ```shell 下载go wget\n  https://dl.google.com/go/go1.20.3.linux-amd64.tar.gz 解压 tar -xzf\n  go1.20.3.linux-amd64.tar.gz 移动解压的目录到/usr/local/src目录下 mv go /usr/local/src\n  配置环境变量 export PATH=$P...\ntags:\n  - golang\ntitle: golang远程调试\nupdated: 'Tue, 25 Apr 2023 16:05:08 GMT'\nurl: /archives/golang-remote-debug\n---\n# golang远程调试\n\n## 第一步：安装go\n\n```shell\n#下载go\nwget https://dl.google.com/go/go1.20.3.linux-amd64.tar.gz\n#解压\ntar -xzf go1.20.3.linux-amd64.tar.gz\n#移动解压的目录到/usr/local/src目录下\nmv go /usr/local/src\n#配置环境变量\nexport PATH=$PATH:/usr/local/src/go/bin\n#使profile配置立即生效\nsource /etc/profile\n#查看go版本\ngo version\n#若显示 go version go1.20.3 linux/amd64 则成功\n# 查看环境变量\ngo env \n#设置 goproxy\ngo env -w GOPROXY=https://goproxy.io,direct\n```\n\n## 第二步：安装dlv\n\n```shell\ngo install github.com/go-delve/delve/cmd/dlv@latest\n#移动dlv工具到bin目录下\nmv dlv /usr/local/src/go/bin\n```\n\n## 第三步 启动dlv 实例\n\n### 1、编译运行程序\n\n```shell\n#编译运行文件\ngo build -gcflags='all -N -l' main.go\n```\n\n- -N:禁止编译器优化\n- -l:关闭内联结\n\n### 2、dlv attach\n\n这个相当于gdb -p 或者 gdb attach ，即跟踪一个正在运行的程序。这中用法也是很常见，对于一个后台程序，它已经运行很久了，此时你需要查看程序内部的一些状态，只能借助attach.\n\n```shell\ndlv attach --headless --listen \":2345\" --log --api-version 2  4977 ## 后面的进程的ID\n```\n\n### 3、dlv直接运行\n\n```shell\n dlv --listen=:2345 --headless=true --api-version=2 --accept-multiclient exec ./main\n```\n\n## goland 远程调试\n\n打开goland配置 选择go remote 填写服务器地址和端口\n\n![http://img.carrotvegeta.icu/blog/2023-4-04a0eafad3b9f3430e02fd50cf4afb26.jpg](http://img.carrotvegeta.icu/blog/2023-4-04a0eafad3b9f3430e02fd50cf4afb26.jpg)\n","slug":"golang远程调试","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clh95h7kg002dgwuvdjy7g763","content":"<h1 id=\"golang远程调试\"><a href=\"#golang远程调试\" class=\"headerlink\" title=\"golang远程调试\"></a>golang远程调试</h1><h2 id=\"第一步：安装go\"><a href=\"#第一步：安装go\" class=\"headerlink\" title=\"第一步：安装go\"></a>第一步：安装go</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#下载go</span>\n<span class=\"token function\">wget</span> https://dl.google.com/go/go1.20.3.linux-amd64.tar.gz\n<span class=\"token comment\">#解压</span>\n<span class=\"token function\">tar</span> -xzf go1.20.3.linux-amd64.tar.gz\n<span class=\"token comment\">#移动解压的目录到/usr/local/src目录下</span>\n<span class=\"token function\">mv</span> go /usr/local/src\n<span class=\"token comment\">#配置环境变量</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span><span class=\"token environment constant\">$PATH</span>:/usr/local/src/go/bin\n<span class=\"token comment\">#使profile配置立即生效</span>\n<span class=\"token builtin class-name\">source</span> /etc/profile\n<span class=\"token comment\">#查看go版本</span>\ngo version\n<span class=\"token comment\">#若显示 go version go1.20.3 linux/amd64 则成功</span>\n<span class=\"token comment\"># 查看环境变量</span>\ngo <span class=\"token function\">env</span> \n<span class=\"token comment\">#设置 goproxy</span>\ngo <span class=\"token function\">env</span> -w <span class=\"token assign-left variable\">GOPROXY</span><span class=\"token operator\">=</span>https://goproxy.io,direct<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"第二步：安装dlv\"><a href=\"#第二步：安装dlv\" class=\"headerlink\" title=\"第二步：安装dlv\"></a>第二步：安装dlv</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">go <span class=\"token function\">install</span> github.com/go-delve/delve/cmd/dlv@latest\n<span class=\"token comment\">#移动dlv工具到bin目录下</span>\n<span class=\"token function\">mv</span> dlv /usr/local/src/go/bin<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"第三步-启动dlv-实例\"><a href=\"#第三步-启动dlv-实例\" class=\"headerlink\" title=\"第三步 启动dlv 实例\"></a>第三步 启动dlv 实例</h2><h3 id=\"1、编译运行程序\"><a href=\"#1、编译运行程序\" class=\"headerlink\" title=\"1、编译运行程序\"></a>1、编译运行程序</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#编译运行文件</span>\ngo build -gcflags<span class=\"token operator\">=</span><span class=\"token string\">'all -N -l'</span> main.go<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<ul>\n<li>-N:禁止编译器优化</li>\n<li>-l:关闭内联结</li>\n</ul>\n<h3 id=\"2、dlv-attach\"><a href=\"#2、dlv-attach\" class=\"headerlink\" title=\"2、dlv attach\"></a>2、dlv attach</h3><p>这个相当于gdb -p 或者 gdb attach ，即跟踪一个正在运行的程序。这中用法也是很常见，对于一个后台程序，它已经运行很久了，此时你需要查看程序内部的一些状态，只能借助attach.</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">dlv attach --headless --listen <span class=\"token string\">\":2345\"</span> --log --api-version <span class=\"token number\">2</span>  <span class=\"token number\">4977</span> <span class=\"token comment\">## 后面的进程的ID</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"3、dlv直接运行\"><a href=\"#3、dlv直接运行\" class=\"headerlink\" title=\"3、dlv直接运行\"></a>3、dlv直接运行</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">dlv --listen<span class=\"token operator\">=</span>:2345 --headless<span class=\"token operator\">=</span>true --api-version<span class=\"token operator\">=</span><span class=\"token number\">2</span> --accept-multiclient <span class=\"token builtin class-name\">exec</span> ./main<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"goland-远程调试\"><a href=\"#goland-远程调试\" class=\"headerlink\" title=\"goland 远程调试\"></a>goland 远程调试</h2><p>打开goland配置 选择go remote 填写服务器地址和端口</p>\n<p><img src=\"http://img.carrotvegeta.icu/blog/2023-4-04a0eafad3b9f3430e02fd50cf4afb26.jpg\" alt=\"http://img.carrotvegeta.icu/blog/2023-4-04a0eafad3b9f3430e02fd50cf4afb26.jpg\"></p>\n","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}},"cover":false,"more":"<h1 id=\"golang远程调试\"><a href=\"#golang远程调试\" class=\"headerlink\" title=\"golang远程调试\"></a>golang远程调试</h1><h2 id=\"第一步：安装go\"><a href=\"#第一步：安装go\" class=\"headerlink\" title=\"第一步：安装go\"></a>第一步：安装go</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#下载go</span>\n<span class=\"token function\">wget</span> https://dl.google.com/go/go1.20.3.linux-amd64.tar.gz\n<span class=\"token comment\">#解压</span>\n<span class=\"token function\">tar</span> -xzf go1.20.3.linux-amd64.tar.gz\n<span class=\"token comment\">#移动解压的目录到/usr/local/src目录下</span>\n<span class=\"token function\">mv</span> go /usr/local/src\n<span class=\"token comment\">#配置环境变量</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span><span class=\"token environment constant\">$PATH</span>:/usr/local/src/go/bin\n<span class=\"token comment\">#使profile配置立即生效</span>\n<span class=\"token builtin class-name\">source</span> /etc/profile\n<span class=\"token comment\">#查看go版本</span>\ngo version\n<span class=\"token comment\">#若显示 go version go1.20.3 linux/amd64 则成功</span>\n<span class=\"token comment\"># 查看环境变量</span>\ngo <span class=\"token function\">env</span> \n<span class=\"token comment\">#设置 goproxy</span>\ngo <span class=\"token function\">env</span> -w <span class=\"token assign-left variable\">GOPROXY</span><span class=\"token operator\">=</span>https://goproxy.io,direct<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"第二步：安装dlv\"><a href=\"#第二步：安装dlv\" class=\"headerlink\" title=\"第二步：安装dlv\"></a>第二步：安装dlv</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">go <span class=\"token function\">install</span> github.com/go-delve/delve/cmd/dlv@latest\n<span class=\"token comment\">#移动dlv工具到bin目录下</span>\n<span class=\"token function\">mv</span> dlv /usr/local/src/go/bin<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"第三步-启动dlv-实例\"><a href=\"#第三步-启动dlv-实例\" class=\"headerlink\" title=\"第三步 启动dlv 实例\"></a>第三步 启动dlv 实例</h2><h3 id=\"1、编译运行程序\"><a href=\"#1、编译运行程序\" class=\"headerlink\" title=\"1、编译运行程序\"></a>1、编译运行程序</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#编译运行文件</span>\ngo build -gcflags<span class=\"token operator\">=</span><span class=\"token string\">'all -N -l'</span> main.go<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<ul>\n<li>-N:禁止编译器优化</li>\n<li>-l:关闭内联结</li>\n</ul>\n<h3 id=\"2、dlv-attach\"><a href=\"#2、dlv-attach\" class=\"headerlink\" title=\"2、dlv attach\"></a>2、dlv attach</h3><p>这个相当于gdb -p 或者 gdb attach ，即跟踪一个正在运行的程序。这中用法也是很常见，对于一个后台程序，它已经运行很久了，此时你需要查看程序内部的一些状态，只能借助attach.</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">dlv attach --headless --listen <span class=\"token string\">\":2345\"</span> --log --api-version <span class=\"token number\">2</span>  <span class=\"token number\">4977</span> <span class=\"token comment\">## 后面的进程的ID</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"3、dlv直接运行\"><a href=\"#3、dlv直接运行\" class=\"headerlink\" title=\"3、dlv直接运行\"></a>3、dlv直接运行</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">dlv --listen<span class=\"token operator\">=</span>:2345 --headless<span class=\"token operator\">=</span>true --api-version<span class=\"token operator\">=</span><span class=\"token number\">2</span> --accept-multiclient <span class=\"token builtin class-name\">exec</span> ./main<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"goland-远程调试\"><a href=\"#goland-远程调试\" class=\"headerlink\" title=\"goland 远程调试\"></a>goland 远程调试</h2><p>打开goland配置 选择go remote 填写服务器地址和端口</p>\n<p><img src=\"http://img.carrotvegeta.icu/blog/2023-4-04a0eafad3b9f3430e02fd50cf4afb26.jpg\" alt=\"http://img.carrotvegeta.icu/blog/2023-4-04a0eafad3b9f3430e02fd50cf4afb26.jpg\"></p>\n"},{"title":"golang私有仓库配置","abbrlink":"3098b0d8","date":"2022-08-23T07:19:20.000Z","updated":"2022-08-23T07:19:20.000Z","_content":"golang设置\n```golang\ngo env -w GOPRIVATE=\"gitlab.xxx.com/xxxx/*\"\n```\ngit设置\n```bash\ngit config --global url.\"git@gitlab.xxxx.com:\".insteadOf \"http://gitlab.xxxx.com/\"\n```\n","source":"_posts/golang私有仓库配置.md","raw":"---\ntitle: golang私有仓库配置\ncategories:\n  - golang\ntags:\n  - golang\nabbrlink: 3098b0d8\ndate: 2022-08-23 15:19:20\nupdated: 2022-08-23 15:19:20\n---\ngolang设置\n```golang\ngo env -w GOPRIVATE=\"gitlab.xxx.com/xxxx/*\"\n```\ngit设置\n```bash\ngit config --global url.\"git@gitlab.xxxx.com:\".insteadOf \"http://gitlab.xxxx.com/\"\n```\n","slug":"golang私有仓库配置","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clh95h7kh002ggwuva2ok7tgg","content":"<p>golang设置</p>\n<pre class=\"line-numbers language-golang\" data-language=\"golang\"><code class=\"language-golang\">go env -w GOPRIVATE&#x3D;&quot;gitlab.xxx.com&#x2F;xxxx&#x2F;*&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>git设置</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> config --global url.<span class=\"token string\">\"git@gitlab.xxxx.com:\"</span>.insteadOf <span class=\"token string\">\"http://gitlab.xxxx.com/\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}},"cover":false,"excerpt":"","more":"<p>golang设置</p>\n<pre class=\"line-numbers language-golang\" data-language=\"golang\"><code class=\"language-golang\">go env -w GOPRIVATE&#x3D;&quot;gitlab.xxx.com&#x2F;xxxx&#x2F;*&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>git设置</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> config --global url.<span class=\"token string\">\"git@gitlab.xxxx.com:\"</span>.insteadOf <span class=\"token string\">\"http://gitlab.xxxx.com/\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n"},{"title":"go 中context的使用","url":"/archives/go中context的使用","abbrlink":"38c2d99","date":"2022-05-07T07:28:52.000Z","updated":"2022-05-07T07:38:13.000Z","description":null,"_content":"\n# go中context的使用\n版权声明：本文为CSDN博主「Word哥」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。\n原文链接：https://blog.csdn.net/finghting321/article/details/106012673/\n————————————————\n\n## 1. 为什么需要context\n在并发程序中，由于超时、取消操作或者一些异常情况，往往需要进行抢占操作或者中断后续操作。\n\n举个例子：在 Go http包的Server中，每一个请求在都有一个对应的 goroutine 去处理。请求处理函数通常会启动额外的 goroutine 用来访问后端服务，比如数据库和RPC服务，用来处理一个请求的 goroutine 通常需要访问一些与请求特定的数据，比如终端用户的身份认证信息、验证相关的token、请求的截止时间。 当一个请求被取消或超时时，所有用来处理该请求的 goroutine 都应该迅速中断退出，然后系统才能释放这些 goroutine 占用的资源。context深入理解可参考\n<!--more-->\ncontext常用的使用场景：\n1. 一个请求对应多个goroutine之间的数据交互\n2. 超时控制\n3. 上下文控制\n\n## 2. context包简介\ncontext.Context接口：\n```go\ntype Context interface {\n    // 返回Context的超时时间（超时返回场景）\n    Deadline() (deadline time.Time, ok bool)\n \n    // 在Context超时或取消时（即结束了）返回一个关闭的channel\n    // 即如果当前Context超时或取消时，Done方法会返回一个channel，然后其他地方就可以通过判断Done方法是否有返回（channel），如果有则说明Context已结束\n    // 故其可以作为广播通知其他相关方本Context已结束，请做相关处理。\n    Done() <-chan struct{}\n \n    // 返回Context取消的原因\n    Err() error\n    \n    // 返回Context相关数据\n    Value(key interface{}) interface{}\n}\n```\n继承的Context，BackGound是所有Context的root，不能够被cancel。context包提供了三种context，分别是是普通context，超时context以及带值的context：\n```go\n// 普通context，通常这样调用： ctx, cancel := context.WithCancel(context.Background())\nfunc WithCancel(parent Context) (ctx Context, cancel CancelFunc)\n \n// 带超时的context，超时之后会自动close对象的Done，与调用CancelFunc的效果一样\n// WithDeadline 明确地设置一个d指定的系统时钟时间，如果超过就触发超时\n// WithTimeout 设置一个相对的超时时间，也就是deadline设为timeout加上当前的系统时间\n// 因为两者事实上都依赖于系统时钟，所以可能存在微小的误差，所以官方不推荐把超时间隔设置得太小\n// 通常这样调用：ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\nfunc WithDeadline(parent Context, d time.Time) (Context, CancelFunc)\nfunc WithTimeout(parent Context, timeout time.Duration) (Context, CancelFunc)\n \n// 带有值的context，没有CancelFunc，所以它只用于值的多goroutine传递和共享\n// 通常这样调用：ctx := context.WithValue(context.Background(), \"key\", myValue)\nfunc WithValue(parent Context, key, val interface{}) Context\n```\n## 3. 场景举例—等待组\n```go\npackage main\n \nimport (\n    \"fmt\"\n    \"sync\"\n    \"time\"\n)\n \n//数据接收服务主协程同子协程同步变量\nvar wg sync.WaitGroup\n \nfunc run(i int) {\n    fmt.Println(\"start 任务ID：\", i)\n    time.Sleep(time.Second * 1)\n    wg.Done() // 每个goroutine运行完毕后就释放等待组的计数器\n}\n \nfunc main() {\n    countThread := 2 //runtime.NumCPU()\n    for i := 0; i < countThread; i++ {\n        go run(i)\n    }\n    wg.Add(countThread) // 需要开启的goroutine等待组的计数器\n \n    //等待所有的任务都释放\n    wg.Wait()\n    fmt.Println(\"任务全部结束,退出\")\n}\n```\n**运行结果：** \n\n<img align=\"left\" src=\"http://rd7bcspti.hn-bkt.clouddn.com/02.png\">  \n\n**分析：**  对于等待组控制多并发的情况，只有所有的goroutine都结束了才算结束，只要有一个goroutine没有结束， 那么就会一直等，这显然对资源的释放是缓慢的；\n**优点：** 使用等待组的并发控制模型，适用于好多个goroutine协同做一件事情，因为每个goroutine做的都是这件事情的一部分，只有当全部的goroutine都完成，这件事情才算完成；\n**缺点：** 需要主动的通知某一个 goroutine 结束。\n**疑问：** 如果开启一个后台 goroutine 一直做事情，现在不需要了，那么就需要通知这个goroutine 结束，否则它会一直跑。\n\n## 4. 场景举例—通道+select\n针对等待组场景遗留的问题，解决办法：\n> 1. 设置全局变量，在通知goroutine要停止时，为全局变量赋值，但是这样必须保证线程安全，不可避免的必须为全局变量加锁，显得有失便利；\n> 2. 使用chan + select多路复用的方式，就会优雅许多；\n```go\npackage main\n \nimport (\n    \"fmt\"\n    \"time\"\n)\n \nfunc run(stop chan bool) {\n    for {\n        select {\n        case <-stop:\n            fmt.Println(\"任务1结束退出\")\n            return\n        default:\n            fmt.Println(\"任务1正在运行中\")\n            time.Sleep(time.Second * 2)\n        }\n    }\n}\n \nfunc main() {\n    stop := make(chan bool)\n    go run(stop) // 开启goroutine\n \n    // 运行一段时间后停止\n    time.Sleep(time.Second * 10)\n    fmt.Println(\"停止任务1。。。\")\n    stop <- true\n    time.Sleep(time.Second * 3)\n    return\n}\n```\n**运行结果：** \n![image-1651908425418](/upload/2022/05/image-1651908425418.png)\n**优点：** 优雅、简单\n**不足：** 如果有很多 goroutine 都需要控制结束，并且这些 goroutine 又开启其它更多的goroutine ？\n\n## 5. 场景举例—普通context\n```go\npackage main\n \nimport (\n    \"context\"\n    \"fmt\"\n    \"time\"\n)\n \nfunc run(ctx context.Context, id int) {\n    for {\n        select {\n        case <-ctx.Done():\n            fmt.Printf(\"任务%v结束退出\\n\", id)\n            return\n        default:\n            fmt.Printf(\"任务%v正在运行中\\n\", id)\n            time.Sleep(time.Second * 2)\n        }\n    }\n}\n \nfunc main() {\n    //管理启动的协程\n    ctx, cancel := context.WithCancel(context.Background())\n    // 开启多个goroutine，传入ctx\n    go run(ctx, 1)\n    go run(ctx, 2)\n    // 运行一段时间后停止\n    time.Sleep(time.Second * 10)\n    fmt.Println(\"停止任务1\")\n    cancel() // 使用context的cancel函数停止goroutine\n    // 为了检测监控过是否停止，如果没有监控输出，表示停止\n    time.Sleep(time.Second * 3)\n    return\n}\n```\n**说明：** context.Background() 返回一个空的 Context，这个空的 Context 一般用于整个 Context 树的根节点。然后使用 context.WithCancel(parent) 函数，创建一个可取消的子 Context，然后当作参数传给 goroutine 使用，这样就可以使用这个子 Context 跟踪这个 goroutine。\n\n**运行结果：**\n![image-1651908618179](/upload/2022/05/image-1651908618179.png)\n\n## 6. 场景举例—Context超时\n```go\npackage main\n \nimport (\n    \"context\"\n    \"fmt\"\n    \"sync\"\n    \"time\"\n)\n \nfunc coroutine(ctx context.Context, duration time.Duration, id int, wg *sync.WaitGroup) {\n    for {\n        select {\n        case <-ctx.Done():\n            fmt.Printf(\"协程 %d 退出\\n\", id)\n            wg.Done()\n            return\n        case <-time.After(duration):\n            fmt.Printf(\"消息来自协程 %d\\n\", id)\n        }\n    }\n}\n \nfunc main() {\n    //使用WaitGroup等待所有的goroutine执行完毕，在收到<-ctx.Done()的终止信号后使wg中需要等待的goroutine数量减一。\n    // 因为context只负责取消goroutine，不负责等待goroutine运行，所以需要配合一点辅助手段\n    //管理启动的协程\n    wg := &sync.WaitGroup{}\n    ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\n    defer cancel()\n    for i := 0; i < 3; i++ {\n        wg.Add(1)\n        go coroutine(ctx, 1*time.Second, i, wg)\n    }\n    wg.Wait()\n }\n```\n**说明：** 代码中使用WaitGroup等待所有的goroutine执行完毕，在收到<-ctx.Done()的终止信号后使wg中需要等待的goroutine数量减一， 因为context只负责取消goroutine，不负责等待goroutine运行，需要配合一点辅助手段\n**运行结果：** \n\n![image-1651908781361](/upload/2022/05/image-1651908781361.png)\n\n## 7. 场景举例—Context传递元数据\n```go\npackage main\n \nimport (\n    \"context\"\n    \"fmt\"\n    \"time\"\n)\n \nvar key string = \"name\"\n \nfunc run(ctx context.Context) {\n    for {\n        select {\n        case <-ctx.Done():\n            fmt.Printf(\"任务%v结束退出\\n\", ctx.Value(key))\n            return\n        default:\n            fmt.Printf(\"任务%v正在运行中\\n\", ctx.Value(key))\n            time.Sleep(time.Second * 2)\n        }\n    }\n}\n \nfunc main() {\n    //管理启动的协程\n    ctx, cancel := context.WithCancel(context.Background())\n    // 给ctx绑定键值，传递给goroutine\n    valuectx := context.WithValue(ctx, key, \"【监控1】\")\n    // 开启goroutine，传入ctx\n    go run(valuectx)\n    // 运行一段时间后停止\n    time.Sleep(time.Second * 10)\n    fmt.Println(\"停止任务\")\n    cancel() // 使用context的cancel函数停止goroutine\n    // 为了检测监控过是否停止，如果没有监控输出，表示停止\n    time.Sleep(time.Second * 3)\n}\n```\n**运行结果：** \n![image-1651908878817](/upload/2022/05/image-1651908878817.png)\n\n## 8. context总结\n\n> 1. 不要把 Context 放在结构体中，要以参数的方式传递\n> 2. 以 Context 作为参数的函数方法，应该把 Context 作为第一个参数，放在第一位\n>3. 给一个函数方法传递 Context 的时候，不要传递 nil，如果不知道传递什么，就使用 context.TODO\n>4. Context 的 Value 相关方法应该传递必须的数据，不要什么数据都使用这个传递\n>5. Context 是线程安全的，可以放心的在多个 goroutine 中传递\n","source":"_posts/go中context的使用.md","raw":"---\ntitle: go 中context的使用\nurl: /archives/go中context的使用\ncategories:\n  - golang\ntags:\n  - golang\nabbrlink: 38c2d99\ndate: 2022-05-07 15:28:52\nupdated: 2022-05-07 15:38:13\ndescription:\n---\n\n# go中context的使用\n版权声明：本文为CSDN博主「Word哥」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。\n原文链接：https://blog.csdn.net/finghting321/article/details/106012673/\n————————————————\n\n## 1. 为什么需要context\n在并发程序中，由于超时、取消操作或者一些异常情况，往往需要进行抢占操作或者中断后续操作。\n\n举个例子：在 Go http包的Server中，每一个请求在都有一个对应的 goroutine 去处理。请求处理函数通常会启动额外的 goroutine 用来访问后端服务，比如数据库和RPC服务，用来处理一个请求的 goroutine 通常需要访问一些与请求特定的数据，比如终端用户的身份认证信息、验证相关的token、请求的截止时间。 当一个请求被取消或超时时，所有用来处理该请求的 goroutine 都应该迅速中断退出，然后系统才能释放这些 goroutine 占用的资源。context深入理解可参考\n<!--more-->\ncontext常用的使用场景：\n1. 一个请求对应多个goroutine之间的数据交互\n2. 超时控制\n3. 上下文控制\n\n## 2. context包简介\ncontext.Context接口：\n```go\ntype Context interface {\n    // 返回Context的超时时间（超时返回场景）\n    Deadline() (deadline time.Time, ok bool)\n \n    // 在Context超时或取消时（即结束了）返回一个关闭的channel\n    // 即如果当前Context超时或取消时，Done方法会返回一个channel，然后其他地方就可以通过判断Done方法是否有返回（channel），如果有则说明Context已结束\n    // 故其可以作为广播通知其他相关方本Context已结束，请做相关处理。\n    Done() <-chan struct{}\n \n    // 返回Context取消的原因\n    Err() error\n    \n    // 返回Context相关数据\n    Value(key interface{}) interface{}\n}\n```\n继承的Context，BackGound是所有Context的root，不能够被cancel。context包提供了三种context，分别是是普通context，超时context以及带值的context：\n```go\n// 普通context，通常这样调用： ctx, cancel := context.WithCancel(context.Background())\nfunc WithCancel(parent Context) (ctx Context, cancel CancelFunc)\n \n// 带超时的context，超时之后会自动close对象的Done，与调用CancelFunc的效果一样\n// WithDeadline 明确地设置一个d指定的系统时钟时间，如果超过就触发超时\n// WithTimeout 设置一个相对的超时时间，也就是deadline设为timeout加上当前的系统时间\n// 因为两者事实上都依赖于系统时钟，所以可能存在微小的误差，所以官方不推荐把超时间隔设置得太小\n// 通常这样调用：ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\nfunc WithDeadline(parent Context, d time.Time) (Context, CancelFunc)\nfunc WithTimeout(parent Context, timeout time.Duration) (Context, CancelFunc)\n \n// 带有值的context，没有CancelFunc，所以它只用于值的多goroutine传递和共享\n// 通常这样调用：ctx := context.WithValue(context.Background(), \"key\", myValue)\nfunc WithValue(parent Context, key, val interface{}) Context\n```\n## 3. 场景举例—等待组\n```go\npackage main\n \nimport (\n    \"fmt\"\n    \"sync\"\n    \"time\"\n)\n \n//数据接收服务主协程同子协程同步变量\nvar wg sync.WaitGroup\n \nfunc run(i int) {\n    fmt.Println(\"start 任务ID：\", i)\n    time.Sleep(time.Second * 1)\n    wg.Done() // 每个goroutine运行完毕后就释放等待组的计数器\n}\n \nfunc main() {\n    countThread := 2 //runtime.NumCPU()\n    for i := 0; i < countThread; i++ {\n        go run(i)\n    }\n    wg.Add(countThread) // 需要开启的goroutine等待组的计数器\n \n    //等待所有的任务都释放\n    wg.Wait()\n    fmt.Println(\"任务全部结束,退出\")\n}\n```\n**运行结果：** \n\n<img align=\"left\" src=\"http://rd7bcspti.hn-bkt.clouddn.com/02.png\">  \n\n**分析：**  对于等待组控制多并发的情况，只有所有的goroutine都结束了才算结束，只要有一个goroutine没有结束， 那么就会一直等，这显然对资源的释放是缓慢的；\n**优点：** 使用等待组的并发控制模型，适用于好多个goroutine协同做一件事情，因为每个goroutine做的都是这件事情的一部分，只有当全部的goroutine都完成，这件事情才算完成；\n**缺点：** 需要主动的通知某一个 goroutine 结束。\n**疑问：** 如果开启一个后台 goroutine 一直做事情，现在不需要了，那么就需要通知这个goroutine 结束，否则它会一直跑。\n\n## 4. 场景举例—通道+select\n针对等待组场景遗留的问题，解决办法：\n> 1. 设置全局变量，在通知goroutine要停止时，为全局变量赋值，但是这样必须保证线程安全，不可避免的必须为全局变量加锁，显得有失便利；\n> 2. 使用chan + select多路复用的方式，就会优雅许多；\n```go\npackage main\n \nimport (\n    \"fmt\"\n    \"time\"\n)\n \nfunc run(stop chan bool) {\n    for {\n        select {\n        case <-stop:\n            fmt.Println(\"任务1结束退出\")\n            return\n        default:\n            fmt.Println(\"任务1正在运行中\")\n            time.Sleep(time.Second * 2)\n        }\n    }\n}\n \nfunc main() {\n    stop := make(chan bool)\n    go run(stop) // 开启goroutine\n \n    // 运行一段时间后停止\n    time.Sleep(time.Second * 10)\n    fmt.Println(\"停止任务1。。。\")\n    stop <- true\n    time.Sleep(time.Second * 3)\n    return\n}\n```\n**运行结果：** \n![image-1651908425418](/upload/2022/05/image-1651908425418.png)\n**优点：** 优雅、简单\n**不足：** 如果有很多 goroutine 都需要控制结束，并且这些 goroutine 又开启其它更多的goroutine ？\n\n## 5. 场景举例—普通context\n```go\npackage main\n \nimport (\n    \"context\"\n    \"fmt\"\n    \"time\"\n)\n \nfunc run(ctx context.Context, id int) {\n    for {\n        select {\n        case <-ctx.Done():\n            fmt.Printf(\"任务%v结束退出\\n\", id)\n            return\n        default:\n            fmt.Printf(\"任务%v正在运行中\\n\", id)\n            time.Sleep(time.Second * 2)\n        }\n    }\n}\n \nfunc main() {\n    //管理启动的协程\n    ctx, cancel := context.WithCancel(context.Background())\n    // 开启多个goroutine，传入ctx\n    go run(ctx, 1)\n    go run(ctx, 2)\n    // 运行一段时间后停止\n    time.Sleep(time.Second * 10)\n    fmt.Println(\"停止任务1\")\n    cancel() // 使用context的cancel函数停止goroutine\n    // 为了检测监控过是否停止，如果没有监控输出，表示停止\n    time.Sleep(time.Second * 3)\n    return\n}\n```\n**说明：** context.Background() 返回一个空的 Context，这个空的 Context 一般用于整个 Context 树的根节点。然后使用 context.WithCancel(parent) 函数，创建一个可取消的子 Context，然后当作参数传给 goroutine 使用，这样就可以使用这个子 Context 跟踪这个 goroutine。\n\n**运行结果：**\n![image-1651908618179](/upload/2022/05/image-1651908618179.png)\n\n## 6. 场景举例—Context超时\n```go\npackage main\n \nimport (\n    \"context\"\n    \"fmt\"\n    \"sync\"\n    \"time\"\n)\n \nfunc coroutine(ctx context.Context, duration time.Duration, id int, wg *sync.WaitGroup) {\n    for {\n        select {\n        case <-ctx.Done():\n            fmt.Printf(\"协程 %d 退出\\n\", id)\n            wg.Done()\n            return\n        case <-time.After(duration):\n            fmt.Printf(\"消息来自协程 %d\\n\", id)\n        }\n    }\n}\n \nfunc main() {\n    //使用WaitGroup等待所有的goroutine执行完毕，在收到<-ctx.Done()的终止信号后使wg中需要等待的goroutine数量减一。\n    // 因为context只负责取消goroutine，不负责等待goroutine运行，所以需要配合一点辅助手段\n    //管理启动的协程\n    wg := &sync.WaitGroup{}\n    ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\n    defer cancel()\n    for i := 0; i < 3; i++ {\n        wg.Add(1)\n        go coroutine(ctx, 1*time.Second, i, wg)\n    }\n    wg.Wait()\n }\n```\n**说明：** 代码中使用WaitGroup等待所有的goroutine执行完毕，在收到<-ctx.Done()的终止信号后使wg中需要等待的goroutine数量减一， 因为context只负责取消goroutine，不负责等待goroutine运行，需要配合一点辅助手段\n**运行结果：** \n\n![image-1651908781361](/upload/2022/05/image-1651908781361.png)\n\n## 7. 场景举例—Context传递元数据\n```go\npackage main\n \nimport (\n    \"context\"\n    \"fmt\"\n    \"time\"\n)\n \nvar key string = \"name\"\n \nfunc run(ctx context.Context) {\n    for {\n        select {\n        case <-ctx.Done():\n            fmt.Printf(\"任务%v结束退出\\n\", ctx.Value(key))\n            return\n        default:\n            fmt.Printf(\"任务%v正在运行中\\n\", ctx.Value(key))\n            time.Sleep(time.Second * 2)\n        }\n    }\n}\n \nfunc main() {\n    //管理启动的协程\n    ctx, cancel := context.WithCancel(context.Background())\n    // 给ctx绑定键值，传递给goroutine\n    valuectx := context.WithValue(ctx, key, \"【监控1】\")\n    // 开启goroutine，传入ctx\n    go run(valuectx)\n    // 运行一段时间后停止\n    time.Sleep(time.Second * 10)\n    fmt.Println(\"停止任务\")\n    cancel() // 使用context的cancel函数停止goroutine\n    // 为了检测监控过是否停止，如果没有监控输出，表示停止\n    time.Sleep(time.Second * 3)\n}\n```\n**运行结果：** \n![image-1651908878817](/upload/2022/05/image-1651908878817.png)\n\n## 8. context总结\n\n> 1. 不要把 Context 放在结构体中，要以参数的方式传递\n> 2. 以 Context 作为参数的函数方法，应该把 Context 作为第一个参数，放在第一位\n>3. 给一个函数方法传递 Context 的时候，不要传递 nil，如果不知道传递什么，就使用 context.TODO\n>4. Context 的 Value 相关方法应该传递必须的数据，不要什么数据都使用这个传递\n>5. Context 是线程安全的，可以放心的在多个 goroutine 中传递\n","slug":"go中context的使用","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clh95h7kj002kgwuv05fcas7v","content":"<h1 id=\"go中context的使用\"><a href=\"#go中context的使用\" class=\"headerlink\" title=\"go中context的使用\"></a>go中context的使用</h1><p>版权声明：本文为CSDN博主「Word哥」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href=\"https://blog.csdn.net/finghting321/article/details/106012673/\">https://blog.csdn.net/finghting321/article/details/106012673/</a><br>————————————————</p>\n<h2 id=\"1-为什么需要context\"><a href=\"#1-为什么需要context\" class=\"headerlink\" title=\"1. 为什么需要context\"></a>1. 为什么需要context</h2><p>在并发程序中，由于超时、取消操作或者一些异常情况，往往需要进行抢占操作或者中断后续操作。</p>\n<p>举个例子：在 Go http包的Server中，每一个请求在都有一个对应的 goroutine 去处理。请求处理函数通常会启动额外的 goroutine 用来访问后端服务，比如数据库和RPC服务，用来处理一个请求的 goroutine 通常需要访问一些与请求特定的数据，比如终端用户的身份认证信息、验证相关的token、请求的截止时间。 当一个请求被取消或超时时，所有用来处理该请求的 goroutine 都应该迅速中断退出，然后系统才能释放这些 goroutine 占用的资源。context深入理解可参考</p>\n<span id=\"more\"></span>\n<p>context常用的使用场景：</p>\n<ol>\n<li>一个请求对应多个goroutine之间的数据交互</li>\n<li>超时控制</li>\n<li>上下文控制</li>\n</ol>\n<h2 id=\"2-context包简介\"><a href=\"#2-context包简介\" class=\"headerlink\" title=\"2. context包简介\"></a>2. context包简介</h2><p>context.Context接口：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Context <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 返回Context的超时时间（超时返回场景）</span>\n    <span class=\"token function\">Deadline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>deadline time<span class=\"token punctuation\">.</span>Time<span class=\"token punctuation\">,</span> ok <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span>\n \n    <span class=\"token comment\">// 在Context超时或取消时（即结束了）返回一个关闭的channel</span>\n    <span class=\"token comment\">// 即如果当前Context超时或取消时，Done方法会返回一个channel，然后其他地方就可以通过判断Done方法是否有返回（channel），如果有则说明Context已结束</span>\n    <span class=\"token comment\">// 故其可以作为广播通知其他相关方本Context已结束，请做相关处理。</span>\n    <span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;-</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n \n    <span class=\"token comment\">// 返回Context取消的原因</span>\n    <span class=\"token function\">Err</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span>\n    \n    <span class=\"token comment\">// 返回Context相关数据</span>\n    <span class=\"token function\">Value</span><span class=\"token punctuation\">(</span>key <span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>继承的Context，BackGound是所有Context的root，不能够被cancel。context包提供了三种context，分别是是普通context，超时context以及带值的context：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// 普通context，通常这样调用： ctx, cancel := context.WithCancel(context.Background())</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">WithCancel</span><span class=\"token punctuation\">(</span>parent Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>ctx Context<span class=\"token punctuation\">,</span> cancel CancelFunc<span class=\"token punctuation\">)</span>\n \n<span class=\"token comment\">// 带超时的context，超时之后会自动close对象的Done，与调用CancelFunc的效果一样</span>\n<span class=\"token comment\">// WithDeadline 明确地设置一个d指定的系统时钟时间，如果超过就触发超时</span>\n<span class=\"token comment\">// WithTimeout 设置一个相对的超时时间，也就是deadline设为timeout加上当前的系统时间</span>\n<span class=\"token comment\">// 因为两者事实上都依赖于系统时钟，所以可能存在微小的误差，所以官方不推荐把超时间隔设置得太小</span>\n<span class=\"token comment\">// 通常这样调用：ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">WithDeadline</span><span class=\"token punctuation\">(</span>parent Context<span class=\"token punctuation\">,</span> d time<span class=\"token punctuation\">.</span>Time<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>Context<span class=\"token punctuation\">,</span> CancelFunc<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">WithTimeout</span><span class=\"token punctuation\">(</span>parent Context<span class=\"token punctuation\">,</span> timeout time<span class=\"token punctuation\">.</span>Duration<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>Context<span class=\"token punctuation\">,</span> CancelFunc<span class=\"token punctuation\">)</span>\n \n<span class=\"token comment\">// 带有值的context，没有CancelFunc，所以它只用于值的多goroutine传递和共享</span>\n<span class=\"token comment\">// 通常这样调用：ctx := context.WithValue(context.Background(), \"key\", myValue)</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">WithValue</span><span class=\"token punctuation\">(</span>parent Context<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> val <span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> Context<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"3-场景举例—等待组\"><a href=\"#3-场景举例—等待组\" class=\"headerlink\" title=\"3. 场景举例—等待组\"></a>3. 场景举例—等待组</h2><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n \n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"fmt\"</span>\n    <span class=\"token string\">\"sync\"</span>\n    <span class=\"token string\">\"time\"</span>\n<span class=\"token punctuation\">)</span>\n \n<span class=\"token comment\">//数据接收服务主协程同子协程同步变量</span>\n<span class=\"token keyword\">var</span> wg sync<span class=\"token punctuation\">.</span>WaitGroup\n \n<span class=\"token keyword\">func</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>i <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"start 任务ID：\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span>\n    time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second <span class=\"token operator\">*</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    wg<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 每个goroutine运行完毕后就释放等待组的计数器</span>\n<span class=\"token punctuation\">&#125;</span>\n \n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    countThread <span class=\"token operator\">:=</span> <span class=\"token number\">2</span> <span class=\"token comment\">//runtime.NumCPU()</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> countThread<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">go</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n    wg<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>countThread<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 需要开启的goroutine等待组的计数器</span>\n \n    <span class=\"token comment\">//等待所有的任务都释放</span>\n    wg<span class=\"token punctuation\">.</span><span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"任务全部结束,退出\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>运行结果：</strong> </p>\n<img align=\"left\" src=\"http://rd7bcspti.hn-bkt.clouddn.com/02.png\">  \n\n<p><strong>分析：</strong>  对于等待组控制多并发的情况，只有所有的goroutine都结束了才算结束，只要有一个goroutine没有结束， 那么就会一直等，这显然对资源的释放是缓慢的；<br><strong>优点：</strong> 使用等待组的并发控制模型，适用于好多个goroutine协同做一件事情，因为每个goroutine做的都是这件事情的一部分，只有当全部的goroutine都完成，这件事情才算完成；<br><strong>缺点：</strong> 需要主动的通知某一个 goroutine 结束。<br><strong>疑问：</strong> 如果开启一个后台 goroutine 一直做事情，现在不需要了，那么就需要通知这个goroutine 结束，否则它会一直跑。</p>\n<h2 id=\"4-场景举例—通道-select\"><a href=\"#4-场景举例—通道-select\" class=\"headerlink\" title=\"4. 场景举例—通道+select\"></a>4. 场景举例—通道+select</h2><p>针对等待组场景遗留的问题，解决办法：</p>\n<blockquote>\n<ol>\n<li>设置全局变量，在通知goroutine要停止时，为全局变量赋值，但是这样必须保证线程安全，不可避免的必须为全局变量加锁，显得有失便利；</li>\n<li>使用chan + select多路复用的方式，就会优雅许多；</li>\n</ol>\n</blockquote>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n \n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"fmt\"</span>\n    <span class=\"token string\">\"time\"</span>\n<span class=\"token punctuation\">)</span>\n \n<span class=\"token keyword\">func</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>stop <span class=\"token keyword\">chan</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">select</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>stop<span class=\"token punctuation\">:</span>\n            fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"任务1结束退出\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span>\n        <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n            fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"任务1正在运行中\"</span><span class=\"token punctuation\">)</span>\n            time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n \n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    stop <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">go</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>stop<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 开启goroutine</span>\n \n    <span class=\"token comment\">// 运行一段时间后停止</span>\n    time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"停止任务1。。。\"</span><span class=\"token punctuation\">)</span>\n    stop <span class=\"token operator\">&lt;-</span> <span class=\"token boolean\">true</span>\n    time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>运行结果：</strong><br><img src=\"/upload/2022/05/image-1651908425418.png\" alt=\"image-1651908425418\"><br><strong>优点：</strong> 优雅、简单<br><strong>不足：</strong> 如果有很多 goroutine 都需要控制结束，并且这些 goroutine 又开启其它更多的goroutine ？</p>\n<h2 id=\"5-场景举例—普通context\"><a href=\"#5-场景举例—普通context\" class=\"headerlink\" title=\"5. 场景举例—普通context\"></a>5. 场景举例—普通context</h2><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n \n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"context\"</span>\n    <span class=\"token string\">\"fmt\"</span>\n    <span class=\"token string\">\"time\"</span>\n<span class=\"token punctuation\">)</span>\n \n<span class=\"token keyword\">func</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> id <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">select</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>ctx<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"任务%v结束退出\\n\"</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span>\n        <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n            fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"任务%v正在运行中\\n\"</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span>\n            time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n \n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//管理启动的协程</span>\n    ctx<span class=\"token punctuation\">,</span> cancel <span class=\"token operator\">:=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">WithCancel</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">Background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 开启多个goroutine，传入ctx</span>\n    <span class=\"token keyword\">go</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">go</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 运行一段时间后停止</span>\n    time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"停止任务1\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 使用context的cancel函数停止goroutine</span>\n    <span class=\"token comment\">// 为了检测监控过是否停止，如果没有监控输出，表示停止</span>\n    time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>说明：</strong> context.Background() 返回一个空的 Context，这个空的 Context 一般用于整个 Context 树的根节点。然后使用 context.WithCancel(parent) 函数，创建一个可取消的子 Context，然后当作参数传给 goroutine 使用，这样就可以使用这个子 Context 跟踪这个 goroutine。</p>\n<p><strong>运行结果：</strong><br><img src=\"/upload/2022/05/image-1651908618179.png\" alt=\"image-1651908618179\"></p>\n<h2 id=\"6-场景举例—Context超时\"><a href=\"#6-场景举例—Context超时\" class=\"headerlink\" title=\"6. 场景举例—Context超时\"></a>6. 场景举例—Context超时</h2><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n \n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"context\"</span>\n    <span class=\"token string\">\"fmt\"</span>\n    <span class=\"token string\">\"sync\"</span>\n    <span class=\"token string\">\"time\"</span>\n<span class=\"token punctuation\">)</span>\n \n<span class=\"token keyword\">func</span> <span class=\"token function\">coroutine</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> duration time<span class=\"token punctuation\">.</span>Duration<span class=\"token punctuation\">,</span> id <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> wg <span class=\"token operator\">*</span>sync<span class=\"token punctuation\">.</span>WaitGroup<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">select</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>ctx<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"协程 %d 退出\\n\"</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span>\n            wg<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span>\n        <span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>time<span class=\"token punctuation\">.</span><span class=\"token function\">After</span><span class=\"token punctuation\">(</span>duration<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"消息来自协程 %d\\n\"</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n \n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//使用WaitGroup等待所有的goroutine执行完毕，在收到&lt;-ctx.Done()的终止信号后使wg中需要等待的goroutine数量减一。</span>\n    <span class=\"token comment\">// 因为context只负责取消goroutine，不负责等待goroutine运行，所以需要配合一点辅助手段</span>\n    <span class=\"token comment\">//管理启动的协程</span>\n    wg <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>sync<span class=\"token punctuation\">.</span>WaitGroup<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n    ctx<span class=\"token punctuation\">,</span> cancel <span class=\"token operator\">:=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">WithTimeout</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">Background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token operator\">*</span>time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">defer</span> <span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span>\n        wg<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">go</span> <span class=\"token function\">coroutine</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token operator\">*</span>time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> wg<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n    wg<span class=\"token punctuation\">.</span><span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>说明：</strong> 代码中使用WaitGroup等待所有的goroutine执行完毕，在收到&lt;-ctx.Done()的终止信号后使wg中需要等待的goroutine数量减一， 因为context只负责取消goroutine，不负责等待goroutine运行，需要配合一点辅助手段<br><strong>运行结果：</strong> </p>\n<p><img src=\"/upload/2022/05/image-1651908781361.png\" alt=\"image-1651908781361\"></p>\n<h2 id=\"7-场景举例—Context传递元数据\"><a href=\"#7-场景举例—Context传递元数据\" class=\"headerlink\" title=\"7. 场景举例—Context传递元数据\"></a>7. 场景举例—Context传递元数据</h2><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n \n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"context\"</span>\n    <span class=\"token string\">\"fmt\"</span>\n    <span class=\"token string\">\"time\"</span>\n<span class=\"token punctuation\">)</span>\n \n<span class=\"token keyword\">var</span> key <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"name\"</span>\n \n<span class=\"token keyword\">func</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">select</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>ctx<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"任务%v结束退出\\n\"</span><span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">Value</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span>\n        <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n            fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"任务%v正在运行中\\n\"</span><span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">Value</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n \n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//管理启动的协程</span>\n    ctx<span class=\"token punctuation\">,</span> cancel <span class=\"token operator\">:=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">WithCancel</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">Background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 给ctx绑定键值，传递给goroutine</span>\n    valuectx <span class=\"token operator\">:=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">WithValue</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> <span class=\"token string\">\"【监控1】\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 开启goroutine，传入ctx</span>\n    <span class=\"token keyword\">go</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>valuectx<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 运行一段时间后停止</span>\n    time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"停止任务\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 使用context的cancel函数停止goroutine</span>\n    <span class=\"token comment\">// 为了检测监控过是否停止，如果没有监控输出，表示停止</span>\n    time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>运行结果：</strong><br><img src=\"/upload/2022/05/image-1651908878817.png\" alt=\"image-1651908878817\"></p>\n<h2 id=\"8-context总结\"><a href=\"#8-context总结\" class=\"headerlink\" title=\"8. context总结\"></a>8. context总结</h2><blockquote>\n<ol>\n<li>不要把 Context 放在结构体中，要以参数的方式传递</li>\n<li>以 Context 作为参数的函数方法，应该把 Context 作为第一个参数，放在第一位</li>\n<li>给一个函数方法传递 Context 的时候，不要传递 nil，如果不知道传递什么，就使用 context.TODO</li>\n<li>Context 的 Value 相关方法应该传递必须的数据，不要什么数据都使用这个传递</li>\n<li>Context 是线程安全的，可以放心的在多个 goroutine 中传递</li>\n</ol>\n</blockquote>\n","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}},"cover":false,"excerpt":"<h1 id=\"go中context的使用\"><a href=\"#go中context的使用\" class=\"headerlink\" title=\"go中context的使用\"></a>go中context的使用</h1><p>版权声明：本文为CSDN博主「Word哥」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href=\"https://blog.csdn.net/finghting321/article/details/106012673/\">https://blog.csdn.net/finghting321/article/details/106012673/</a><br>————————————————</p>\n<h2 id=\"1-为什么需要context\"><a href=\"#1-为什么需要context\" class=\"headerlink\" title=\"1. 为什么需要context\"></a>1. 为什么需要context</h2><p>在并发程序中，由于超时、取消操作或者一些异常情况，往往需要进行抢占操作或者中断后续操作。</p>\n<p>举个例子：在 Go http包的Server中，每一个请求在都有一个对应的 goroutine 去处理。请求处理函数通常会启动额外的 goroutine 用来访问后端服务，比如数据库和RPC服务，用来处理一个请求的 goroutine 通常需要访问一些与请求特定的数据，比如终端用户的身份认证信息、验证相关的token、请求的截止时间。 当一个请求被取消或超时时，所有用来处理该请求的 goroutine 都应该迅速中断退出，然后系统才能释放这些 goroutine 占用的资源。context深入理解可参考</p>","more":"<p>context常用的使用场景：</p>\n<ol>\n<li>一个请求对应多个goroutine之间的数据交互</li>\n<li>超时控制</li>\n<li>上下文控制</li>\n</ol>\n<h2 id=\"2-context包简介\"><a href=\"#2-context包简介\" class=\"headerlink\" title=\"2. context包简介\"></a>2. context包简介</h2><p>context.Context接口：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Context <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 返回Context的超时时间（超时返回场景）</span>\n    <span class=\"token function\">Deadline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>deadline time<span class=\"token punctuation\">.</span>Time<span class=\"token punctuation\">,</span> ok <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span>\n \n    <span class=\"token comment\">// 在Context超时或取消时（即结束了）返回一个关闭的channel</span>\n    <span class=\"token comment\">// 即如果当前Context超时或取消时，Done方法会返回一个channel，然后其他地方就可以通过判断Done方法是否有返回（channel），如果有则说明Context已结束</span>\n    <span class=\"token comment\">// 故其可以作为广播通知其他相关方本Context已结束，请做相关处理。</span>\n    <span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;-</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n \n    <span class=\"token comment\">// 返回Context取消的原因</span>\n    <span class=\"token function\">Err</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span>\n    \n    <span class=\"token comment\">// 返回Context相关数据</span>\n    <span class=\"token function\">Value</span><span class=\"token punctuation\">(</span>key <span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>继承的Context，BackGound是所有Context的root，不能够被cancel。context包提供了三种context，分别是是普通context，超时context以及带值的context：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// 普通context，通常这样调用： ctx, cancel := context.WithCancel(context.Background())</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">WithCancel</span><span class=\"token punctuation\">(</span>parent Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>ctx Context<span class=\"token punctuation\">,</span> cancel CancelFunc<span class=\"token punctuation\">)</span>\n \n<span class=\"token comment\">// 带超时的context，超时之后会自动close对象的Done，与调用CancelFunc的效果一样</span>\n<span class=\"token comment\">// WithDeadline 明确地设置一个d指定的系统时钟时间，如果超过就触发超时</span>\n<span class=\"token comment\">// WithTimeout 设置一个相对的超时时间，也就是deadline设为timeout加上当前的系统时间</span>\n<span class=\"token comment\">// 因为两者事实上都依赖于系统时钟，所以可能存在微小的误差，所以官方不推荐把超时间隔设置得太小</span>\n<span class=\"token comment\">// 通常这样调用：ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">WithDeadline</span><span class=\"token punctuation\">(</span>parent Context<span class=\"token punctuation\">,</span> d time<span class=\"token punctuation\">.</span>Time<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>Context<span class=\"token punctuation\">,</span> CancelFunc<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">WithTimeout</span><span class=\"token punctuation\">(</span>parent Context<span class=\"token punctuation\">,</span> timeout time<span class=\"token punctuation\">.</span>Duration<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>Context<span class=\"token punctuation\">,</span> CancelFunc<span class=\"token punctuation\">)</span>\n \n<span class=\"token comment\">// 带有值的context，没有CancelFunc，所以它只用于值的多goroutine传递和共享</span>\n<span class=\"token comment\">// 通常这样调用：ctx := context.WithValue(context.Background(), \"key\", myValue)</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">WithValue</span><span class=\"token punctuation\">(</span>parent Context<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> val <span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> Context<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"3-场景举例—等待组\"><a href=\"#3-场景举例—等待组\" class=\"headerlink\" title=\"3. 场景举例—等待组\"></a>3. 场景举例—等待组</h2><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n \n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"fmt\"</span>\n    <span class=\"token string\">\"sync\"</span>\n    <span class=\"token string\">\"time\"</span>\n<span class=\"token punctuation\">)</span>\n \n<span class=\"token comment\">//数据接收服务主协程同子协程同步变量</span>\n<span class=\"token keyword\">var</span> wg sync<span class=\"token punctuation\">.</span>WaitGroup\n \n<span class=\"token keyword\">func</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>i <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"start 任务ID：\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span>\n    time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second <span class=\"token operator\">*</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    wg<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 每个goroutine运行完毕后就释放等待组的计数器</span>\n<span class=\"token punctuation\">&#125;</span>\n \n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    countThread <span class=\"token operator\">:=</span> <span class=\"token number\">2</span> <span class=\"token comment\">//runtime.NumCPU()</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> countThread<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">go</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n    wg<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>countThread<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 需要开启的goroutine等待组的计数器</span>\n \n    <span class=\"token comment\">//等待所有的任务都释放</span>\n    wg<span class=\"token punctuation\">.</span><span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"任务全部结束,退出\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>运行结果：</strong> </p>\n<img align=\"left\" src=\"http://rd7bcspti.hn-bkt.clouddn.com/02.png\">  \n\n<p><strong>分析：</strong>  对于等待组控制多并发的情况，只有所有的goroutine都结束了才算结束，只要有一个goroutine没有结束， 那么就会一直等，这显然对资源的释放是缓慢的；<br><strong>优点：</strong> 使用等待组的并发控制模型，适用于好多个goroutine协同做一件事情，因为每个goroutine做的都是这件事情的一部分，只有当全部的goroutine都完成，这件事情才算完成；<br><strong>缺点：</strong> 需要主动的通知某一个 goroutine 结束。<br><strong>疑问：</strong> 如果开启一个后台 goroutine 一直做事情，现在不需要了，那么就需要通知这个goroutine 结束，否则它会一直跑。</p>\n<h2 id=\"4-场景举例—通道-select\"><a href=\"#4-场景举例—通道-select\" class=\"headerlink\" title=\"4. 场景举例—通道+select\"></a>4. 场景举例—通道+select</h2><p>针对等待组场景遗留的问题，解决办法：</p>\n<blockquote>\n<ol>\n<li>设置全局变量，在通知goroutine要停止时，为全局变量赋值，但是这样必须保证线程安全，不可避免的必须为全局变量加锁，显得有失便利；</li>\n<li>使用chan + select多路复用的方式，就会优雅许多；</li>\n</ol>\n</blockquote>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n \n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"fmt\"</span>\n    <span class=\"token string\">\"time\"</span>\n<span class=\"token punctuation\">)</span>\n \n<span class=\"token keyword\">func</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>stop <span class=\"token keyword\">chan</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">select</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>stop<span class=\"token punctuation\">:</span>\n            fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"任务1结束退出\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span>\n        <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n            fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"任务1正在运行中\"</span><span class=\"token punctuation\">)</span>\n            time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n \n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    stop <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">go</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>stop<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 开启goroutine</span>\n \n    <span class=\"token comment\">// 运行一段时间后停止</span>\n    time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"停止任务1。。。\"</span><span class=\"token punctuation\">)</span>\n    stop <span class=\"token operator\">&lt;-</span> <span class=\"token boolean\">true</span>\n    time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>运行结果：</strong><br><img src=\"/upload/2022/05/image-1651908425418.png\" alt=\"image-1651908425418\"><br><strong>优点：</strong> 优雅、简单<br><strong>不足：</strong> 如果有很多 goroutine 都需要控制结束，并且这些 goroutine 又开启其它更多的goroutine ？</p>\n<h2 id=\"5-场景举例—普通context\"><a href=\"#5-场景举例—普通context\" class=\"headerlink\" title=\"5. 场景举例—普通context\"></a>5. 场景举例—普通context</h2><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n \n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"context\"</span>\n    <span class=\"token string\">\"fmt\"</span>\n    <span class=\"token string\">\"time\"</span>\n<span class=\"token punctuation\">)</span>\n \n<span class=\"token keyword\">func</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> id <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">select</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>ctx<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"任务%v结束退出\\n\"</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span>\n        <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n            fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"任务%v正在运行中\\n\"</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span>\n            time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n \n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//管理启动的协程</span>\n    ctx<span class=\"token punctuation\">,</span> cancel <span class=\"token operator\">:=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">WithCancel</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">Background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 开启多个goroutine，传入ctx</span>\n    <span class=\"token keyword\">go</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">go</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 运行一段时间后停止</span>\n    time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"停止任务1\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 使用context的cancel函数停止goroutine</span>\n    <span class=\"token comment\">// 为了检测监控过是否停止，如果没有监控输出，表示停止</span>\n    time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>说明：</strong> context.Background() 返回一个空的 Context，这个空的 Context 一般用于整个 Context 树的根节点。然后使用 context.WithCancel(parent) 函数，创建一个可取消的子 Context，然后当作参数传给 goroutine 使用，这样就可以使用这个子 Context 跟踪这个 goroutine。</p>\n<p><strong>运行结果：</strong><br><img src=\"/upload/2022/05/image-1651908618179.png\" alt=\"image-1651908618179\"></p>\n<h2 id=\"6-场景举例—Context超时\"><a href=\"#6-场景举例—Context超时\" class=\"headerlink\" title=\"6. 场景举例—Context超时\"></a>6. 场景举例—Context超时</h2><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n \n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"context\"</span>\n    <span class=\"token string\">\"fmt\"</span>\n    <span class=\"token string\">\"sync\"</span>\n    <span class=\"token string\">\"time\"</span>\n<span class=\"token punctuation\">)</span>\n \n<span class=\"token keyword\">func</span> <span class=\"token function\">coroutine</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> duration time<span class=\"token punctuation\">.</span>Duration<span class=\"token punctuation\">,</span> id <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> wg <span class=\"token operator\">*</span>sync<span class=\"token punctuation\">.</span>WaitGroup<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">select</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>ctx<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"协程 %d 退出\\n\"</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span>\n            wg<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span>\n        <span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>time<span class=\"token punctuation\">.</span><span class=\"token function\">After</span><span class=\"token punctuation\">(</span>duration<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"消息来自协程 %d\\n\"</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n \n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//使用WaitGroup等待所有的goroutine执行完毕，在收到&lt;-ctx.Done()的终止信号后使wg中需要等待的goroutine数量减一。</span>\n    <span class=\"token comment\">// 因为context只负责取消goroutine，不负责等待goroutine运行，所以需要配合一点辅助手段</span>\n    <span class=\"token comment\">//管理启动的协程</span>\n    wg <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>sync<span class=\"token punctuation\">.</span>WaitGroup<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n    ctx<span class=\"token punctuation\">,</span> cancel <span class=\"token operator\">:=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">WithTimeout</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">Background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token operator\">*</span>time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">defer</span> <span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span>\n        wg<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">go</span> <span class=\"token function\">coroutine</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token operator\">*</span>time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> wg<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n    wg<span class=\"token punctuation\">.</span><span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>说明：</strong> 代码中使用WaitGroup等待所有的goroutine执行完毕，在收到&lt;-ctx.Done()的终止信号后使wg中需要等待的goroutine数量减一， 因为context只负责取消goroutine，不负责等待goroutine运行，需要配合一点辅助手段<br><strong>运行结果：</strong> </p>\n<p><img src=\"/upload/2022/05/image-1651908781361.png\" alt=\"image-1651908781361\"></p>\n<h2 id=\"7-场景举例—Context传递元数据\"><a href=\"#7-场景举例—Context传递元数据\" class=\"headerlink\" title=\"7. 场景举例—Context传递元数据\"></a>7. 场景举例—Context传递元数据</h2><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n \n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"context\"</span>\n    <span class=\"token string\">\"fmt\"</span>\n    <span class=\"token string\">\"time\"</span>\n<span class=\"token punctuation\">)</span>\n \n<span class=\"token keyword\">var</span> key <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"name\"</span>\n \n<span class=\"token keyword\">func</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">select</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>ctx<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"任务%v结束退出\\n\"</span><span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">Value</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span>\n        <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n            fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"任务%v正在运行中\\n\"</span><span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">Value</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n \n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//管理启动的协程</span>\n    ctx<span class=\"token punctuation\">,</span> cancel <span class=\"token operator\">:=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">WithCancel</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">Background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 给ctx绑定键值，传递给goroutine</span>\n    valuectx <span class=\"token operator\">:=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">WithValue</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> <span class=\"token string\">\"【监控1】\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 开启goroutine，传入ctx</span>\n    <span class=\"token keyword\">go</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>valuectx<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 运行一段时间后停止</span>\n    time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"停止任务\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 使用context的cancel函数停止goroutine</span>\n    <span class=\"token comment\">// 为了检测监控过是否停止，如果没有监控输出，表示停止</span>\n    time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>运行结果：</strong><br><img src=\"/upload/2022/05/image-1651908878817.png\" alt=\"image-1651908878817\"></p>\n<h2 id=\"8-context总结\"><a href=\"#8-context总结\" class=\"headerlink\" title=\"8. context总结\"></a>8. context总结</h2><blockquote>\n<ol>\n<li>不要把 Context 放在结构体中，要以参数的方式传递</li>\n<li>以 Context 作为参数的函数方法，应该把 Context 作为第一个参数，放在第一位</li>\n<li>给一个函数方法传递 Context 的时候，不要传递 nil，如果不知道传递什么，就使用 context.TODO</li>\n<li>Context 的 Value 相关方法应该传递必须的数据，不要什么数据都使用这个传递</li>\n<li>Context 是线程安全的，可以放心的在多个 goroutine 中传递</li>\n</ol>\n</blockquote>"},{"title":"go 中 new和make的区别","url":"/archives/go-zhong-new-he-make-de-qu-bie","abbrlink":"34454ed8","date":"2022-05-07T06:16:01.000Z","updated":"2022-05-07T06:16:01.000Z","_content":"\n# go中new和make的区别\n\nnew和make是用于go中分配内存的，简单来说，new只分配内存，make用于初始化slice、map以及channel。\n\nGo语言中的 new 和 make 主要区别如下：\nmake 只能用来分配及初始化类型为 slice、map、chan 的数据。new 可以分配任意类型的数据；\nnew 分配返回的是指针，即类型 *Type。make 返回引用，即 Type；\nnew 分配的空间被清零。make 分配空间后，会进行初始化；\n","source":"_posts/go中new和make的区别.md","raw":"---\ntitle: go 中 new和make的区别\nurl: /archives/go-zhong-new-he-make-de-qu-bie\ncategories:\n  - golang\ntags:\n  - golang\nabbrlink: 34454ed8\ndate: 2022-05-07 14:16:01\nupdated: 2022-05-07 14:16:01\n---\n\n# go中new和make的区别\n\nnew和make是用于go中分配内存的，简单来说，new只分配内存，make用于初始化slice、map以及channel。\n\nGo语言中的 new 和 make 主要区别如下：\nmake 只能用来分配及初始化类型为 slice、map、chan 的数据。new 可以分配任意类型的数据；\nnew 分配返回的是指针，即类型 *Type。make 返回引用，即 Type；\nnew 分配的空间被清零。make 分配空间后，会进行初始化；\n","slug":"go中new和make的区别","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clh95h7kk002ogwuvaocg2gc4","content":"<h1 id=\"go中new和make的区别\"><a href=\"#go中new和make的区别\" class=\"headerlink\" title=\"go中new和make的区别\"></a>go中new和make的区别</h1><p>new和make是用于go中分配内存的，简单来说，new只分配内存，make用于初始化slice、map以及channel。</p>\n<p>Go语言中的 new 和 make 主要区别如下：<br>make 只能用来分配及初始化类型为 slice、map、chan 的数据。new 可以分配任意类型的数据；<br>new 分配返回的是指针，即类型 *Type。make 返回引用，即 Type；<br>new 分配的空间被清零。make 分配空间后，会进行初始化；</p>\n","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}},"cover":false,"excerpt":"","more":"<h1 id=\"go中new和make的区别\"><a href=\"#go中new和make的区别\" class=\"headerlink\" title=\"go中new和make的区别\"></a>go中new和make的区别</h1><p>new和make是用于go中分配内存的，简单来说，new只分配内存，make用于初始化slice、map以及channel。</p>\n<p>Go语言中的 new 和 make 主要区别如下：<br>make 只能用来分配及初始化类型为 slice、map、chan 的数据。new 可以分配任意类型的数据；<br>new 分配返回的是指针，即类型 *Type。make 返回引用，即 Type；<br>new 分配的空间被清零。make 分配空间后，会进行初始化；</p>\n"},{"title":"linux 命令行配置代理","url":"/archives/linuxming-ling-xing-pei-zhi-dai-li","abbrlink":"10aadca5","date":"2022-02-16T07:52:21.000Z","updated":"2022-02-16T07:52:21.000Z","_content":"\n# 命令行配置代理\n\n```bash\nexport http_proxy=http://127.0.0.1:1087\n\nexport https_proxy=$http_proxy\n```\n\n## 此处的IP和端口需要根据具体你代理的实际信息填写，可查看VPN客户端的config.json\n\n```json\n\"inbounds\": [\n {\n \"listen\": \"127.0.0.1\",\n \"protocol\": \"socks\",\n \"settings\": {\n \"udp\": false,\n \"auth\": \"noauth\"\n },\n \"port\": \"1080\"\n },\n {\n \"listen\": \"127.0.0.1\",\n \"protocol\": \"http\",\n \"settings\": {\n \"timeout\": 360\n },\n \"port\": \"1087\"\n }\n```\n\n检查命令行配置是否完成\n\n```bash\ncurl -i www.google.com\n```\n\n收到200响应表示成功","source":"_posts/linux 命令行配置代理.md","raw":"---\ntitle: linux 命令行配置代理\nurl: /archives/linuxming-ling-xing-pei-zhi-dai-li\ncategories:\n  - linux\ntags:\n  - 代理\n  - linux\n  - bash\nabbrlink: 10aadca5\ndate: 2022-02-16 15:52:21\nupdated: 2022-02-16 15:52:21\n---\n\n# 命令行配置代理\n\n```bash\nexport http_proxy=http://127.0.0.1:1087\n\nexport https_proxy=$http_proxy\n```\n\n## 此处的IP和端口需要根据具体你代理的实际信息填写，可查看VPN客户端的config.json\n\n```json\n\"inbounds\": [\n {\n \"listen\": \"127.0.0.1\",\n \"protocol\": \"socks\",\n \"settings\": {\n \"udp\": false,\n \"auth\": \"noauth\"\n },\n \"port\": \"1080\"\n },\n {\n \"listen\": \"127.0.0.1\",\n \"protocol\": \"http\",\n \"settings\": {\n \"timeout\": 360\n },\n \"port\": \"1087\"\n }\n```\n\n检查命令行配置是否完成\n\n```bash\ncurl -i www.google.com\n```\n\n收到200响应表示成功","slug":"linux 命令行配置代理","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clh95h7kl002sgwuvbzjyfomo","content":"<h1 id=\"命令行配置代理\"><a href=\"#命令行配置代理\" class=\"headerlink\" title=\"命令行配置代理\"></a>命令行配置代理</h1><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">http_proxy</span><span class=\"token operator\">=</span>http://127.0.0.1:1087\n\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">https_proxy</span><span class=\"token operator\">=</span><span class=\"token variable\">$http_proxy</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"此处的IP和端口需要根据具体你代理的实际信息填写，可查看VPN客户端的config-json\"><a href=\"#此处的IP和端口需要根据具体你代理的实际信息填写，可查看VPN客户端的config-json\" class=\"headerlink\" title=\"此处的IP和端口需要根据具体你代理的实际信息填写，可查看VPN客户端的config.json\"></a>此处的IP和端口需要根据具体你代理的实际信息填写，可查看VPN客户端的config.json</h2><pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token property\">\"inbounds\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n <span class=\"token punctuation\">&#123;</span>\n <span class=\"token property\">\"listen\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">,</span>\n <span class=\"token property\">\"protocol\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"socks\"</span><span class=\"token punctuation\">,</span>\n <span class=\"token property\">\"settings\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n <span class=\"token property\">\"udp\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n <span class=\"token property\">\"auth\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"noauth\"</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n <span class=\"token property\">\"port\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1080\"</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">&#123;</span>\n <span class=\"token property\">\"listen\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">,</span>\n <span class=\"token property\">\"protocol\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"http\"</span><span class=\"token punctuation\">,</span>\n <span class=\"token property\">\"settings\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n <span class=\"token property\">\"timeout\"</span><span class=\"token operator\">:</span> <span class=\"token number\">360</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n <span class=\"token property\">\"port\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1087\"</span>\n <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>检查命令行配置是否完成</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> -i www.google.com<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>收到200响应表示成功</p>\n","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}},"cover":false,"excerpt":"","more":"<h1 id=\"命令行配置代理\"><a href=\"#命令行配置代理\" class=\"headerlink\" title=\"命令行配置代理\"></a>命令行配置代理</h1><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">http_proxy</span><span class=\"token operator\">=</span>http://127.0.0.1:1087\n\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">https_proxy</span><span class=\"token operator\">=</span><span class=\"token variable\">$http_proxy</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"此处的IP和端口需要根据具体你代理的实际信息填写，可查看VPN客户端的config-json\"><a href=\"#此处的IP和端口需要根据具体你代理的实际信息填写，可查看VPN客户端的config-json\" class=\"headerlink\" title=\"此处的IP和端口需要根据具体你代理的实际信息填写，可查看VPN客户端的config.json\"></a>此处的IP和端口需要根据具体你代理的实际信息填写，可查看VPN客户端的config.json</h2><pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token property\">\"inbounds\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n <span class=\"token punctuation\">&#123;</span>\n <span class=\"token property\">\"listen\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">,</span>\n <span class=\"token property\">\"protocol\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"socks\"</span><span class=\"token punctuation\">,</span>\n <span class=\"token property\">\"settings\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n <span class=\"token property\">\"udp\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n <span class=\"token property\">\"auth\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"noauth\"</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n <span class=\"token property\">\"port\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1080\"</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">&#123;</span>\n <span class=\"token property\">\"listen\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">,</span>\n <span class=\"token property\">\"protocol\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"http\"</span><span class=\"token punctuation\">,</span>\n <span class=\"token property\">\"settings\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n <span class=\"token property\">\"timeout\"</span><span class=\"token operator\">:</span> <span class=\"token number\">360</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n <span class=\"token property\">\"port\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1087\"</span>\n <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>检查命令行配置是否完成</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> -i www.google.com<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>收到200响应表示成功</p>\n"},{"abbrlink":"56d93994","date":"2023-04-25T15:23:32.000Z","excerpt":"linux查看进程 ps [-e -f]  选项：-e 显示全部进程 选项：-f 以完全格式化的形式展示信息 bash ps -ef  UID:进程所属的用户ID PID:进程的进程号ID PPID:进程所属的父ID（启动此进程的其他进程） C:此进程的CPU占用率（百分比） STIME:进程的启动时间 TTY:启动此进程的终端序号，如果显示？ 则表示不是由终端启动 TIME:进程所占用的cpu时...","title":"linux查看进程","updated":"2023-04-25T16:08:01.000Z","_content":"# linux查看进程\n\nps [-e -f]\n\n- 选项：-e 显示全部进程\n- 选项：-f 以完全格式化的形式展示信息\n\n```bash\nps -ef\n```\n\n![http://img.carrotvegeta.icu/blog/2023-4-4ff8e84007b23ff6f5a8e52f059f10c5.png](http://img.carrotvegeta.icu/blog/2023-4-4ff8e84007b23ff6f5a8e52f059f10c5.png)\n\n- UID:进程所属的用户ID\n- PID:进程的进程号ID\n- PPID:进程所属的父ID（启动此进程的其他进程）\n- C:此进程的CPU占用率（百分比）\n- STIME:进程的启动时间\n- TTY:启动此进程的终端序号，如果显示？ 则表示不是由终端启动\n- TIME:进程所占用的cpu时间\n- CMD:启动此进程的命令或启动路径\n\n","source":"_posts/linux查看进程.md","raw":"---\nabbrlink: 56d93994\ncategories:\n  - - linux\ndate: '2023-04-25 23:23:32'\nexcerpt: >-\n  linux查看进程 ps [-e -f]  选项：-e 显示全部进程 选项：-f 以完全格式化的形式展示信息 bash ps -ef \n  UID:进程所属的用户ID PID:进程的进程号ID PPID:进程所属的父ID（启动此进程的其他进程） C:此进程的CPU占用率（百分比）\n  STIME:进程的启动时间 TTY:启动此进程的终端序号，如果显示？ 则表示不是由终端启动 TIME:进程所占用的cpu时...\ntags:\n  - linux\ntitle: linux查看进程\nupdated: 'Tue, 25 Apr 2023 16:08:01 GMT'\n---\n# linux查看进程\n\nps [-e -f]\n\n- 选项：-e 显示全部进程\n- 选项：-f 以完全格式化的形式展示信息\n\n```bash\nps -ef\n```\n\n![http://img.carrotvegeta.icu/blog/2023-4-4ff8e84007b23ff6f5a8e52f059f10c5.png](http://img.carrotvegeta.icu/blog/2023-4-4ff8e84007b23ff6f5a8e52f059f10c5.png)\n\n- UID:进程所属的用户ID\n- PID:进程的进程号ID\n- PPID:进程所属的父ID（启动此进程的其他进程）\n- C:此进程的CPU占用率（百分比）\n- STIME:进程的启动时间\n- TTY:启动此进程的终端序号，如果显示？ 则表示不是由终端启动\n- TIME:进程所占用的cpu时间\n- CMD:启动此进程的命令或启动路径\n\n","slug":"linux查看进程","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clh95h7kn002wgwuvh1v13136","content":"<h1 id=\"linux查看进程\"><a href=\"#linux查看进程\" class=\"headerlink\" title=\"linux查看进程\"></a>linux查看进程</h1><p>ps [-e -f]</p>\n<ul>\n<li>选项：-e 显示全部进程</li>\n<li>选项：-f 以完全格式化的形式展示信息</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ps</span> -ef<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"http://img.carrotvegeta.icu/blog/2023-4-4ff8e84007b23ff6f5a8e52f059f10c5.png\" alt=\"http://img.carrotvegeta.icu/blog/2023-4-4ff8e84007b23ff6f5a8e52f059f10c5.png\"></p>\n<ul>\n<li>UID:进程所属的用户ID</li>\n<li>PID:进程的进程号ID</li>\n<li>PPID:进程所属的父ID（启动此进程的其他进程）</li>\n<li>C:此进程的CPU占用率（百分比）</li>\n<li>STIME:进程的启动时间</li>\n<li>TTY:启动此进程的终端序号，如果显示？ 则表示不是由终端启动</li>\n<li>TIME:进程所占用的cpu时间</li>\n<li>CMD:启动此进程的命令或启动路径</li>\n</ul>\n","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}},"cover":false,"more":"<h1 id=\"linux查看进程\"><a href=\"#linux查看进程\" class=\"headerlink\" title=\"linux查看进程\"></a>linux查看进程</h1><p>ps [-e -f]</p>\n<ul>\n<li>选项：-e 显示全部进程</li>\n<li>选项：-f 以完全格式化的形式展示信息</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ps</span> -ef<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"http://img.carrotvegeta.icu/blog/2023-4-4ff8e84007b23ff6f5a8e52f059f10c5.png\" alt=\"http://img.carrotvegeta.icu/blog/2023-4-4ff8e84007b23ff6f5a8e52f059f10c5.png\"></p>\n<ul>\n<li>UID:进程所属的用户ID</li>\n<li>PID:进程的进程号ID</li>\n<li>PPID:进程所属的父ID（启动此进程的其他进程）</li>\n<li>C:此进程的CPU占用率（百分比）</li>\n<li>STIME:进程的启动时间</li>\n<li>TTY:启动此进程的终端序号，如果显示？ 则表示不是由终端启动</li>\n<li>TIME:进程所占用的cpu时间</li>\n<li>CMD:启动此进程的命令或启动路径</li>\n</ul>\n"},{"abbrlink":"adb7f6d5","date":"2023-04-25T15:08:04.000Z","title":"linux端口号查看","updated":"2023-04-25T15:19:57.000Z","_content":"# linux端口号查看\n\n1. nmap用于查看服务器对外开放的端口\n   \n   安装\n   \n   ```bash\n   yum -y install nmap\n   ```\n   \n   查看本机对外端口\n   \n   ```bash\n   nmap 127.0.0.1\n   ```\n2. netstat命令 用于查看本机端口号占用\n\n   安装\n   \n   ```bash\n   yum -y install net-tools\n   ```\n\n   查看端口占用\n\n   ```bash\n   netstat -anp|grep 3306\n   ```\n\n","source":"_posts/linux端口号查看.md","raw":"---\nabbrlink: adb7f6d5\ncategories:\n  - - linux\ndate: '2023-04-25 23:08:04'\ntags:\n  - linux\ntitle: linux端口号查看\nupdated: 'Tue, 25 Apr 2023 15:19:57 GMT'\n---\n# linux端口号查看\n\n1. nmap用于查看服务器对外开放的端口\n   \n   安装\n   \n   ```bash\n   yum -y install nmap\n   ```\n   \n   查看本机对外端口\n   \n   ```bash\n   nmap 127.0.0.1\n   ```\n2. netstat命令 用于查看本机端口号占用\n\n   安装\n   \n   ```bash\n   yum -y install net-tools\n   ```\n\n   查看端口占用\n\n   ```bash\n   netstat -anp|grep 3306\n   ```\n\n","slug":"linux端口号查看","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clh95h7ko0030gwuv34tkbhf1","content":"<h1 id=\"linux端口号查看\"><a href=\"#linux端口号查看\" class=\"headerlink\" title=\"linux端口号查看\"></a>linux端口号查看</h1><ol>\n<li><p>nmap用于查看服务器对外开放的端口</p>\n<p>安装</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">yum -y <span class=\"token function\">install</span> nmap<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>查看本机对外端口</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">nmap <span class=\"token number\">127.0</span>.0.1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>netstat命令 用于查看本机端口号占用</p>\n<p>安装</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">yum -y <span class=\"token function\">install</span> net-tools<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>查看端口占用</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">netstat</span> -anp<span class=\"token operator\">|</span><span class=\"token function\">grep</span> <span class=\"token number\">3306</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ol>\n","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}},"cover":false,"excerpt":"","more":"<h1 id=\"linux端口号查看\"><a href=\"#linux端口号查看\" class=\"headerlink\" title=\"linux端口号查看\"></a>linux端口号查看</h1><ol>\n<li><p>nmap用于查看服务器对外开放的端口</p>\n<p>安装</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">yum -y <span class=\"token function\">install</span> nmap<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>查看本机对外端口</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">nmap <span class=\"token number\">127.0</span>.0.1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>netstat命令 用于查看本机端口号占用</p>\n<p>安装</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">yum -y <span class=\"token function\">install</span> net-tools<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>查看端口占用</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">netstat</span> -anp<span class=\"token operator\">|</span><span class=\"token function\">grep</span> <span class=\"token number\">3306</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ol>\n"},{"title":"mysql 命令行备份数据","url":"/archives/mysqlming-ling-xing-bei-fen-shu-ju","description":"mysql通过命令行进行备份数据库、表以及恢复数据","abbrlink":"d01613b0","date":"2022-02-16T07:56:50.000Z","updated":"2022-02-16T07:57:00.000Z","_content":"\n[桄椿](https://www.cnblogs.com/gcixx/)\n\n## [mysql命令行备份方法](https://www.cnblogs.com/gcixx/p/11145473.html)\n\n一、mysql备份\n\n1、备份命令\n\n格式：mysqldump -h主机IP -P端口 -u用户名 -p密码 --database 数据库名 > 文件名.sql\n\n```\n# 本地备份可以不添加端口和主机IP，username、passward是数据库用户名和密码\nmysqldump -h *.*.*.* -p 3306 -u username -p password --database mysql > /data/backup/mysql.sql\n```\n\n2、备份压缩\n\n格式：mysqldump -h主机IP -P端口 -u用户名 -p密码 --database 数据库名 | gzip > 文件名.sql.gz\n\n```\n# 导出的数据有可能比较大，不好备份到远程，这时候就需要进行压缩\nmysqldump -h *.*.*.* -p 3306 -u username -p password --database mysql | gzip > /data/backup/mysql.sql.gz\n```\n\n3、备份同个库多个表\n\n格式：mysqldump -h主机IP -P端口 -u用户名 -p密码 --database 数据库名 表1 表2 .... > 文件名.sql\n\n```\nmysqldump -h *.*.*.* -p 3306 -u username -p password mysql1 mysql2 mysql3> /data/backup/mysql_db.sql\n```\n\n4、同时备份多个库\n\n格式：mysqldump -h主机IP -P端口 -u用户名 -p密码 --databases 数据库名1 数据库名2 数据库名3 > 文件名.sql\n\n```\nmysqldump -h *.*.*.* -p 3306 -u username -p password --databases mysql1 mysql2 mysql3 > /data/backup/mysql_db.sql\n```\n\n5、备份实例上所有的数据库\n\n格式：mysqldump -h主机IP -P端口 -u用户名 -p密码 --all-databases > 文件名.sql\n\n```\nmysqldump -h *.*.*.* -p 3306 -u username -p password --all-databases > /data/backup/mysql_db.sql\n```\n\n6、备份数据出带删除数据库或者表的sql备份\n\n格式：mysqldump -h主机IP -P端口 -u用户名 -p密码 --add-drop-table --add-drop-database 数据库名 > 文件名.sql\n\n```\nmysqldump -h *.*.*.* -p 3306 -u username -p password --add-drop-table --add-drop-database mysql > /data/backup/mysql_db.sql\n```\n\n7、备份数据库结构，不备份数据\n\n格式：mysqldump -h主机IP -P端口 -u用户名 -p密码 --no-data 数据库名1 数据库名2 数据库名3 > 文件名.sql\n\n```\nmysqldump -h *.*.*.* -p 3306 -u username -p password --no-data –databases mysql1 mysql2 mysql3 > /data/backup/structure_db.sql\n```\n\n8、还原MySQL数据库的命令\n\n```\n# database为数据库名\nmysql -h *.*.*.* -u username -p password database < backupfile.sql\n```\n\n9、还原压缩的MySQL数据库\n\n```\n# database为数据库名\ngunzip < backupfile.sql.gz | mysql -u username -p password database\n```\n\n10、将数据库转移到新服务器\n\n```\n# database为数据库名\nmysqldump -u username -p password database | mysql –host=*.*.*.* -C database\n```\n\n11、--master-data 和--single-transaction\n\n 在mysqldump中使用--master-data=2，会记录binlog文件和position的信息 。\n\n --single-transaction会将隔离级别设置成repeatable-commited。\n\n12、导入数据库\n\n 常用source命令，用use进入到某个数据库，mysql>source d:\\test.sql，后面的参数为脚本文件。\n\n13、查看binlog日志\n\n 查看binlog日志可用命令 mysqlbinlog binlog日志名称|more\n\n14、general_log\n\n General_log记录数据库的任何操作，查看general_log 的状态和位置可以用命令show variables like \"general_log%\" ,开启general_log可以用命令set global general_log=on\n\n二、增量备份\n\n1、首先做一次完整备份：\n\n```\n# 这时候就会得到一个全备文件test.sql\nmysqldump -h *.*.*.* -u username -p passward  -p 3310 --single-transaction  --master-data=2  test>test.sql\n```\n\n在sql文件中我们会看到：\n\n```\n-- 是指备份后所有的更改将会保存到bin-log.000002二进制文件中。\nCHANGE MASTER TO MASTER_LOG_FILE='bin-log.000002', MASTER_LOG_POS=107;\n```\n\n2、在test库的t_student表中增加两条记录，然后执行flush logs命令。\n\n 这时将会产生一个新的二进制日志文件bin-log.000003，bin-log.000002则保存了全备过后的所有更改，既增加记录的操作也保存在了bin-log.00002中。\n\n3、再在test库中的a表中增加两条记录，然后误删除t_student表和a表。\n\n a中增加记录的操作和删除表a和t_student的操作都记录在bin-log.000003中。\n\n## 三、恢复\n\n1、首先导入全备数据\n\n```\n# 也可以直接在mysql命令行下面用source导入\nmysql -h *.*.*.* -u username -p passward  -p 3310 < test.sql\n```\n\n2、恢复bin-log.000002\n\n```\nmysqlbinlog bin-log.000002 |mysql -h *.*.*.* -u username -p passward -p 3310\n```\n\n3、恢复部分 bin-log.000003\n\n在general_log中找到误删除的时间点，然后更加对应的时间点到bin-log.000003中找到相应的position点，需要恢复到误删除的前面一个position点。\n\n可以用如下参数来控制binlog的区间\n\n--start-position 开始点 --stop-position 结束点\n\n--start-date 开始时间 --stop-date 结束时间\n\n找到恢复点后，既可以开始恢复。\n\n```\nmysqlbinlog mysql-bin.000003 --stop-position=208 |mysql -h *.*.*.* -u username -p passward -p 3310 \n```\n","source":"_posts/mysql命令行备份数据.md","raw":"---\ntitle: mysql 命令行备份数据\nurl: /archives/mysqlming-ling-xing-bei-fen-shu-ju\ndescription: mysql通过命令行进行备份数据库、表以及恢复数据\ncategories:\n  - mysql\ntags:\n  - 备份\n  - 恢复\n  - mysql\nabbrlink: d01613b0\ndate: 2022-02-16 15:56:50\nupdated: 2022-02-16 15:57:00\n---\n\n[桄椿](https://www.cnblogs.com/gcixx/)\n\n## [mysql命令行备份方法](https://www.cnblogs.com/gcixx/p/11145473.html)\n\n一、mysql备份\n\n1、备份命令\n\n格式：mysqldump -h主机IP -P端口 -u用户名 -p密码 --database 数据库名 > 文件名.sql\n\n```\n# 本地备份可以不添加端口和主机IP，username、passward是数据库用户名和密码\nmysqldump -h *.*.*.* -p 3306 -u username -p password --database mysql > /data/backup/mysql.sql\n```\n\n2、备份压缩\n\n格式：mysqldump -h主机IP -P端口 -u用户名 -p密码 --database 数据库名 | gzip > 文件名.sql.gz\n\n```\n# 导出的数据有可能比较大，不好备份到远程，这时候就需要进行压缩\nmysqldump -h *.*.*.* -p 3306 -u username -p password --database mysql | gzip > /data/backup/mysql.sql.gz\n```\n\n3、备份同个库多个表\n\n格式：mysqldump -h主机IP -P端口 -u用户名 -p密码 --database 数据库名 表1 表2 .... > 文件名.sql\n\n```\nmysqldump -h *.*.*.* -p 3306 -u username -p password mysql1 mysql2 mysql3> /data/backup/mysql_db.sql\n```\n\n4、同时备份多个库\n\n格式：mysqldump -h主机IP -P端口 -u用户名 -p密码 --databases 数据库名1 数据库名2 数据库名3 > 文件名.sql\n\n```\nmysqldump -h *.*.*.* -p 3306 -u username -p password --databases mysql1 mysql2 mysql3 > /data/backup/mysql_db.sql\n```\n\n5、备份实例上所有的数据库\n\n格式：mysqldump -h主机IP -P端口 -u用户名 -p密码 --all-databases > 文件名.sql\n\n```\nmysqldump -h *.*.*.* -p 3306 -u username -p password --all-databases > /data/backup/mysql_db.sql\n```\n\n6、备份数据出带删除数据库或者表的sql备份\n\n格式：mysqldump -h主机IP -P端口 -u用户名 -p密码 --add-drop-table --add-drop-database 数据库名 > 文件名.sql\n\n```\nmysqldump -h *.*.*.* -p 3306 -u username -p password --add-drop-table --add-drop-database mysql > /data/backup/mysql_db.sql\n```\n\n7、备份数据库结构，不备份数据\n\n格式：mysqldump -h主机IP -P端口 -u用户名 -p密码 --no-data 数据库名1 数据库名2 数据库名3 > 文件名.sql\n\n```\nmysqldump -h *.*.*.* -p 3306 -u username -p password --no-data –databases mysql1 mysql2 mysql3 > /data/backup/structure_db.sql\n```\n\n8、还原MySQL数据库的命令\n\n```\n# database为数据库名\nmysql -h *.*.*.* -u username -p password database < backupfile.sql\n```\n\n9、还原压缩的MySQL数据库\n\n```\n# database为数据库名\ngunzip < backupfile.sql.gz | mysql -u username -p password database\n```\n\n10、将数据库转移到新服务器\n\n```\n# database为数据库名\nmysqldump -u username -p password database | mysql –host=*.*.*.* -C database\n```\n\n11、--master-data 和--single-transaction\n\n 在mysqldump中使用--master-data=2，会记录binlog文件和position的信息 。\n\n --single-transaction会将隔离级别设置成repeatable-commited。\n\n12、导入数据库\n\n 常用source命令，用use进入到某个数据库，mysql>source d:\\test.sql，后面的参数为脚本文件。\n\n13、查看binlog日志\n\n 查看binlog日志可用命令 mysqlbinlog binlog日志名称|more\n\n14、general_log\n\n General_log记录数据库的任何操作，查看general_log 的状态和位置可以用命令show variables like \"general_log%\" ,开启general_log可以用命令set global general_log=on\n\n二、增量备份\n\n1、首先做一次完整备份：\n\n```\n# 这时候就会得到一个全备文件test.sql\nmysqldump -h *.*.*.* -u username -p passward  -p 3310 --single-transaction  --master-data=2  test>test.sql\n```\n\n在sql文件中我们会看到：\n\n```\n-- 是指备份后所有的更改将会保存到bin-log.000002二进制文件中。\nCHANGE MASTER TO MASTER_LOG_FILE='bin-log.000002', MASTER_LOG_POS=107;\n```\n\n2、在test库的t_student表中增加两条记录，然后执行flush logs命令。\n\n 这时将会产生一个新的二进制日志文件bin-log.000003，bin-log.000002则保存了全备过后的所有更改，既增加记录的操作也保存在了bin-log.00002中。\n\n3、再在test库中的a表中增加两条记录，然后误删除t_student表和a表。\n\n a中增加记录的操作和删除表a和t_student的操作都记录在bin-log.000003中。\n\n## 三、恢复\n\n1、首先导入全备数据\n\n```\n# 也可以直接在mysql命令行下面用source导入\nmysql -h *.*.*.* -u username -p passward  -p 3310 < test.sql\n```\n\n2、恢复bin-log.000002\n\n```\nmysqlbinlog bin-log.000002 |mysql -h *.*.*.* -u username -p passward -p 3310\n```\n\n3、恢复部分 bin-log.000003\n\n在general_log中找到误删除的时间点，然后更加对应的时间点到bin-log.000003中找到相应的position点，需要恢复到误删除的前面一个position点。\n\n可以用如下参数来控制binlog的区间\n\n--start-position 开始点 --stop-position 结束点\n\n--start-date 开始时间 --stop-date 结束时间\n\n找到恢复点后，既可以开始恢复。\n\n```\nmysqlbinlog mysql-bin.000003 --stop-position=208 |mysql -h *.*.*.* -u username -p passward -p 3310 \n```\n","slug":"mysql命令行备份数据","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clh95h7kp0034gwuv9sovet95","content":"<p><a href=\"https://www.cnblogs.com/gcixx/\">桄椿</a></p>\n<h2 id=\"mysql命令行备份方法\"><a href=\"#mysql命令行备份方法\" class=\"headerlink\" title=\"mysql命令行备份方法\"></a><a href=\"https://www.cnblogs.com/gcixx/p/11145473.html\">mysql命令行备份方法</a></h2><p>一、mysql备份</p>\n<p>1、备份命令</p>\n<p>格式：mysqldump -h主机IP -P端口 -u用户名 -p密码 –database 数据库名 &gt; 文件名.sql</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># 本地备份可以不添加端口和主机IP，username、passward是数据库用户名和密码\nmysqldump -h *.*.*.* -p 3306 -u username -p password --database mysql &gt; &#x2F;data&#x2F;backup&#x2F;mysql.sql<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>2、备份压缩</p>\n<p>格式：mysqldump -h主机IP -P端口 -u用户名 -p密码 –database 数据库名 | gzip &gt; 文件名.sql.gz</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># 导出的数据有可能比较大，不好备份到远程，这时候就需要进行压缩\nmysqldump -h *.*.*.* -p 3306 -u username -p password --database mysql | gzip &gt; &#x2F;data&#x2F;backup&#x2F;mysql.sql.gz<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>3、备份同个库多个表</p>\n<p>格式：mysqldump -h主机IP -P端口 -u用户名 -p密码 –database 数据库名 表1 表2 …. &gt; 文件名.sql</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">mysqldump -h *.*.*.* -p 3306 -u username -p password mysql1 mysql2 mysql3&gt; &#x2F;data&#x2F;backup&#x2F;mysql_db.sql<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>4、同时备份多个库</p>\n<p>格式：mysqldump -h主机IP -P端口 -u用户名 -p密码 –databases 数据库名1 数据库名2 数据库名3 &gt; 文件名.sql</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">mysqldump -h *.*.*.* -p 3306 -u username -p password --databases mysql1 mysql2 mysql3 &gt; &#x2F;data&#x2F;backup&#x2F;mysql_db.sql<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>5、备份实例上所有的数据库</p>\n<p>格式：mysqldump -h主机IP -P端口 -u用户名 -p密码 –all-databases &gt; 文件名.sql</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">mysqldump -h *.*.*.* -p 3306 -u username -p password --all-databases &gt; &#x2F;data&#x2F;backup&#x2F;mysql_db.sql<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>6、备份数据出带删除数据库或者表的sql备份</p>\n<p>格式：mysqldump -h主机IP -P端口 -u用户名 -p密码 –add-drop-table –add-drop-database 数据库名 &gt; 文件名.sql</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">mysqldump -h *.*.*.* -p 3306 -u username -p password --add-drop-table --add-drop-database mysql &gt; &#x2F;data&#x2F;backup&#x2F;mysql_db.sql<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>7、备份数据库结构，不备份数据</p>\n<p>格式：mysqldump -h主机IP -P端口 -u用户名 -p密码 –no-data 数据库名1 数据库名2 数据库名3 &gt; 文件名.sql</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">mysqldump -h *.*.*.* -p 3306 -u username -p password --no-data –databases mysql1 mysql2 mysql3 &gt; &#x2F;data&#x2F;backup&#x2F;structure_db.sql<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>8、还原MySQL数据库的命令</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># database为数据库名\nmysql -h *.*.*.* -u username -p password database &lt; backupfile.sql<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>9、还原压缩的MySQL数据库</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># database为数据库名\ngunzip &lt; backupfile.sql.gz | mysql -u username -p password database<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>10、将数据库转移到新服务器</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># database为数据库名\nmysqldump -u username -p password database | mysql –host&#x3D;*.*.*.* -C database<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>11、–master-data 和–single-transaction</p>\n<p> 在mysqldump中使用–master-data&#x3D;2，会记录binlog文件和position的信息 。</p>\n<p> –single-transaction会将隔离级别设置成repeatable-commited。</p>\n<p>12、导入数据库</p>\n<p> 常用source命令，用use进入到某个数据库，mysql&gt;source d:\\test.sql，后面的参数为脚本文件。</p>\n<p>13、查看binlog日志</p>\n<p> 查看binlog日志可用命令 mysqlbinlog binlog日志名称|more</p>\n<p>14、general_log</p>\n<p> General_log记录数据库的任何操作，查看general_log 的状态和位置可以用命令show variables like “general_log%” ,开启general_log可以用命令set global general_log&#x3D;on</p>\n<p>二、增量备份</p>\n<p>1、首先做一次完整备份：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># 这时候就会得到一个全备文件test.sql\nmysqldump -h *.*.*.* -u username -p passward  -p 3310 --single-transaction  --master-data&#x3D;2  test&gt;test.sql<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>在sql文件中我们会看到：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">-- 是指备份后所有的更改将会保存到bin-log.000002二进制文件中。\nCHANGE MASTER TO MASTER_LOG_FILE&#x3D;&#39;bin-log.000002&#39;, MASTER_LOG_POS&#x3D;107;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>2、在test库的t_student表中增加两条记录，然后执行flush logs命令。</p>\n<p> 这时将会产生一个新的二进制日志文件bin-log.000003，bin-log.000002则保存了全备过后的所有更改，既增加记录的操作也保存在了bin-log.00002中。</p>\n<p>3、再在test库中的a表中增加两条记录，然后误删除t_student表和a表。</p>\n<p> a中增加记录的操作和删除表a和t_student的操作都记录在bin-log.000003中。</p>\n<h2 id=\"三、恢复\"><a href=\"#三、恢复\" class=\"headerlink\" title=\"三、恢复\"></a>三、恢复</h2><p>1、首先导入全备数据</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># 也可以直接在mysql命令行下面用source导入\nmysql -h *.*.*.* -u username -p passward  -p 3310 &lt; test.sql<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>2、恢复bin-log.000002</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">mysqlbinlog bin-log.000002 |mysql -h *.*.*.* -u username -p passward -p 3310<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>3、恢复部分 bin-log.000003</p>\n<p>在general_log中找到误删除的时间点，然后更加对应的时间点到bin-log.000003中找到相应的position点，需要恢复到误删除的前面一个position点。</p>\n<p>可以用如下参数来控制binlog的区间</p>\n<p>–start-position 开始点 –stop-position 结束点</p>\n<p>–start-date 开始时间 –stop-date 结束时间</p>\n<p>找到恢复点后，既可以开始恢复。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">mysqlbinlog mysql-bin.000003 --stop-position&#x3D;208 |mysql -h *.*.*.* -u username -p passward -p 3310 <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}},"cover":false,"excerpt":"","more":"<p><a href=\"https://www.cnblogs.com/gcixx/\">桄椿</a></p>\n<h2 id=\"mysql命令行备份方法\"><a href=\"#mysql命令行备份方法\" class=\"headerlink\" title=\"mysql命令行备份方法\"></a><a href=\"https://www.cnblogs.com/gcixx/p/11145473.html\">mysql命令行备份方法</a></h2><p>一、mysql备份</p>\n<p>1、备份命令</p>\n<p>格式：mysqldump -h主机IP -P端口 -u用户名 -p密码 –database 数据库名 &gt; 文件名.sql</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># 本地备份可以不添加端口和主机IP，username、passward是数据库用户名和密码\nmysqldump -h *.*.*.* -p 3306 -u username -p password --database mysql &gt; &#x2F;data&#x2F;backup&#x2F;mysql.sql<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>2、备份压缩</p>\n<p>格式：mysqldump -h主机IP -P端口 -u用户名 -p密码 –database 数据库名 | gzip &gt; 文件名.sql.gz</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># 导出的数据有可能比较大，不好备份到远程，这时候就需要进行压缩\nmysqldump -h *.*.*.* -p 3306 -u username -p password --database mysql | gzip &gt; &#x2F;data&#x2F;backup&#x2F;mysql.sql.gz<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>3、备份同个库多个表</p>\n<p>格式：mysqldump -h主机IP -P端口 -u用户名 -p密码 –database 数据库名 表1 表2 …. &gt; 文件名.sql</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">mysqldump -h *.*.*.* -p 3306 -u username -p password mysql1 mysql2 mysql3&gt; &#x2F;data&#x2F;backup&#x2F;mysql_db.sql<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>4、同时备份多个库</p>\n<p>格式：mysqldump -h主机IP -P端口 -u用户名 -p密码 –databases 数据库名1 数据库名2 数据库名3 &gt; 文件名.sql</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">mysqldump -h *.*.*.* -p 3306 -u username -p password --databases mysql1 mysql2 mysql3 &gt; &#x2F;data&#x2F;backup&#x2F;mysql_db.sql<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>5、备份实例上所有的数据库</p>\n<p>格式：mysqldump -h主机IP -P端口 -u用户名 -p密码 –all-databases &gt; 文件名.sql</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">mysqldump -h *.*.*.* -p 3306 -u username -p password --all-databases &gt; &#x2F;data&#x2F;backup&#x2F;mysql_db.sql<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>6、备份数据出带删除数据库或者表的sql备份</p>\n<p>格式：mysqldump -h主机IP -P端口 -u用户名 -p密码 –add-drop-table –add-drop-database 数据库名 &gt; 文件名.sql</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">mysqldump -h *.*.*.* -p 3306 -u username -p password --add-drop-table --add-drop-database mysql &gt; &#x2F;data&#x2F;backup&#x2F;mysql_db.sql<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>7、备份数据库结构，不备份数据</p>\n<p>格式：mysqldump -h主机IP -P端口 -u用户名 -p密码 –no-data 数据库名1 数据库名2 数据库名3 &gt; 文件名.sql</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">mysqldump -h *.*.*.* -p 3306 -u username -p password --no-data –databases mysql1 mysql2 mysql3 &gt; &#x2F;data&#x2F;backup&#x2F;structure_db.sql<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>8、还原MySQL数据库的命令</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># database为数据库名\nmysql -h *.*.*.* -u username -p password database &lt; backupfile.sql<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>9、还原压缩的MySQL数据库</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># database为数据库名\ngunzip &lt; backupfile.sql.gz | mysql -u username -p password database<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>10、将数据库转移到新服务器</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># database为数据库名\nmysqldump -u username -p password database | mysql –host&#x3D;*.*.*.* -C database<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>11、–master-data 和–single-transaction</p>\n<p> 在mysqldump中使用–master-data&#x3D;2，会记录binlog文件和position的信息 。</p>\n<p> –single-transaction会将隔离级别设置成repeatable-commited。</p>\n<p>12、导入数据库</p>\n<p> 常用source命令，用use进入到某个数据库，mysql&gt;source d:\\test.sql，后面的参数为脚本文件。</p>\n<p>13、查看binlog日志</p>\n<p> 查看binlog日志可用命令 mysqlbinlog binlog日志名称|more</p>\n<p>14、general_log</p>\n<p> General_log记录数据库的任何操作，查看general_log 的状态和位置可以用命令show variables like “general_log%” ,开启general_log可以用命令set global general_log&#x3D;on</p>\n<p>二、增量备份</p>\n<p>1、首先做一次完整备份：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># 这时候就会得到一个全备文件test.sql\nmysqldump -h *.*.*.* -u username -p passward  -p 3310 --single-transaction  --master-data&#x3D;2  test&gt;test.sql<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>在sql文件中我们会看到：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">-- 是指备份后所有的更改将会保存到bin-log.000002二进制文件中。\nCHANGE MASTER TO MASTER_LOG_FILE&#x3D;&#39;bin-log.000002&#39;, MASTER_LOG_POS&#x3D;107;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>2、在test库的t_student表中增加两条记录，然后执行flush logs命令。</p>\n<p> 这时将会产生一个新的二进制日志文件bin-log.000003，bin-log.000002则保存了全备过后的所有更改，既增加记录的操作也保存在了bin-log.00002中。</p>\n<p>3、再在test库中的a表中增加两条记录，然后误删除t_student表和a表。</p>\n<p> a中增加记录的操作和删除表a和t_student的操作都记录在bin-log.000003中。</p>\n<h2 id=\"三、恢复\"><a href=\"#三、恢复\" class=\"headerlink\" title=\"三、恢复\"></a>三、恢复</h2><p>1、首先导入全备数据</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># 也可以直接在mysql命令行下面用source导入\nmysql -h *.*.*.* -u username -p passward  -p 3310 &lt; test.sql<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>2、恢复bin-log.000002</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">mysqlbinlog bin-log.000002 |mysql -h *.*.*.* -u username -p passward -p 3310<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>3、恢复部分 bin-log.000003</p>\n<p>在general_log中找到误删除的时间点，然后更加对应的时间点到bin-log.000003中找到相应的position点，需要恢复到误删除的前面一个position点。</p>\n<p>可以用如下参数来控制binlog的区间</p>\n<p>–start-position 开始点 –stop-position 结束点</p>\n<p>–start-date 开始时间 –stop-date 结束时间</p>\n<p>找到恢复点后，既可以开始恢复。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">mysqlbinlog mysql-bin.000003 --stop-position&#x3D;208 |mysql -h *.*.*.* -u username -p passward -p 3310 <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n"},{"title":"nginx 启动停止命令","url":"/archives/nginxqi-dong-ting-zhi-ming-ling","abbrlink":"8a666a62","date":"2022-04-06T14:31:35.000Z","updated":"2022-04-06T14:32:09.000Z","_content":"\n# 服务管理\n启动服务：systemctl start nginx\n\n关闭服务： systemctl stop nginx\n\n重载配置：systemctl reload nginx\n\n重启服务：systemctl restart nginx\n","source":"_posts/nginx 启动停止命令.md","raw":"---\ntitle: nginx 启动停止命令\nurl: /archives/nginxqi-dong-ting-zhi-ming-ling\ncategories:\n  - nginx\ntags:\n  - nginx\nabbrlink: 8a666a62\ndate: 2022-04-06 22:31:35\nupdated: 2022-04-06 22:32:09\n---\n\n# 服务管理\n启动服务：systemctl start nginx\n\n关闭服务： systemctl stop nginx\n\n重载配置：systemctl reload nginx\n\n重启服务：systemctl restart nginx\n","slug":"nginx 启动停止命令","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clh95h7kq0038gwuvg8lsfh0b","content":"<h1 id=\"服务管理\"><a href=\"#服务管理\" class=\"headerlink\" title=\"服务管理\"></a>服务管理</h1><p>启动服务：systemctl start nginx</p>\n<p>关闭服务： systemctl stop nginx</p>\n<p>重载配置：systemctl reload nginx</p>\n<p>重启服务：systemctl restart nginx</p>\n","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}},"cover":false,"excerpt":"","more":"<h1 id=\"服务管理\"><a href=\"#服务管理\" class=\"headerlink\" title=\"服务管理\"></a>服务管理</h1><p>启动服务：systemctl start nginx</p>\n<p>关闭服务： systemctl stop nginx</p>\n<p>重载配置：systemctl reload nginx</p>\n<p>重启服务：systemctl restart nginx</p>\n"},{"title":"nginx 基本命令","url":"/archives/nginxji-ben-ming-ling","description":"简介介绍nginx基本命令","abbrlink":"6426f6ef","date":"2022-03-11T03:59:33.000Z","updated":"2022-03-11T04:03:36.000Z","_content":"\n# nginx基本命令\n1、启动：\n使用默认nginx.conf来启动\n```bash\nstart nginx\n```\n如果要指定配置文件来启动则使用以下命令即可：\n```bash\nnginx -c ./conf/jason.conf\n```\n2、关闭：\n\n快速关闭nginx服务。\n```bash\nnginx -s stop\n``` \n优雅的关闭,优雅是指当一个请求被处理完成之后才被关闭。\n```bash\nnginx -s quit\n``` \n\n3、配置语法检查：可进行配置文件的语法检测。\n```bash\nnginx -c ./conf/jason.conf -t\n``` \n4、查看nginx版本信息：-v和-V，一个小写v，一个大写V，两个的含义有些不同。\n\nnginx -v:只是显示nginx的当前版本,如下图\n\n![image.png](/upload/2022/03/image-649783c8200a4d018e2558a7976cc38d.png)\n\nnginx -V：显示nginx版本、编译器版本和配置参数信息，如下图\n\n![image.png](/upload/2022/03/image-61236735bba34682926b603790610f4c.png)\n\n5、重新加载配置文件，nginx是支持热部署的，意思就是可以在不停止服务的情况下进行更新部署。\n```bash\nnginx -s reload \n```\n6、linux命令重启\n查找当前nginx进程号\n```bash\nps -ef|grep nginx\n```\n然后输入命令：\n```bash\nkill -HUP 进程号\n``` \n实现重启nginx服务\n\n7、重新打开日志文件。\n```bash\nnginx -s reopen\n``` \n","source":"_posts/nginx基本命令.md","raw":"---\ntitle: nginx 基本命令\nurl: /archives/nginxji-ben-ming-ling\ndescription: 简介介绍nginx基本命令\ncategories:\n  - nginx\ntags:\n  - nginx\nabbrlink: 6426f6ef\ndate: 2022-03-11 11:59:33\nupdated: 2022-03-11 12:03:36\n---\n\n# nginx基本命令\n1、启动：\n使用默认nginx.conf来启动\n```bash\nstart nginx\n```\n如果要指定配置文件来启动则使用以下命令即可：\n```bash\nnginx -c ./conf/jason.conf\n```\n2、关闭：\n\n快速关闭nginx服务。\n```bash\nnginx -s stop\n``` \n优雅的关闭,优雅是指当一个请求被处理完成之后才被关闭。\n```bash\nnginx -s quit\n``` \n\n3、配置语法检查：可进行配置文件的语法检测。\n```bash\nnginx -c ./conf/jason.conf -t\n``` \n4、查看nginx版本信息：-v和-V，一个小写v，一个大写V，两个的含义有些不同。\n\nnginx -v:只是显示nginx的当前版本,如下图\n\n![image.png](/upload/2022/03/image-649783c8200a4d018e2558a7976cc38d.png)\n\nnginx -V：显示nginx版本、编译器版本和配置参数信息，如下图\n\n![image.png](/upload/2022/03/image-61236735bba34682926b603790610f4c.png)\n\n5、重新加载配置文件，nginx是支持热部署的，意思就是可以在不停止服务的情况下进行更新部署。\n```bash\nnginx -s reload \n```\n6、linux命令重启\n查找当前nginx进程号\n```bash\nps -ef|grep nginx\n```\n然后输入命令：\n```bash\nkill -HUP 进程号\n``` \n实现重启nginx服务\n\n7、重新打开日志文件。\n```bash\nnginx -s reopen\n``` \n","slug":"nginx基本命令","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clh95h7kr003bgwuvfusgcnwa","content":"<h1 id=\"nginx基本命令\"><a href=\"#nginx基本命令\" class=\"headerlink\" title=\"nginx基本命令\"></a>nginx基本命令</h1><p>1、启动：<br>使用默认nginx.conf来启动</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">start nginx<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>如果要指定配置文件来启动则使用以下命令即可：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">nginx -c ./conf/jason.conf<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>2、关闭：</p>\n<p>快速关闭nginx服务。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">nginx -s stop<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>优雅的关闭,优雅是指当一个请求被处理完成之后才被关闭。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">nginx -s quit<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>3、配置语法检查：可进行配置文件的语法检测。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">nginx -c ./conf/jason.conf -t<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>4、查看nginx版本信息：-v和-V，一个小写v，一个大写V，两个的含义有些不同。</p>\n<p>nginx -v:只是显示nginx的当前版本,如下图</p>\n<p><img src=\"/upload/2022/03/image-649783c8200a4d018e2558a7976cc38d.png\" alt=\"image.png\"></p>\n<p>nginx -V：显示nginx版本、编译器版本和配置参数信息，如下图</p>\n<p><img src=\"/upload/2022/03/image-61236735bba34682926b603790610f4c.png\" alt=\"image.png\"></p>\n<p>5、重新加载配置文件，nginx是支持热部署的，意思就是可以在不停止服务的情况下进行更新部署。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">nginx -s reload <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>6、linux命令重启<br>查找当前nginx进程号</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ps</span> -ef<span class=\"token operator\">|</span><span class=\"token function\">grep</span> nginx<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>然后输入命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">kill</span> -HUP 进程号<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>实现重启nginx服务</p>\n<p>7、重新打开日志文件。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">nginx -s reopen<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}},"cover":false,"excerpt":"","more":"<h1 id=\"nginx基本命令\"><a href=\"#nginx基本命令\" class=\"headerlink\" title=\"nginx基本命令\"></a>nginx基本命令</h1><p>1、启动：<br>使用默认nginx.conf来启动</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">start nginx<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>如果要指定配置文件来启动则使用以下命令即可：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">nginx -c ./conf/jason.conf<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>2、关闭：</p>\n<p>快速关闭nginx服务。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">nginx -s stop<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>优雅的关闭,优雅是指当一个请求被处理完成之后才被关闭。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">nginx -s quit<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>3、配置语法检查：可进行配置文件的语法检测。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">nginx -c ./conf/jason.conf -t<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>4、查看nginx版本信息：-v和-V，一个小写v，一个大写V，两个的含义有些不同。</p>\n<p>nginx -v:只是显示nginx的当前版本,如下图</p>\n<p><img src=\"/upload/2022/03/image-649783c8200a4d018e2558a7976cc38d.png\" alt=\"image.png\"></p>\n<p>nginx -V：显示nginx版本、编译器版本和配置参数信息，如下图</p>\n<p><img src=\"/upload/2022/03/image-61236735bba34682926b603790610f4c.png\" alt=\"image.png\"></p>\n<p>5、重新加载配置文件，nginx是支持热部署的，意思就是可以在不停止服务的情况下进行更新部署。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">nginx -s reload <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>6、linux命令重启<br>查找当前nginx进程号</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ps</span> -ef<span class=\"token operator\">|</span><span class=\"token function\">grep</span> nginx<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>然后输入命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">kill</span> -HUP 进程号<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>实现重启nginx服务</p>\n<p>7、重新打开日志文件。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">nginx -s reopen<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n"},{"title":"nginx 配置多个域名对应不同端口","url":"/archives/nginxpei-zhi-duo-ge-yu-ming-dui-ying-bu-tong-duan-kou","abbrlink":"121f24e9","date":"2022-03-11T03:03:57.000Z","updated":"2022-03-11T03:25:17.000Z","_content":"\n# nginx 多个域名不同端口\n## 首先准备三个域名和端口\n- carrotvegeta.icu  80\n- blog.carrotvegeta.icu 8090\n- email.carrotvegeta.icu 8080\n<!--more-->\n## 1、写在一个配置文件里面（nginx.conf）：\n\n```bash\nserver{\n    listen 80;\n    server_name carrotvegeta.icu;\n    location / {\n        #....\n        proxy_pass http://localhost:80;\n    }\n    ##### other directive\n}\n\nserver{\n    listen 80;\n    server_name blog.carrotvegeta.icu;\n    location / {\n        #....\n        proxy_pass http://localhost:8090;\n    }\n    ##### other directive\n}\n```\n\n如果要再继续增加就再增加一个server\n\n```bash\nserver{\n    listen 80;\n    server_name carrotvegeta.icu;\n    location / {\n        #....\n        proxy_pass http://localhost:80;\n    }\n    ##### other directive\n}\n\nserver{\n    listen 80;\n    server_name blog.carrotvegeta.icu;\n    location / {\n        #....\n        proxy_pass http://localhost:8090;\n    }\n    ##### other directive\n}\nserver{\n    listen 80;\n    server_name email.carrotvegeta.icu;\n    location / {\n        #....\n        proxy_pass http://localhost:8080;\n    }\n    ##### other directive\n}\n```\n## 2、写在多个配置文件里面\n  当我们的域名变的非常多的时候，就需要一直不断的在一个配置文件里面增加server，这样就会变得越来越多导致不太好管理。\n  nginx支持引入文件的方法，这时我们可以在其他地方新建好我们所需要的配置文件:\n\nblog.conf：\n```bash\nserver{\n    listen 80;\n    server_name blog.carrotvegeta.icu;\n    location / {\n        #....\n        proxy_pass http://localhost:8090;\n    }\n    ##### other directive\n}\n```\n\nemail.conf\n\n```bash\nserver{\n    listen 80;\n    server_name email.carrotvegeta.icu;\n    location / {\n        #....\n        proxy_pass http://localhost:8080;\n    }\n    ##### other directive\n}\n```\n\n把两个文件都放在/data/nginx/conf/vhost目录下。\n\n然后在nginx.conf中使用引入命令：\n```bash\ninclude  /data/nginx/conf/vhost/*.conf;即可。\n```\n需要注意的是这句命令应该放在：http{}  的花括号内。因为include的命令引入相当于被引入的所有代码写在nginx.conf中一样。\n\n配置nginx.conf文件：\n\n```bash\nhttp{\n\n  ......\n\n  include /data/nginx/conf/vhost/*.conf;\n\n  server{\n    listen 80;\n    server_name carrotvegeta.icu;\n    location / {\n        #....\n        proxy_pass http://localhost:80;\n    }\n    ##### other directive\n  }\n}\n```\n\n然后重启ngxin:\n```bash\nnginx -s reload\n```\n\n原文地址：https://www.cnblogs.com/goloving/p/9363490.html\n","source":"_posts/nginx配置多个域名对应不同端口.md","raw":"---\ntitle: nginx 配置多个域名对应不同端口\nurl: /archives/nginxpei-zhi-duo-ge-yu-ming-dui-ying-bu-tong-duan-kou\ncategories:\n  - nginx\ntags:\n  - nginx\nabbrlink: 121f24e9\ndate: 2022-03-11 11:03:57\nupdated: 2022-03-11 11:25:17\n---\n\n# nginx 多个域名不同端口\n## 首先准备三个域名和端口\n- carrotvegeta.icu  80\n- blog.carrotvegeta.icu 8090\n- email.carrotvegeta.icu 8080\n<!--more-->\n## 1、写在一个配置文件里面（nginx.conf）：\n\n```bash\nserver{\n    listen 80;\n    server_name carrotvegeta.icu;\n    location / {\n        #....\n        proxy_pass http://localhost:80;\n    }\n    ##### other directive\n}\n\nserver{\n    listen 80;\n    server_name blog.carrotvegeta.icu;\n    location / {\n        #....\n        proxy_pass http://localhost:8090;\n    }\n    ##### other directive\n}\n```\n\n如果要再继续增加就再增加一个server\n\n```bash\nserver{\n    listen 80;\n    server_name carrotvegeta.icu;\n    location / {\n        #....\n        proxy_pass http://localhost:80;\n    }\n    ##### other directive\n}\n\nserver{\n    listen 80;\n    server_name blog.carrotvegeta.icu;\n    location / {\n        #....\n        proxy_pass http://localhost:8090;\n    }\n    ##### other directive\n}\nserver{\n    listen 80;\n    server_name email.carrotvegeta.icu;\n    location / {\n        #....\n        proxy_pass http://localhost:8080;\n    }\n    ##### other directive\n}\n```\n## 2、写在多个配置文件里面\n  当我们的域名变的非常多的时候，就需要一直不断的在一个配置文件里面增加server，这样就会变得越来越多导致不太好管理。\n  nginx支持引入文件的方法，这时我们可以在其他地方新建好我们所需要的配置文件:\n\nblog.conf：\n```bash\nserver{\n    listen 80;\n    server_name blog.carrotvegeta.icu;\n    location / {\n        #....\n        proxy_pass http://localhost:8090;\n    }\n    ##### other directive\n}\n```\n\nemail.conf\n\n```bash\nserver{\n    listen 80;\n    server_name email.carrotvegeta.icu;\n    location / {\n        #....\n        proxy_pass http://localhost:8080;\n    }\n    ##### other directive\n}\n```\n\n把两个文件都放在/data/nginx/conf/vhost目录下。\n\n然后在nginx.conf中使用引入命令：\n```bash\ninclude  /data/nginx/conf/vhost/*.conf;即可。\n```\n需要注意的是这句命令应该放在：http{}  的花括号内。因为include的命令引入相当于被引入的所有代码写在nginx.conf中一样。\n\n配置nginx.conf文件：\n\n```bash\nhttp{\n\n  ......\n\n  include /data/nginx/conf/vhost/*.conf;\n\n  server{\n    listen 80;\n    server_name carrotvegeta.icu;\n    location / {\n        #....\n        proxy_pass http://localhost:80;\n    }\n    ##### other directive\n  }\n}\n```\n\n然后重启ngxin:\n```bash\nnginx -s reload\n```\n\n原文地址：https://www.cnblogs.com/goloving/p/9363490.html\n","slug":"nginx配置多个域名对应不同端口","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clh95h7ks003egwuv8son1ptc","content":"<h1 id=\"nginx-多个域名不同端口\"><a href=\"#nginx-多个域名不同端口\" class=\"headerlink\" title=\"nginx 多个域名不同端口\"></a>nginx 多个域名不同端口</h1><h2 id=\"首先准备三个域名和端口\"><a href=\"#首先准备三个域名和端口\" class=\"headerlink\" title=\"首先准备三个域名和端口\"></a>首先准备三个域名和端口</h2><ul>\n<li>carrotvegeta.icu  80</li>\n<li>blog.carrotvegeta.icu 8090</li>\n<li>email.carrotvegeta.icu 8080<span id=\"more\"></span>\n<h2 id=\"1、写在一个配置文件里面（nginx-conf）：\"><a href=\"#1、写在一个配置文件里面（nginx-conf）：\" class=\"headerlink\" title=\"1、写在一个配置文件里面（nginx.conf）：\"></a>1、写在一个配置文件里面（nginx.conf）：</h2></li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">server<span class=\"token punctuation\">&#123;</span>\n    listen <span class=\"token number\">80</span><span class=\"token punctuation\">;</span>\n    server_name carrotvegeta.icu<span class=\"token punctuation\">;</span>\n    location / <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">#....</span>\n        proxy_pass http://localhost:80<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">##### other directive</span>\n<span class=\"token punctuation\">&#125;</span>\n\nserver<span class=\"token punctuation\">&#123;</span>\n    listen <span class=\"token number\">80</span><span class=\"token punctuation\">;</span>\n    server_name blog.carrotvegeta.icu<span class=\"token punctuation\">;</span>\n    location / <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">#....</span>\n        proxy_pass http://localhost:8090<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">##### other directive</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果要再继续增加就再增加一个server</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">server<span class=\"token punctuation\">&#123;</span>\n    listen <span class=\"token number\">80</span><span class=\"token punctuation\">;</span>\n    server_name carrotvegeta.icu<span class=\"token punctuation\">;</span>\n    location / <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">#....</span>\n        proxy_pass http://localhost:80<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">##### other directive</span>\n<span class=\"token punctuation\">&#125;</span>\n\nserver<span class=\"token punctuation\">&#123;</span>\n    listen <span class=\"token number\">80</span><span class=\"token punctuation\">;</span>\n    server_name blog.carrotvegeta.icu<span class=\"token punctuation\">;</span>\n    location / <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">#....</span>\n        proxy_pass http://localhost:8090<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">##### other directive</span>\n<span class=\"token punctuation\">&#125;</span>\nserver<span class=\"token punctuation\">&#123;</span>\n    listen <span class=\"token number\">80</span><span class=\"token punctuation\">;</span>\n    server_name email.carrotvegeta.icu<span class=\"token punctuation\">;</span>\n    location / <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">#....</span>\n        proxy_pass http://localhost:8080<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">##### other directive</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"2、写在多个配置文件里面\"><a href=\"#2、写在多个配置文件里面\" class=\"headerlink\" title=\"2、写在多个配置文件里面\"></a>2、写在多个配置文件里面</h2><p>  当我们的域名变的非常多的时候，就需要一直不断的在一个配置文件里面增加server，这样就会变得越来越多导致不太好管理。<br>  nginx支持引入文件的方法，这时我们可以在其他地方新建好我们所需要的配置文件:</p>\n<p>blog.conf：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">server<span class=\"token punctuation\">&#123;</span>\n    listen <span class=\"token number\">80</span><span class=\"token punctuation\">;</span>\n    server_name blog.carrotvegeta.icu<span class=\"token punctuation\">;</span>\n    location / <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">#....</span>\n        proxy_pass http://localhost:8090<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">##### other directive</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>email.conf</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">server<span class=\"token punctuation\">&#123;</span>\n    listen <span class=\"token number\">80</span><span class=\"token punctuation\">;</span>\n    server_name email.carrotvegeta.icu<span class=\"token punctuation\">;</span>\n    location / <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">#....</span>\n        proxy_pass http://localhost:8080<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">##### other directive</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>把两个文件都放在&#x2F;data&#x2F;nginx&#x2F;conf&#x2F;vhost目录下。</p>\n<p>然后在nginx.conf中使用引入命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">include  /data/nginx/conf/vhost/*.conf<span class=\"token punctuation\">;</span>即可。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>需要注意的是这句命令应该放在：http{}  的花括号内。因为include的命令引入相当于被引入的所有代码写在nginx.conf中一样。</p>\n<p>配置nginx.conf文件：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">http<span class=\"token punctuation\">&#123;</span>\n\n  <span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>\n\n  include /data/nginx/conf/vhost/*.conf<span class=\"token punctuation\">;</span>\n\n  server<span class=\"token punctuation\">&#123;</span>\n    listen <span class=\"token number\">80</span><span class=\"token punctuation\">;</span>\n    server_name carrotvegeta.icu<span class=\"token punctuation\">;</span>\n    location / <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">#....</span>\n        proxy_pass http://localhost:80<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">##### other directive</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>然后重启ngxin:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">nginx -s reload<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>原文地址：<a href=\"https://www.cnblogs.com/goloving/p/9363490.html\">https://www.cnblogs.com/goloving/p/9363490.html</a></p>\n","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}},"cover":false,"excerpt":"<h1 id=\"nginx-多个域名不同端口\"><a href=\"#nginx-多个域名不同端口\" class=\"headerlink\" title=\"nginx 多个域名不同端口\"></a>nginx 多个域名不同端口</h1><h2 id=\"首先准备三个域名和端口\"><a href=\"#首先准备三个域名和端口\" class=\"headerlink\" title=\"首先准备三个域名和端口\"></a>首先准备三个域名和端口</h2><ul>\n<li>carrotvegeta.icu  80</li>\n<li>blog.carrotvegeta.icu 8090</li>\n<li>email.carrotvegeta.icu 8080","more":"<h2 id=\"1、写在一个配置文件里面（nginx-conf）：\"><a href=\"#1、写在一个配置文件里面（nginx-conf）：\" class=\"headerlink\" title=\"1、写在一个配置文件里面（nginx.conf）：\"></a>1、写在一个配置文件里面（nginx.conf）：</h2></li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">server<span class=\"token punctuation\">&#123;</span>\n    listen <span class=\"token number\">80</span><span class=\"token punctuation\">;</span>\n    server_name carrotvegeta.icu<span class=\"token punctuation\">;</span>\n    location / <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">#....</span>\n        proxy_pass http://localhost:80<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">##### other directive</span>\n<span class=\"token punctuation\">&#125;</span>\n\nserver<span class=\"token punctuation\">&#123;</span>\n    listen <span class=\"token number\">80</span><span class=\"token punctuation\">;</span>\n    server_name blog.carrotvegeta.icu<span class=\"token punctuation\">;</span>\n    location / <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">#....</span>\n        proxy_pass http://localhost:8090<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">##### other directive</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果要再继续增加就再增加一个server</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">server<span class=\"token punctuation\">&#123;</span>\n    listen <span class=\"token number\">80</span><span class=\"token punctuation\">;</span>\n    server_name carrotvegeta.icu<span class=\"token punctuation\">;</span>\n    location / <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">#....</span>\n        proxy_pass http://localhost:80<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">##### other directive</span>\n<span class=\"token punctuation\">&#125;</span>\n\nserver<span class=\"token punctuation\">&#123;</span>\n    listen <span class=\"token number\">80</span><span class=\"token punctuation\">;</span>\n    server_name blog.carrotvegeta.icu<span class=\"token punctuation\">;</span>\n    location / <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">#....</span>\n        proxy_pass http://localhost:8090<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">##### other directive</span>\n<span class=\"token punctuation\">&#125;</span>\nserver<span class=\"token punctuation\">&#123;</span>\n    listen <span class=\"token number\">80</span><span class=\"token punctuation\">;</span>\n    server_name email.carrotvegeta.icu<span class=\"token punctuation\">;</span>\n    location / <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">#....</span>\n        proxy_pass http://localhost:8080<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">##### other directive</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"2、写在多个配置文件里面\"><a href=\"#2、写在多个配置文件里面\" class=\"headerlink\" title=\"2、写在多个配置文件里面\"></a>2、写在多个配置文件里面</h2><p>  当我们的域名变的非常多的时候，就需要一直不断的在一个配置文件里面增加server，这样就会变得越来越多导致不太好管理。<br>  nginx支持引入文件的方法，这时我们可以在其他地方新建好我们所需要的配置文件:</p>\n<p>blog.conf：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">server<span class=\"token punctuation\">&#123;</span>\n    listen <span class=\"token number\">80</span><span class=\"token punctuation\">;</span>\n    server_name blog.carrotvegeta.icu<span class=\"token punctuation\">;</span>\n    location / <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">#....</span>\n        proxy_pass http://localhost:8090<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">##### other directive</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>email.conf</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">server<span class=\"token punctuation\">&#123;</span>\n    listen <span class=\"token number\">80</span><span class=\"token punctuation\">;</span>\n    server_name email.carrotvegeta.icu<span class=\"token punctuation\">;</span>\n    location / <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">#....</span>\n        proxy_pass http://localhost:8080<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">##### other directive</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>把两个文件都放在&#x2F;data&#x2F;nginx&#x2F;conf&#x2F;vhost目录下。</p>\n<p>然后在nginx.conf中使用引入命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">include  /data/nginx/conf/vhost/*.conf<span class=\"token punctuation\">;</span>即可。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>需要注意的是这句命令应该放在：http{}  的花括号内。因为include的命令引入相当于被引入的所有代码写在nginx.conf中一样。</p>\n<p>配置nginx.conf文件：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">http<span class=\"token punctuation\">&#123;</span>\n\n  <span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>\n\n  include /data/nginx/conf/vhost/*.conf<span class=\"token punctuation\">;</span>\n\n  server<span class=\"token punctuation\">&#123;</span>\n    listen <span class=\"token number\">80</span><span class=\"token punctuation\">;</span>\n    server_name carrotvegeta.icu<span class=\"token punctuation\">;</span>\n    location / <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">#....</span>\n        proxy_pass http://localhost:80<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">##### other directive</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>然后重启ngxin:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">nginx -s reload<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>原文地址：<a href=\"https://www.cnblogs.com/goloving/p/9363490.html\">https://www.cnblogs.com/goloving/p/9363490.html</a></p>"},{"title":"ssh隧道-能ssh就能http和tcp，通过ssh就能访问内网web页面和数据库","url":"/archives/ssh-sui-dao---neng-ssh-jiu-neng-http-he-tcp-tong-guo-ssh-jiu-neng-fang-wen-nei-wang-web-ye-mian-he-shu-ju-ku","abbrlink":"ff48a6a3","date":"2022-03-29T06:11:22.000Z","updated":"2022-03-29T06:14:25.000Z","_content":"\n出于安全考虑，一般云主机都只能通过堡垒机两级ssh才能连通，即先ssh堡垒机，再ssh连到内网目标云主机上执行命令。\n(堡垒机俗称跳板机，一般只开放一个ssh端口。有些堡垒机没有公网IP，必须先登录vpn能才能连)\n\n怎么传文件呢？\n先传到跳板机再传到目标机？传2次？太麻烦，浪费时间还浪费磁盘空间。\n有人说配置config，可以直接ssh目标机，也可以直接scp文件到目标机。没错是这样（文中有配置示例）。\n\n那云主机上有web页面能直接访问么？\n- 内网数据库能直接连么？\n当然可以的，能连ssh，就能访问内网的网页和数据库。只要能手动多级ssh访问到，就能通过配置ssh后在本地直接访问到。\n<!--more-->\n轻松实现\n假设网络条件如下：（受安全组或网络策略影响，只能通过10.20.20.20访问192.168.88.8:8888）\n\n> 本机（登录VPN 公网IP:8444） --> 10.10.10.10:22 --> 10.20.20.20:22 -->\n192.168.88.8:8888\n\n只需3步：\n\n1. 本机配置ssh跳板。保证本机能直接ssh 10.20.20.20。因为跳板机10不能访问目标8888端口\n2. 在命令行中（推荐GitBash）执行如下命令，输入20的账号密码\n```bash\nssh -f -N -L localhost:12345:192.168.88.8:8888 user@10.20.20.20 -p22\n```\n3. 在本机浏览器中输入localhost:12345，出来的就是目标机8888端口的内容。\n## 配置ssh跳板\n配置本机直接ssh 10.20.20.20。配置示例：\n```bash\nvi $HOME/.ssh/config\n```\n```bash\nHost jumper\n  hostname 10.10.10.10 #跳板机要装有ncat，否则连接时会报错\nHost sub2020\n  hostname 10.20.20.*\n  ProxyCommand ssh -q -A jumper nc %h %p\n```\n- 当然如果8888是数据库端口，也是直接在数据库客户中配置地址为localhost:12345。\n- 当然10.10.10.10，10.20.20.20也可以配置免密登录，不用再输密码\n## 再引申一下，还想让其他ip通过本机直连内网页面\n> 其他IP --> 本机IP:12345（登录VPN 公网IP:8444） --> 10.10.10.10:22 -->\n192.168.88.8:8888\n```bash\nssh -f -N -L 本机IP:12345:192.168.88.8:8888 user@10.10.10.10 -p22\n```\n或者\n```bash\nssh -f -N -L :12345:192.168.88.8:8888 user@10.10.10.10 -p22\n```\n- 注意前提是要保证本机的防火墙已放通12345端口，这样别人才能连通本机的12345端口\n再简单一点，目标服务就在跳板机上，但是端口未放开（只放开22）\n\n> 本机 --> 10.10.10.10:22 --> 10.10.10.10:8888\n```bash\nssh -f -N -L :12345:10.10.10.10:8888 user@10.10.10.10 -p22\n```\n \n[原文地址](https://blog.csdn.net/liliwang90/article/details/123153893)\n","source":"_posts/ssh隧道-能ssh就能http和tcp，通过ssh就能访问内网web页面和数据库.md","raw":"---\ntitle: ssh隧道-能ssh就能http和tcp，通过ssh就能访问内网web页面和数据库\nurl: >-\n  /archives/ssh-sui-dao---neng-ssh-jiu-neng-http-he-tcp-tong-guo-ssh-jiu-neng-fang-wen-nei-wang-web-ye-mian-he-shu-ju-ku\ncategories:\n  - ssh\ntags:\n  - ssh\nabbrlink: ff48a6a3\ndate: 2022-03-29 14:11:22\nupdated: 2022-03-29 14:14:25\n---\n\n出于安全考虑，一般云主机都只能通过堡垒机两级ssh才能连通，即先ssh堡垒机，再ssh连到内网目标云主机上执行命令。\n(堡垒机俗称跳板机，一般只开放一个ssh端口。有些堡垒机没有公网IP，必须先登录vpn能才能连)\n\n怎么传文件呢？\n先传到跳板机再传到目标机？传2次？太麻烦，浪费时间还浪费磁盘空间。\n有人说配置config，可以直接ssh目标机，也可以直接scp文件到目标机。没错是这样（文中有配置示例）。\n\n那云主机上有web页面能直接访问么？\n- 内网数据库能直接连么？\n当然可以的，能连ssh，就能访问内网的网页和数据库。只要能手动多级ssh访问到，就能通过配置ssh后在本地直接访问到。\n<!--more-->\n轻松实现\n假设网络条件如下：（受安全组或网络策略影响，只能通过10.20.20.20访问192.168.88.8:8888）\n\n> 本机（登录VPN 公网IP:8444） --> 10.10.10.10:22 --> 10.20.20.20:22 -->\n192.168.88.8:8888\n\n只需3步：\n\n1. 本机配置ssh跳板。保证本机能直接ssh 10.20.20.20。因为跳板机10不能访问目标8888端口\n2. 在命令行中（推荐GitBash）执行如下命令，输入20的账号密码\n```bash\nssh -f -N -L localhost:12345:192.168.88.8:8888 user@10.20.20.20 -p22\n```\n3. 在本机浏览器中输入localhost:12345，出来的就是目标机8888端口的内容。\n## 配置ssh跳板\n配置本机直接ssh 10.20.20.20。配置示例：\n```bash\nvi $HOME/.ssh/config\n```\n```bash\nHost jumper\n  hostname 10.10.10.10 #跳板机要装有ncat，否则连接时会报错\nHost sub2020\n  hostname 10.20.20.*\n  ProxyCommand ssh -q -A jumper nc %h %p\n```\n- 当然如果8888是数据库端口，也是直接在数据库客户中配置地址为localhost:12345。\n- 当然10.10.10.10，10.20.20.20也可以配置免密登录，不用再输密码\n## 再引申一下，还想让其他ip通过本机直连内网页面\n> 其他IP --> 本机IP:12345（登录VPN 公网IP:8444） --> 10.10.10.10:22 -->\n192.168.88.8:8888\n```bash\nssh -f -N -L 本机IP:12345:192.168.88.8:8888 user@10.10.10.10 -p22\n```\n或者\n```bash\nssh -f -N -L :12345:192.168.88.8:8888 user@10.10.10.10 -p22\n```\n- 注意前提是要保证本机的防火墙已放通12345端口，这样别人才能连通本机的12345端口\n再简单一点，目标服务就在跳板机上，但是端口未放开（只放开22）\n\n> 本机 --> 10.10.10.10:22 --> 10.10.10.10:8888\n```bash\nssh -f -N -L :12345:10.10.10.10:8888 user@10.10.10.10 -p22\n```\n \n[原文地址](https://blog.csdn.net/liliwang90/article/details/123153893)\n","slug":"ssh隧道-能ssh就能http和tcp，通过ssh就能访问内网web页面和数据库","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clh95h7kt003hgwuvhtvc7xtq","content":"<p>出于安全考虑，一般云主机都只能通过堡垒机两级ssh才能连通，即先ssh堡垒机，再ssh连到内网目标云主机上执行命令。<br>(堡垒机俗称跳板机，一般只开放一个ssh端口。有些堡垒机没有公网IP，必须先登录vpn能才能连)</p>\n<p>怎么传文件呢？<br>先传到跳板机再传到目标机？传2次？太麻烦，浪费时间还浪费磁盘空间。<br>有人说配置config，可以直接ssh目标机，也可以直接scp文件到目标机。没错是这样（文中有配置示例）。</p>\n<p>那云主机上有web页面能直接访问么？</p>\n<ul>\n<li>内网数据库能直接连么？<br>当然可以的，能连ssh，就能访问内网的网页和数据库。只要能手动多级ssh访问到，就能通过配置ssh后在本地直接访问到。<span id=\"more\"></span>\n轻松实现<br>假设网络条件如下：（受安全组或网络策略影响，只能通过10.20.20.20访问192.168.88.8:8888）</li>\n</ul>\n<blockquote>\n<p>本机（登录VPN 公网IP:8444） –&gt; 10.10.10.10:22 –&gt; 10.20.20.20:22 –&gt;<br>192.168.88.8:8888</p>\n</blockquote>\n<p>只需3步：</p>\n<ol>\n<li>本机配置ssh跳板。保证本机能直接ssh 10.20.20.20。因为跳板机10不能访问目标8888端口</li>\n<li>在命令行中（推荐GitBash）执行如下命令，输入20的账号密码<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ssh</span> -f -N -L localhost:12345:192.168.88.8:8888 user@10.20.20.20 -p22<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li>在本机浏览器中输入localhost:12345，出来的就是目标机8888端口的内容。<h2 id=\"配置ssh跳板\"><a href=\"#配置ssh跳板\" class=\"headerlink\" title=\"配置ssh跳板\"></a>配置ssh跳板</h2>配置本机直接ssh 10.20.20.20。配置示例：<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">vi</span> <span class=\"token environment constant\">$HOME</span>/.ssh/config<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">Host jumper\n  <span class=\"token function\">hostname</span> <span class=\"token number\">10.10</span>.10.10 <span class=\"token comment\">#跳板机要装有ncat，否则连接时会报错</span>\nHost sub2020\n  <span class=\"token function\">hostname</span> <span class=\"token number\">10.20</span>.20.*\n  ProxyCommand <span class=\"token function\">ssh</span> -q -A jumper <span class=\"token function\">nc</span> %h %p<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<ul>\n<li>当然如果8888是数据库端口，也是直接在数据库客户中配置地址为localhost:12345。</li>\n<li>当然10.10.10.10，10.20.20.20也可以配置免密登录，不用再输密码<h2 id=\"再引申一下，还想让其他ip通过本机直连内网页面\"><a href=\"#再引申一下，还想让其他ip通过本机直连内网页面\" class=\"headerlink\" title=\"再引申一下，还想让其他ip通过本机直连内网页面\"></a>再引申一下，还想让其他ip通过本机直连内网页面</h2><blockquote>\n<p>其他IP –&gt; 本机IP:12345（登录VPN 公网IP:8444） –&gt; 10.10.10.10:22 –&gt;<br>192.168.88.8:8888</p>\n</blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ssh</span> -f -N -L 本机IP:12345:192.168.88.8:8888 user@10.10.10.10 -p22<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>或者</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ssh</span> -f -N -L :12345:192.168.88.8:8888 user@10.10.10.10 -p22<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li>注意前提是要保证本机的防火墙已放通12345端口，这样别人才能连通本机的12345端口<br>再简单一点，目标服务就在跳板机上，但是端口未放开（只放开22）</li>\n</ul>\n<blockquote>\n<p>本机 –&gt; 10.10.10.10:22 –&gt; 10.10.10.10:8888</p>\n</blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ssh</span> -f -N -L :12345:10.10.10.10:8888 user@10.10.10.10 -p22<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><a href=\"https://blog.csdn.net/liliwang90/article/details/123153893\">原文地址</a></p>\n","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}},"cover":false,"excerpt":"<p>出于安全考虑，一般云主机都只能通过堡垒机两级ssh才能连通，即先ssh堡垒机，再ssh连到内网目标云主机上执行命令。<br>(堡垒机俗称跳板机，一般只开放一个ssh端口。有些堡垒机没有公网IP，必须先登录vpn能才能连)</p>\n<p>怎么传文件呢？<br>先传到跳板机再传到目标机？传2次？太麻烦，浪费时间还浪费磁盘空间。<br>有人说配置config，可以直接ssh目标机，也可以直接scp文件到目标机。没错是这样（文中有配置示例）。</p>\n<p>那云主机上有web页面能直接访问么？</p>\n<ul>\n<li>内网数据库能直接连么？<br>当然可以的，能连ssh，就能访问内网的网页和数据库。只要能手动多级ssh访问到，就能通过配置ssh后在本地直接访问到。","more":"轻松实现<br>假设网络条件如下：（受安全组或网络策略影响，只能通过10.20.20.20访问192.168.88.8:8888）</li>\n</ul>\n<blockquote>\n<p>本机（登录VPN 公网IP:8444） –&gt; 10.10.10.10:22 –&gt; 10.20.20.20:22 –&gt;<br>192.168.88.8:8888</p>\n</blockquote>\n<p>只需3步：</p>\n<ol>\n<li>本机配置ssh跳板。保证本机能直接ssh 10.20.20.20。因为跳板机10不能访问目标8888端口</li>\n<li>在命令行中（推荐GitBash）执行如下命令，输入20的账号密码<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ssh</span> -f -N -L localhost:12345:192.168.88.8:8888 user@10.20.20.20 -p22<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li>在本机浏览器中输入localhost:12345，出来的就是目标机8888端口的内容。<h2 id=\"配置ssh跳板\"><a href=\"#配置ssh跳板\" class=\"headerlink\" title=\"配置ssh跳板\"></a>配置ssh跳板</h2>配置本机直接ssh 10.20.20.20。配置示例：<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">vi</span> <span class=\"token environment constant\">$HOME</span>/.ssh/config<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">Host jumper\n  <span class=\"token function\">hostname</span> <span class=\"token number\">10.10</span>.10.10 <span class=\"token comment\">#跳板机要装有ncat，否则连接时会报错</span>\nHost sub2020\n  <span class=\"token function\">hostname</span> <span class=\"token number\">10.20</span>.20.*\n  ProxyCommand <span class=\"token function\">ssh</span> -q -A jumper <span class=\"token function\">nc</span> %h %p<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<ul>\n<li>当然如果8888是数据库端口，也是直接在数据库客户中配置地址为localhost:12345。</li>\n<li>当然10.10.10.10，10.20.20.20也可以配置免密登录，不用再输密码<h2 id=\"再引申一下，还想让其他ip通过本机直连内网页面\"><a href=\"#再引申一下，还想让其他ip通过本机直连内网页面\" class=\"headerlink\" title=\"再引申一下，还想让其他ip通过本机直连内网页面\"></a>再引申一下，还想让其他ip通过本机直连内网页面</h2><blockquote>\n<p>其他IP –&gt; 本机IP:12345（登录VPN 公网IP:8444） –&gt; 10.10.10.10:22 –&gt;<br>192.168.88.8:8888</p>\n</blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ssh</span> -f -N -L 本机IP:12345:192.168.88.8:8888 user@10.10.10.10 -p22<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>或者</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ssh</span> -f -N -L :12345:192.168.88.8:8888 user@10.10.10.10 -p22<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li>注意前提是要保证本机的防火墙已放通12345端口，这样别人才能连通本机的12345端口<br>再简单一点，目标服务就在跳板机上，但是端口未放开（只放开22）</li>\n</ul>\n<blockquote>\n<p>本机 –&gt; 10.10.10.10:22 –&gt; 10.10.10.10:8888</p>\n</blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ssh</span> -f -N -L :12345:10.10.10.10:8888 user@10.10.10.10 -p22<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><a href=\"https://blog.csdn.net/liliwang90/article/details/123153893\">原文地址</a></p>"},{"title":"不需要运行进入docker 容器","url":"/archives/bu-xu-yao-yun-xing-jin-ru-dockerrong-qi","abbrlink":"fe28043d","date":"2022-03-31T08:42:50.000Z","updated":"2022-03-31T08:42:50.000Z","_content":"# 不需要运行进入docker 容器\n```bash\ndocker run -it 镜像id /bin/bash\n```\n","source":"_posts/不需要运行金融docker容器.md","raw":"---\ntitle: 不需要运行进入docker 容器\nurl: /archives/bu-xu-yao-yun-xing-jin-ru-dockerrong-qi\ncategories:\n  - docker\ntags:\n  - docker\nabbrlink: fe28043d\ndate: 2022-03-31 16:42:50\nupdated: 2022-03-31 16:42:50\n---\n# 不需要运行进入docker 容器\n```bash\ndocker run -it 镜像id /bin/bash\n```\n","slug":"不需要运行金融docker容器","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clh95h7kw003lgwuv7anv4ozo","content":"<h1 id=\"不需要运行进入docker-容器\"><a href=\"#不需要运行进入docker-容器\" class=\"headerlink\" title=\"不需要运行进入docker 容器\"></a>不需要运行进入docker 容器</h1><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run -it 镜像id /bin/bash<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}},"cover":false,"excerpt":"","more":"<h1 id=\"不需要运行进入docker-容器\"><a href=\"#不需要运行进入docker-容器\" class=\"headerlink\" title=\"不需要运行进入docker 容器\"></a>不需要运行进入docker 容器</h1><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run -it 镜像id /bin/bash<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n"},{"title":"使用rsync命令","url":"/archives/shi-yong-rsync-ming-ling","abbrlink":"645ded65","date":"2022-02-16T07:54:19.000Z","updated":"2022-02-16T07:54:19.000Z","_content":"\n# 本地上传至远程\n```bash\nrsync -av localPath username@ip:remotepath\n```\n\n-  --progress 参数 可显示进度条\n\n-  -azvrtopg 增量更新\n-   --exclude='path' 忽略文件夹或某个文件","source":"_posts/使用rsync命令.md","raw":"---\ntitle: 使用rsync命令\nurl: /archives/shi-yong-rsync-ming-ling\ncategories:\n  - linux\ntags:\n  - linux\n  - rsync\nabbrlink: 645ded65\ndate: 2022-02-16 15:54:19\nupdated: 2022-02-16 15:54:19\n---\n\n# 本地上传至远程\n```bash\nrsync -av localPath username@ip:remotepath\n```\n\n-  --progress 参数 可显示进度条\n\n-  -azvrtopg 增量更新\n-   --exclude='path' 忽略文件夹或某个文件","slug":"使用rsync命令","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clh95h7kx003pgwuvdnvx51wt","content":"<h1 id=\"本地上传至远程\"><a href=\"#本地上传至远程\" class=\"headerlink\" title=\"本地上传至远程\"></a>本地上传至远程</h1><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">rsync</span> -av localPath username@ip:remotepath<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><p>–progress 参数 可显示进度条</p>\n</li>\n<li><p>-azvrtopg 增量更新</p>\n</li>\n<li><p>–exclude&#x3D;’path’ 忽略文件夹或某个文件</p>\n</li>\n</ul>\n","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}},"cover":false,"excerpt":"","more":"<h1 id=\"本地上传至远程\"><a href=\"#本地上传至远程\" class=\"headerlink\" title=\"本地上传至远程\"></a>本地上传至远程</h1><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">rsync</span> -av localPath username@ip:remotepath<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><p>–progress 参数 可显示进度条</p>\n</li>\n<li><p>-azvrtopg 增量更新</p>\n</li>\n<li><p>–exclude&#x3D;’path’ 忽略文件夹或某个文件</p>\n</li>\n</ul>\n"},{"title":"使用scp命令传输文件到服务器","url":"/archives/shi-yong-scp-ming-ling-chuan-shu-wen-jian-dao-fu-wu-qi","abbrlink":"6fb886e2","date":"2022-02-15T07:34:58.000Z","updated":"2022-02-16T07:42:24.000Z","_content":"\n# 使用scp命令\n\n上传本地文件到服务器：\n\n```bash\nscp /path/filename username@servername:/path/\n```\n\n从服务器上下载文件：\n\n```bash\nscp username@servername:/path/filename /var/www/local_dir（本地目录）\n```\n\n从服务器下载整个目录：\n\n```bash\nscp -r username@servername:/var/www/remote_dir/（远程目录） /var/www/local_dir（本地目录）\n```\n\n上传目录到服务器：\n\n```bash\nscp -r local_dir username@servername:remote_dir\n```","source":"_posts/使用scp命令传输文件到服务器.md","raw":"---\ntitle: 使用scp命令传输文件到服务器\nurl: /archives/shi-yong-scp-ming-ling-chuan-shu-wen-jian-dao-fu-wu-qi\ncategories:\n  - linux\ntags:\n  - scp\n  - 文件\nabbrlink: 6fb886e2\ndate: 2022-02-15 15:34:58\nupdated: 2022-02-16 15:42:24\n---\n\n# 使用scp命令\n\n上传本地文件到服务器：\n\n```bash\nscp /path/filename username@servername:/path/\n```\n\n从服务器上下载文件：\n\n```bash\nscp username@servername:/path/filename /var/www/local_dir（本地目录）\n```\n\n从服务器下载整个目录：\n\n```bash\nscp -r username@servername:/var/www/remote_dir/（远程目录） /var/www/local_dir（本地目录）\n```\n\n上传目录到服务器：\n\n```bash\nscp -r local_dir username@servername:remote_dir\n```","slug":"使用scp命令传输文件到服务器","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clh95h7ky003tgwuv5rt5eoek","content":"<h1 id=\"使用scp命令\"><a href=\"#使用scp命令\" class=\"headerlink\" title=\"使用scp命令\"></a>使用scp命令</h1><p>上传本地文件到服务器：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">scp</span> /path/filename username@servername:/path/<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>从服务器上下载文件：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">scp</span> username@servername:/path/filename /var/www/local_dir（本地目录）<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>从服务器下载整个目录：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">scp</span> -r username@servername:/var/www/remote_dir/（远程目录） /var/www/local_dir（本地目录）<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上传目录到服务器：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">scp</span> -r local_dir username@servername:remote_dir<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}},"cover":false,"excerpt":"","more":"<h1 id=\"使用scp命令\"><a href=\"#使用scp命令\" class=\"headerlink\" title=\"使用scp命令\"></a>使用scp命令</h1><p>上传本地文件到服务器：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">scp</span> /path/filename username@servername:/path/<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>从服务器上下载文件：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">scp</span> username@servername:/path/filename /var/www/local_dir（本地目录）<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>从服务器下载整个目录：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">scp</span> -r username@servername:/var/www/remote_dir/（远程目录） /var/www/local_dir（本地目录）<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上传目录到服务器：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">scp</span> -r local_dir username@servername:remote_dir<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>"},{"title":"单纯启动docker容器不启动服务","url":"/archives/dan-chun-qi-dong-docker-rong-qi-bu-qi-dong-fu-wu","abbrlink":"c24217a1","date":"2022-02-16T07:35:37.000Z","updated":"2022-02-16T07:35:37.000Z","_content":"\n```docker\ndocker run -itd --name spp 镜像名:标签 bash\n```","source":"_posts/单纯启动docker容器不启动服务.md","raw":"---\ntitle: 单纯启动docker容器不启动服务\nurl: /archives/dan-chun-qi-dong-docker-rong-qi-bu-qi-dong-fu-wu\ncategories:\n  - docker\ntags:\n  - docker\nabbrlink: c24217a1\ndate: 2022-02-16 15:35:37\nupdated: 2022-02-16 15:35:37\n---\n\n```docker\ndocker run -itd --name spp 镜像名:标签 bash\n```","slug":"单纯启动docker容器不启动服务","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clh95h7l0003xgwuvho0naoqm","content":"<pre class=\"line-numbers language-docker\" data-language=\"docker\"><code class=\"language-docker\">docker run -itd --name spp 镜像名:标签 bash<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}},"cover":false,"excerpt":"","more":"<pre class=\"line-numbers language-docker\" data-language=\"docker\"><code class=\"language-docker\">docker run -itd --name spp 镜像名:标签 bash<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>"},{"title":"如何使用高阶函数编程提升代码的简洁性","url":"/archives/ru-he-shi-yong-gao-jie-han-shu-bian-cheng-ti-sheng-dai-ma-de-jian-jie-xing","abbrlink":"54f8f4a7","date":"2022-02-24T15:04:47.000Z","updated":"2022-03-10T04:07:39.000Z","_content":"\n摘要\n函数是 Go 语言的一等公民，本文采用一种高阶函数的方式，抽象了使用 gorm 查询 DB 的查询条件，将多个表的各种复杂的组合查询抽象成了一个统一的方法和一个配置类，提升了代码的简洁和优雅，同时可以提升开发人员的效率。\n<!--more-->\n背景\n有一张 DB 表，业务上需要按照这个表里的不同字段做筛选查询，这是一个非常普遍的需求，我相信这种需求对于每个做业务开发的人都是绕不开的。比如我们有一张存储用户信息的表，简化之后的表结构如下：\n```mysql\nCREATE TABLE `user_info` (\n  `id` bigint unsigned NOT NULL AUTO_INCREMENT COMMENT '自增主键',\n  `user_id` bigint NOT NULL COMMENT '用户id',\n  `user_name` varchar NOT NULL COMMENT '用户姓名',\n  `role` int NOT NULL DEFAULT '0' COMMENT '角色',\n  `status` int NOT NULL DEFAULT '0' COMMENT '状态',\n  PRIMARY KEY (`id`),\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='用户信息表';\n```\n这个表里有几个关键字段，user_id、user_name 、 role、status。如果我们想按照 user_id 来做筛选，那我们一般是在 dao 层写一个这样的方法(为了示例代码的简洁，这里所有示例代码都省去了错误处理部分)：\n```go\nfunc GetUserInfoByUid(ctx context.Context, userID int64) ([]*resource.UserInfo) {\n   db := GetDB(ctx)\n   db = db.Table(resource.UserInfo{}.TableName())\n   var infos []*resource.UserInfo\n   db = db.Where(\"user_id = ?\", userID)\n   db.Find(&infos)\n   return infos\n}\n```\n如果业务上又需要按照 user_name 来查询，那我们就需要再写一个类似的方法按照 user_name 来查询：\n```go\nfunc GetUserInfoByName(ctx context.Context, name string) ([]*resource.UserInfo) {\n   db := GetDB(ctx)\n   db = db.Table(resource.UserInfo{}.TableName())\n   var infos []*resource.UserInfo\n   db = db.Where(\"user_name = ?\", name)\n   db.Find(&infos)\n   return infos\n}\n```\n可以看到，两个方法的代码极度相似，如果再需要按照 role 或者 status 查询，那不得不再来几个方法，导致相似的方法非常多。当然很容易想到，我们可以用一个方法，多几个入参的形式来解决这个问题，于是，我们把上面两个方法合并成下面这种方法，能够支持按照多个字段筛选查询：\n```go\nfunc GetUserInfo(ctx context.Context, userID int64, name string, role int, status int) ([]*resource.UserInfo) {\n   db := GetDB(ctx)\n   db = db.Table(resource.UserInfo{}.TableName())\n   var infos []*resource.UserInfo\n   if userID > 0 {\n      db = db.Where(\"user_id = ?\", userID)\n   }\n   if name != \"\" {\n      db = db.Where(\"user_name = ?\", name)\n   }\n   if role > 0 {\n      db = db.Where(\"role = ?\", role)\n   }\n   if status > 0 {\n      db = db.Where(\"status = ?\", status)\n   }\n   db.Find(&infos)\n   return infos\n}\n```\n相应地，调用该方法的代码也需要做出改变：\n```go\n//只根据UserID查询\ninfos := GetUserInfo(ctx, userID, \"\", 0, 0)\n//只根据UserName查询\ninfos := GetUserInfo(ctx, 0, name, 0, 0)\n//只根据Role查询\ninfos := GetUserInfo(ctx, 0, \"\", role, 0)\n//只根据Status查询\ninfos := GetUserInfo(ctx, 0, \"\", 0, status)\n```\n这种代码无论是写代码的人还是读代码的人，都会感觉非常难受。我们这里只列举了四个参数，可以想想这个表里如果有十几个到二十个字段都需要做筛选查询，这种代码看上去是一种什么样的感觉。首先，GetUserInfo 方法本身入参非常多，里面充斥着各种 != 0 和 != \"\"的判断，并且需要注意的是，0 一定不能作为字段的有效值，否则 != 0 这种判断就会有问题。其次，作为调用方，明明只是根据一个字段筛选查询，却不得不为其他参数填充一个 0 或者\"\"来占位，而且调用者要特别谨慎，因为一不小心，就可能会把 role 填到了 status 的位置上去，因为他们的类型都一样，编译器不会检查出任何错误，很容易搞出业务 bug。\n\n解决方案\n如果说解决这种问题有段位，那么以上的写法只能算是青铜，接下来我们看看白银、黄金和王者。\n\n白银\n解决这种问题，一种比较常见的方案是，新建一个结构体，把各种查询的字段都放在这个结构体中，然后把这个结构体作为入参传入到 dao 层的查询方法中。而在调用 dao 方法的地方，根据各自的需要，构建包含不同字段的结构体。在这个例子中，我们可以构建一个 UserInfo 的结构体如下：\n```go\ntype UserInfo struct {\n   UserID int64\n   Name string\n   Role int32\n   Status int32\n}\n```\n把 UserInfo 作为入参传给 GetUserInfo 方法，于是 GetUserInfo 方法变成了这样：\n```go\nfunc GetUserInfo(ctx context.Context, info *UserInfo) ([]*resource.UserInfo) {\n   db := GetDB(ctx)\n   db = db.Table(resource.UserInfo{}.TableName())\n   var infos []*resource.UserInfo\n   if info.UserID > 0 {\n      db = db.Where(\"user_id = ?\", info.UserID)\n   }\n   if info.Name != \"\" {\n      db = db.Where(\"user_name = ?\", info.Name)\n   }\n   if info.Role > 0 {\n      db = db.Where(\"role = ?\", info.Role)\n   }\n   if info.Status > 0 {\n      db = db.Where(\"status = ?\", info.Status)\n   }\n   db.Find(&infos)\n   return infos\n}\n```\n相应地，调用该方法的代码也需要变动：\n```go\n//只根据userD查询\ninfo := &UserInfo{\n   UserID: userID,\n}\ninfos := GetUserInfo(ctx, info)\n//只根据name查询\ninfo := &UserInfo{\n   Name: name,\n}\ninfos := GetUserInfo(ctx, info)\n```\n这个代码写到这里，相比最开始的方法其实已经好了不少，至少 dao 层的方法从很多个入参变成了一个，调用方的代码也可以根据自己的需要构建参数，不需要很多空占位符。但是存在的问题也比较明显：仍然有很多判空不说，还引入了一个多余的结构体。如果我们就到此结束的话，多少有点遗憾。\n\n另外，如果我们再扩展一下业务场景，我们使用的不是等值查询，而是多值查询或者区间查询，比如查询 status in (a, b)，那上面的代码又怎么扩展呢？是不是又要引入一个方法，方法繁琐暂且不说，方法名叫啥都会让我们纠结很久；或许可以尝试把每个参数都从单值扩展成数组，然后赋值的地方从 = 改为 in()的方式，所有参数查询都使用 in 显然对性能不是那么友好。\n\n黄金\n接下来我们看看黄金的解法。在上面的方法中，我们引入了一个多余的结构体，并且无法避免在 dao 层的方法中做了很多判空赋值。那么我们能不能不引入 UserInfo 这个多余的结构体，并且也避免这些丑陋的判空？答案是可以的，函数式编程可以很好地解决这个问题，首先我们需要定义一个函数类型：\n```go\ntype Option func(*gorm.DB)\n```\n定义 Option 是一个函数，这个函数的入参类型是*gorm.DB，返回值为空。\n\n然后针对 DB 表中每个需要筛选查询的字段定义一个函数，为这个字段赋值，像下面这样：\n```go\nfunc UserID(userID int64) Option {\n   return func(db *gorm.DB) {\n      db.Where(\"`user_id` = ?\", userID)\n   }\n}\nfunc UserName(name string) Option {\n   return func(db *gorm.DB) {\n      db.Where(\"`user_name` = ?\", name)\n   }\n}\nfunc Role(role int32) Option {\n   return func(db *gorm.DB) {\n      db.Where(\"`role` = ?\", role)\n   }\n}\nfunc Status(status int32) Option {\n   return func(db *gorm.DB) {\n      db.Where(\"`status` = ?\", status)\n   }\n}\n```\n上面这组代码中，入参是一个字段的筛选值，返回的是一个 Option 函数，而这个函数的功能是把入参赋值给当前的【db *gorm.DB】对象。这也就是我们在文章一开始就提到的高阶函数，跟我们普通的函数不太一样，普通的函数返回的是一个简单类型的值或者一个封装类型的结构体，而这种高阶函数返回的是一个具备某种功能的函数。这里多说一句，虽然 go 语言很好地支持了函数式编程，但是由于其目前缺少对泛型的支持，导致高阶函数编程的使用并没有给开发者带来更多的便利，因此在平时业务代码中写高阶函数还是略为少见。而熟悉 JAVA 的同学都知道，JAVA 中的 Map、Reduce、Filter 等高阶函数使用起来非常的舒服。\n\n好，有了这一组函数之后，我们来看看 dao 层的查询方法怎么写：\n```go\nfunc GetUserInfo(ctx context.Context, options ...func(option *gorm.DB)) ([]*resource.UserInfo) {\n   db := GetDB(ctx)\n   db = db.Table(resource.UserInfo{}.TableName())\n   for _, option := range options {\n      option(db)\n   }\n   var infos []*resource.UserInfo\n   db.Find(&infos)\n   return infos\n}\n```\n没有对比就没有伤害，通过和最开始的方法比较，可以看到方法的入参由多个不同类型的参数变成了一组相同类型的函数，因此在处理这些参数的时候，也无需一个一个的判空，而是直接使用一个 for 循环就搞定，相比之前已经简洁了很多。\n\n那么调用该方法的代码怎么写呢，这里直接给出来：\n```go\n//只使用userID查询\ninfos := GetUserInfo(ctx, UserID(userID))\n//只使用userName查询\ninfos := GetUserInfo(ctx, UserName(name))\n//使用role和status同时查询\ninfos := GetUserInfo(ctx, Role(role), Status(status))\n```\n无论是使用任意的单个参数还是使用多个参数组合查询，我们都随便写，不用关注参数顺序，简洁又清晰，可读性也是非常好。\n\n再来考虑上面提到的扩展场景，如果我们需要多值查询，比如查询多个 status，那么我们只需要在 Option 中增加一个小小的函数即可：\n```go\nfunc StatusIn(status []int32) Option {\n   return func(db *gorm.DB) {\n      db.Where(\"`status` in ?\", status)\n   }\n}\n```\n对于其他字段或者等值查询也是同理，代码的简洁不言而喻。\n\n王者\n能优化到上面黄金的阶段，其实已经很简洁了，如果止步于此的话，也是完全可以的。但是如果还想进一步追求极致，那么请继续往下看！\n\n在上面方法中，我们通过高阶函数已经很好地解决了对于一张表中多字段组合查询的代码繁琐问题，但是对于不同的表查询，仍然要针对每个表都写一个查询方法，那么还有没有进一步优化的空间呢？我们发现，在 Option 中定义的这一组高阶函数，压根与某张表没关系，他只是简单地给 gorm.DB 赋值。因此，如果我们有多张表，每个表里都有 user_id、is_deleted、create_time、update_time 这些公共的字段，那么我们完全不用再重复定义一次，只需要在 Option 中定义一个就够了，每张表的查询都可以复用这些函数。进一步思考，我们发现，Option 中维护的是一些傻瓜式的代码，根本不需要我们每次手动去写，可以使用脚本生成，扫描一遍 DB 的表，为每个不重复的字段生成一个 Equal 方法、In 方法、Greater 方法、Less 方法，就可以解决所有表中按照不同字段做等值查询、多值查询、区间查询。\n\n解决了 Option 的问题之后，对于每个表的各种组合查询，就只需要写一个很简单的 Get 方法了，为了方便看，我们在这里再贴一次：\n```go\nfunc GetUserInfo(ctx context.Context, options ...func(option *gorm.DB)) ([]*resource.UserInfo) {\n   db := GetDB(ctx)\n   db = db.Table(resource.UserInfo{}.TableName())\n   for _, option := range options {\n      option(db)\n   }\n   var infos []*resource.UserInfo\n   db.Find(&infos)\n   return infos\n}\n```\n上面这个查询方法是针对 user_info 这个表写的，如果还有其他表，我们还需要为每个表都写一个和这个类似的 Get 方法。如果我们仔细观察每个表的 Get 方法，会发现这些方法其实就有两点不同：\n\n返回值类型不一样；\nTableName 不一样。\n如果我们能解决这两个问题，那我们就能够使用一个方法解决所有表的查询。首先对于第一点返回值不一致的问题，可以参考 json.unmarshal 的做法，把返回类型以一个参数的形式传进来，因为传入的是指针类型，所以就不用再给返回值了；而对于 tableName 不一致的问题，其实可以和上面处理不同参数的方式一样，增加一个 Option 方法来解决：\n```go\nfunc TableName(tableName string) Option {\n   return func(db *gorm.DB) {\n      db.Table(tableName)\n   }\n}\n```\n这样改造之后，我们的 dao 层查询方法就变成了这样：\n```go\nfunc GetRecord(ctx context.Context, in interface{}, options ...func(option *gorm.DB)) {\n   db := GetDB(ctx)\n   for _, option := range options {\n      option(db)\n   }\n   db.Find(in)\n   return\n}\n```\n注意，我们把方法名从之前的 GetUserInfo 变成了GetRecord，因为这个方法不仅能支持对于 user_info 表的查询，而且能够支持对一个库中所有表的查询。也就是说从最开始为每个表建一个类，每个类下面又写很多个查询方法，现在变成了所有表所有查询适用一个方法。\n\n然后我们看看调用这个方法的代码怎么写：\n```go\n//根据userID和userName查询\nvar infos []*resource.UserInfo\nGetRecord(ctx, &infos, TableName(resource.UserInfo{}.TableName()), UserID(userID), UserName(name))\n```\n这里还是给出了查询 user_info 表的示例，在调用的地方指定 tableName 和返回类型。\n\n经过这样的改造之后，我们最终实现了用一个简单的方法【GetRecord】 + 一个可自动生成的配置类【Option】对一个库中所有表的多种组合查询。代码的简洁和优雅又有了一些提升。美中不足的是，在调用查询方法的地方多传了两个参数，一个是返回值变量，一个是 tableName，多少显得有点不那么美观。\n\n总结\n这里通过对 grom 查询条件的抽象，大大简化了对 DB 组合查询的写法，提升了代码的简洁。对于其他 update、insert、delete 三种操作，也可以借用这种思想做一定程度的简化，因为篇幅关系我们不在这里赘述。如果大家还有其他想法，欢迎留言讨论！\n\n参考文献\nhttps://commandcenter.blogspot.com/2014/01/self-referential-functions-and-design.html\nhttps://coolshell.cn/articles/21146.html\n\n原文地址：<https://mp.weixin.qq.com/s/w1ebAgnzfDzoGG0sn6KGlQ>\n","source":"_posts/如何使用高阶函数编程提升代码的简洁性.md","raw":"---\ntitle: 如何使用高阶函数编程提升代码的简洁性\nurl: >-\n  /archives/ru-he-shi-yong-gao-jie-han-shu-bian-cheng-ti-sheng-dai-ma-de-jian-jie-xing\ncategories:\n  - golang\ntags:\n  - golang\nabbrlink: 54f8f4a7\ndate: 2022-02-24 23:04:47\nupdated: 2022-03-10 12:07:39\n---\n\n摘要\n函数是 Go 语言的一等公民，本文采用一种高阶函数的方式，抽象了使用 gorm 查询 DB 的查询条件，将多个表的各种复杂的组合查询抽象成了一个统一的方法和一个配置类，提升了代码的简洁和优雅，同时可以提升开发人员的效率。\n<!--more-->\n背景\n有一张 DB 表，业务上需要按照这个表里的不同字段做筛选查询，这是一个非常普遍的需求，我相信这种需求对于每个做业务开发的人都是绕不开的。比如我们有一张存储用户信息的表，简化之后的表结构如下：\n```mysql\nCREATE TABLE `user_info` (\n  `id` bigint unsigned NOT NULL AUTO_INCREMENT COMMENT '自增主键',\n  `user_id` bigint NOT NULL COMMENT '用户id',\n  `user_name` varchar NOT NULL COMMENT '用户姓名',\n  `role` int NOT NULL DEFAULT '0' COMMENT '角色',\n  `status` int NOT NULL DEFAULT '0' COMMENT '状态',\n  PRIMARY KEY (`id`),\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='用户信息表';\n```\n这个表里有几个关键字段，user_id、user_name 、 role、status。如果我们想按照 user_id 来做筛选，那我们一般是在 dao 层写一个这样的方法(为了示例代码的简洁，这里所有示例代码都省去了错误处理部分)：\n```go\nfunc GetUserInfoByUid(ctx context.Context, userID int64) ([]*resource.UserInfo) {\n   db := GetDB(ctx)\n   db = db.Table(resource.UserInfo{}.TableName())\n   var infos []*resource.UserInfo\n   db = db.Where(\"user_id = ?\", userID)\n   db.Find(&infos)\n   return infos\n}\n```\n如果业务上又需要按照 user_name 来查询，那我们就需要再写一个类似的方法按照 user_name 来查询：\n```go\nfunc GetUserInfoByName(ctx context.Context, name string) ([]*resource.UserInfo) {\n   db := GetDB(ctx)\n   db = db.Table(resource.UserInfo{}.TableName())\n   var infos []*resource.UserInfo\n   db = db.Where(\"user_name = ?\", name)\n   db.Find(&infos)\n   return infos\n}\n```\n可以看到，两个方法的代码极度相似，如果再需要按照 role 或者 status 查询，那不得不再来几个方法，导致相似的方法非常多。当然很容易想到，我们可以用一个方法，多几个入参的形式来解决这个问题，于是，我们把上面两个方法合并成下面这种方法，能够支持按照多个字段筛选查询：\n```go\nfunc GetUserInfo(ctx context.Context, userID int64, name string, role int, status int) ([]*resource.UserInfo) {\n   db := GetDB(ctx)\n   db = db.Table(resource.UserInfo{}.TableName())\n   var infos []*resource.UserInfo\n   if userID > 0 {\n      db = db.Where(\"user_id = ?\", userID)\n   }\n   if name != \"\" {\n      db = db.Where(\"user_name = ?\", name)\n   }\n   if role > 0 {\n      db = db.Where(\"role = ?\", role)\n   }\n   if status > 0 {\n      db = db.Where(\"status = ?\", status)\n   }\n   db.Find(&infos)\n   return infos\n}\n```\n相应地，调用该方法的代码也需要做出改变：\n```go\n//只根据UserID查询\ninfos := GetUserInfo(ctx, userID, \"\", 0, 0)\n//只根据UserName查询\ninfos := GetUserInfo(ctx, 0, name, 0, 0)\n//只根据Role查询\ninfos := GetUserInfo(ctx, 0, \"\", role, 0)\n//只根据Status查询\ninfos := GetUserInfo(ctx, 0, \"\", 0, status)\n```\n这种代码无论是写代码的人还是读代码的人，都会感觉非常难受。我们这里只列举了四个参数，可以想想这个表里如果有十几个到二十个字段都需要做筛选查询，这种代码看上去是一种什么样的感觉。首先，GetUserInfo 方法本身入参非常多，里面充斥着各种 != 0 和 != \"\"的判断，并且需要注意的是，0 一定不能作为字段的有效值，否则 != 0 这种判断就会有问题。其次，作为调用方，明明只是根据一个字段筛选查询，却不得不为其他参数填充一个 0 或者\"\"来占位，而且调用者要特别谨慎，因为一不小心，就可能会把 role 填到了 status 的位置上去，因为他们的类型都一样，编译器不会检查出任何错误，很容易搞出业务 bug。\n\n解决方案\n如果说解决这种问题有段位，那么以上的写法只能算是青铜，接下来我们看看白银、黄金和王者。\n\n白银\n解决这种问题，一种比较常见的方案是，新建一个结构体，把各种查询的字段都放在这个结构体中，然后把这个结构体作为入参传入到 dao 层的查询方法中。而在调用 dao 方法的地方，根据各自的需要，构建包含不同字段的结构体。在这个例子中，我们可以构建一个 UserInfo 的结构体如下：\n```go\ntype UserInfo struct {\n   UserID int64\n   Name string\n   Role int32\n   Status int32\n}\n```\n把 UserInfo 作为入参传给 GetUserInfo 方法，于是 GetUserInfo 方法变成了这样：\n```go\nfunc GetUserInfo(ctx context.Context, info *UserInfo) ([]*resource.UserInfo) {\n   db := GetDB(ctx)\n   db = db.Table(resource.UserInfo{}.TableName())\n   var infos []*resource.UserInfo\n   if info.UserID > 0 {\n      db = db.Where(\"user_id = ?\", info.UserID)\n   }\n   if info.Name != \"\" {\n      db = db.Where(\"user_name = ?\", info.Name)\n   }\n   if info.Role > 0 {\n      db = db.Where(\"role = ?\", info.Role)\n   }\n   if info.Status > 0 {\n      db = db.Where(\"status = ?\", info.Status)\n   }\n   db.Find(&infos)\n   return infos\n}\n```\n相应地，调用该方法的代码也需要变动：\n```go\n//只根据userD查询\ninfo := &UserInfo{\n   UserID: userID,\n}\ninfos := GetUserInfo(ctx, info)\n//只根据name查询\ninfo := &UserInfo{\n   Name: name,\n}\ninfos := GetUserInfo(ctx, info)\n```\n这个代码写到这里，相比最开始的方法其实已经好了不少，至少 dao 层的方法从很多个入参变成了一个，调用方的代码也可以根据自己的需要构建参数，不需要很多空占位符。但是存在的问题也比较明显：仍然有很多判空不说，还引入了一个多余的结构体。如果我们就到此结束的话，多少有点遗憾。\n\n另外，如果我们再扩展一下业务场景，我们使用的不是等值查询，而是多值查询或者区间查询，比如查询 status in (a, b)，那上面的代码又怎么扩展呢？是不是又要引入一个方法，方法繁琐暂且不说，方法名叫啥都会让我们纠结很久；或许可以尝试把每个参数都从单值扩展成数组，然后赋值的地方从 = 改为 in()的方式，所有参数查询都使用 in 显然对性能不是那么友好。\n\n黄金\n接下来我们看看黄金的解法。在上面的方法中，我们引入了一个多余的结构体，并且无法避免在 dao 层的方法中做了很多判空赋值。那么我们能不能不引入 UserInfo 这个多余的结构体，并且也避免这些丑陋的判空？答案是可以的，函数式编程可以很好地解决这个问题，首先我们需要定义一个函数类型：\n```go\ntype Option func(*gorm.DB)\n```\n定义 Option 是一个函数，这个函数的入参类型是*gorm.DB，返回值为空。\n\n然后针对 DB 表中每个需要筛选查询的字段定义一个函数，为这个字段赋值，像下面这样：\n```go\nfunc UserID(userID int64) Option {\n   return func(db *gorm.DB) {\n      db.Where(\"`user_id` = ?\", userID)\n   }\n}\nfunc UserName(name string) Option {\n   return func(db *gorm.DB) {\n      db.Where(\"`user_name` = ?\", name)\n   }\n}\nfunc Role(role int32) Option {\n   return func(db *gorm.DB) {\n      db.Where(\"`role` = ?\", role)\n   }\n}\nfunc Status(status int32) Option {\n   return func(db *gorm.DB) {\n      db.Where(\"`status` = ?\", status)\n   }\n}\n```\n上面这组代码中，入参是一个字段的筛选值，返回的是一个 Option 函数，而这个函数的功能是把入参赋值给当前的【db *gorm.DB】对象。这也就是我们在文章一开始就提到的高阶函数，跟我们普通的函数不太一样，普通的函数返回的是一个简单类型的值或者一个封装类型的结构体，而这种高阶函数返回的是一个具备某种功能的函数。这里多说一句，虽然 go 语言很好地支持了函数式编程，但是由于其目前缺少对泛型的支持，导致高阶函数编程的使用并没有给开发者带来更多的便利，因此在平时业务代码中写高阶函数还是略为少见。而熟悉 JAVA 的同学都知道，JAVA 中的 Map、Reduce、Filter 等高阶函数使用起来非常的舒服。\n\n好，有了这一组函数之后，我们来看看 dao 层的查询方法怎么写：\n```go\nfunc GetUserInfo(ctx context.Context, options ...func(option *gorm.DB)) ([]*resource.UserInfo) {\n   db := GetDB(ctx)\n   db = db.Table(resource.UserInfo{}.TableName())\n   for _, option := range options {\n      option(db)\n   }\n   var infos []*resource.UserInfo\n   db.Find(&infos)\n   return infos\n}\n```\n没有对比就没有伤害，通过和最开始的方法比较，可以看到方法的入参由多个不同类型的参数变成了一组相同类型的函数，因此在处理这些参数的时候，也无需一个一个的判空，而是直接使用一个 for 循环就搞定，相比之前已经简洁了很多。\n\n那么调用该方法的代码怎么写呢，这里直接给出来：\n```go\n//只使用userID查询\ninfos := GetUserInfo(ctx, UserID(userID))\n//只使用userName查询\ninfos := GetUserInfo(ctx, UserName(name))\n//使用role和status同时查询\ninfos := GetUserInfo(ctx, Role(role), Status(status))\n```\n无论是使用任意的单个参数还是使用多个参数组合查询，我们都随便写，不用关注参数顺序，简洁又清晰，可读性也是非常好。\n\n再来考虑上面提到的扩展场景，如果我们需要多值查询，比如查询多个 status，那么我们只需要在 Option 中增加一个小小的函数即可：\n```go\nfunc StatusIn(status []int32) Option {\n   return func(db *gorm.DB) {\n      db.Where(\"`status` in ?\", status)\n   }\n}\n```\n对于其他字段或者等值查询也是同理，代码的简洁不言而喻。\n\n王者\n能优化到上面黄金的阶段，其实已经很简洁了，如果止步于此的话，也是完全可以的。但是如果还想进一步追求极致，那么请继续往下看！\n\n在上面方法中，我们通过高阶函数已经很好地解决了对于一张表中多字段组合查询的代码繁琐问题，但是对于不同的表查询，仍然要针对每个表都写一个查询方法，那么还有没有进一步优化的空间呢？我们发现，在 Option 中定义的这一组高阶函数，压根与某张表没关系，他只是简单地给 gorm.DB 赋值。因此，如果我们有多张表，每个表里都有 user_id、is_deleted、create_time、update_time 这些公共的字段，那么我们完全不用再重复定义一次，只需要在 Option 中定义一个就够了，每张表的查询都可以复用这些函数。进一步思考，我们发现，Option 中维护的是一些傻瓜式的代码，根本不需要我们每次手动去写，可以使用脚本生成，扫描一遍 DB 的表，为每个不重复的字段生成一个 Equal 方法、In 方法、Greater 方法、Less 方法，就可以解决所有表中按照不同字段做等值查询、多值查询、区间查询。\n\n解决了 Option 的问题之后，对于每个表的各种组合查询，就只需要写一个很简单的 Get 方法了，为了方便看，我们在这里再贴一次：\n```go\nfunc GetUserInfo(ctx context.Context, options ...func(option *gorm.DB)) ([]*resource.UserInfo) {\n   db := GetDB(ctx)\n   db = db.Table(resource.UserInfo{}.TableName())\n   for _, option := range options {\n      option(db)\n   }\n   var infos []*resource.UserInfo\n   db.Find(&infos)\n   return infos\n}\n```\n上面这个查询方法是针对 user_info 这个表写的，如果还有其他表，我们还需要为每个表都写一个和这个类似的 Get 方法。如果我们仔细观察每个表的 Get 方法，会发现这些方法其实就有两点不同：\n\n返回值类型不一样；\nTableName 不一样。\n如果我们能解决这两个问题，那我们就能够使用一个方法解决所有表的查询。首先对于第一点返回值不一致的问题，可以参考 json.unmarshal 的做法，把返回类型以一个参数的形式传进来，因为传入的是指针类型，所以就不用再给返回值了；而对于 tableName 不一致的问题，其实可以和上面处理不同参数的方式一样，增加一个 Option 方法来解决：\n```go\nfunc TableName(tableName string) Option {\n   return func(db *gorm.DB) {\n      db.Table(tableName)\n   }\n}\n```\n这样改造之后，我们的 dao 层查询方法就变成了这样：\n```go\nfunc GetRecord(ctx context.Context, in interface{}, options ...func(option *gorm.DB)) {\n   db := GetDB(ctx)\n   for _, option := range options {\n      option(db)\n   }\n   db.Find(in)\n   return\n}\n```\n注意，我们把方法名从之前的 GetUserInfo 变成了GetRecord，因为这个方法不仅能支持对于 user_info 表的查询，而且能够支持对一个库中所有表的查询。也就是说从最开始为每个表建一个类，每个类下面又写很多个查询方法，现在变成了所有表所有查询适用一个方法。\n\n然后我们看看调用这个方法的代码怎么写：\n```go\n//根据userID和userName查询\nvar infos []*resource.UserInfo\nGetRecord(ctx, &infos, TableName(resource.UserInfo{}.TableName()), UserID(userID), UserName(name))\n```\n这里还是给出了查询 user_info 表的示例，在调用的地方指定 tableName 和返回类型。\n\n经过这样的改造之后，我们最终实现了用一个简单的方法【GetRecord】 + 一个可自动生成的配置类【Option】对一个库中所有表的多种组合查询。代码的简洁和优雅又有了一些提升。美中不足的是，在调用查询方法的地方多传了两个参数，一个是返回值变量，一个是 tableName，多少显得有点不那么美观。\n\n总结\n这里通过对 grom 查询条件的抽象，大大简化了对 DB 组合查询的写法，提升了代码的简洁。对于其他 update、insert、delete 三种操作，也可以借用这种思想做一定程度的简化，因为篇幅关系我们不在这里赘述。如果大家还有其他想法，欢迎留言讨论！\n\n参考文献\nhttps://commandcenter.blogspot.com/2014/01/self-referential-functions-and-design.html\nhttps://coolshell.cn/articles/21146.html\n\n原文地址：<https://mp.weixin.qq.com/s/w1ebAgnzfDzoGG0sn6KGlQ>\n","slug":"如何使用高阶函数编程提升代码的简洁性","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clh95h7l10041gwuv7jq11xi8","content":"<p>摘要<br>函数是 Go 语言的一等公民，本文采用一种高阶函数的方式，抽象了使用 gorm 查询 DB 的查询条件，将多个表的各种复杂的组合查询抽象成了一个统一的方法和一个配置类，提升了代码的简洁和优雅，同时可以提升开发人员的效率。</p>\n<span id=\"more\"></span>\n<p>背景<br>有一张 DB 表，业务上需要按照这个表里的不同字段做筛选查询，这是一个非常普遍的需求，我相信这种需求对于每个做业务开发的人都是绕不开的。比如我们有一张存储用户信息的表，简化之后的表结构如下：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">CREATE TABLE &#96;user_info&#96; (\n  &#96;id&#96; bigint unsigned NOT NULL AUTO_INCREMENT COMMENT &#39;自增主键&#39;,\n  &#96;user_id&#96; bigint NOT NULL COMMENT &#39;用户id&#39;,\n  &#96;user_name&#96; varchar NOT NULL COMMENT &#39;用户姓名&#39;,\n  &#96;role&#96; int NOT NULL DEFAULT &#39;0&#39; COMMENT &#39;角色&#39;,\n  &#96;status&#96; int NOT NULL DEFAULT &#39;0&#39; COMMENT &#39;状态&#39;,\n  PRIMARY KEY (&#96;id&#96;),\n) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8mb4 COMMENT&#x3D;&#39;用户信息表&#39;;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这个表里有几个关键字段，user_id、user_name 、 role、status。如果我们想按照 user_id 来做筛选，那我们一般是在 dao 层写一个这样的方法(为了示例代码的简洁，这里所有示例代码都省去了错误处理部分)：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">GetUserInfoByUid</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> userID <span class=\"token builtin\">int64</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>resource<span class=\"token punctuation\">.</span>UserInfo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   db <span class=\"token operator\">:=</span> <span class=\"token function\">GetDB</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span>\n   db <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">Table</span><span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">.</span>UserInfo<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">.</span><span class=\"token function\">TableName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">var</span> infos <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>resource<span class=\"token punctuation\">.</span>UserInfo\n   db <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user_id = ?\"</span><span class=\"token punctuation\">,</span> userID<span class=\"token punctuation\">)</span>\n   db<span class=\"token punctuation\">.</span><span class=\"token function\">Find</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>infos<span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">return</span> infos\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>如果业务上又需要按照 user_name 来查询，那我们就需要再写一个类似的方法按照 user_name 来查询：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">GetUserInfoByName</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> name <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>resource<span class=\"token punctuation\">.</span>UserInfo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   db <span class=\"token operator\">:=</span> <span class=\"token function\">GetDB</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span>\n   db <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">Table</span><span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">.</span>UserInfo<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">.</span><span class=\"token function\">TableName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">var</span> infos <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>resource<span class=\"token punctuation\">.</span>UserInfo\n   db <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user_name = ?\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span>\n   db<span class=\"token punctuation\">.</span><span class=\"token function\">Find</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>infos<span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">return</span> infos\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>可以看到，两个方法的代码极度相似，如果再需要按照 role 或者 status 查询，那不得不再来几个方法，导致相似的方法非常多。当然很容易想到，我们可以用一个方法，多几个入参的形式来解决这个问题，于是，我们把上面两个方法合并成下面这种方法，能够支持按照多个字段筛选查询：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">GetUserInfo</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> userID <span class=\"token builtin\">int64</span><span class=\"token punctuation\">,</span> name <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> role <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> status <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>resource<span class=\"token punctuation\">.</span>UserInfo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   db <span class=\"token operator\">:=</span> <span class=\"token function\">GetDB</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span>\n   db <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">Table</span><span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">.</span>UserInfo<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">.</span><span class=\"token function\">TableName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">var</span> infos <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>resource<span class=\"token punctuation\">.</span>UserInfo\n   <span class=\"token keyword\">if</span> userID <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span>\n      db <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user_id = ?\"</span><span class=\"token punctuation\">,</span> userID<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token keyword\">if</span> name <span class=\"token operator\">!=</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">&#123;</span>\n      db <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user_name = ?\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token keyword\">if</span> role <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span>\n      db <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"role = ?\"</span><span class=\"token punctuation\">,</span> role<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token keyword\">if</span> status <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span>\n      db <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"status = ?\"</span><span class=\"token punctuation\">,</span> status<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n   db<span class=\"token punctuation\">.</span><span class=\"token function\">Find</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>infos<span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">return</span> infos\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>相应地，调用该方法的代码也需要做出改变：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//只根据UserID查询</span>\ninfos <span class=\"token operator\">:=</span> <span class=\"token function\">GetUserInfo</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> userID<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//只根据UserName查询</span>\ninfos <span class=\"token operator\">:=</span> <span class=\"token function\">GetUserInfo</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//只根据Role查询</span>\ninfos <span class=\"token operator\">:=</span> <span class=\"token function\">GetUserInfo</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> role<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//只根据Status查询</span>\ninfos <span class=\"token operator\">:=</span> <span class=\"token function\">GetUserInfo</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> status<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这种代码无论是写代码的人还是读代码的人，都会感觉非常难受。我们这里只列举了四个参数，可以想想这个表里如果有十几个到二十个字段都需要做筛选查询，这种代码看上去是一种什么样的感觉。首先，GetUserInfo 方法本身入参非常多，里面充斥着各种 !&#x3D; 0 和 !&#x3D; “”的判断，并且需要注意的是，0 一定不能作为字段的有效值，否则 !&#x3D; 0 这种判断就会有问题。其次，作为调用方，明明只是根据一个字段筛选查询，却不得不为其他参数填充一个 0 或者””来占位，而且调用者要特别谨慎，因为一不小心，就可能会把 role 填到了 status 的位置上去，因为他们的类型都一样，编译器不会检查出任何错误，很容易搞出业务 bug。</p>\n<p>解决方案<br>如果说解决这种问题有段位，那么以上的写法只能算是青铜，接下来我们看看白银、黄金和王者。</p>\n<p>白银<br>解决这种问题，一种比较常见的方案是，新建一个结构体，把各种查询的字段都放在这个结构体中，然后把这个结构体作为入参传入到 dao 层的查询方法中。而在调用 dao 方法的地方，根据各自的需要，构建包含不同字段的结构体。在这个例子中，我们可以构建一个 UserInfo 的结构体如下：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> UserInfo <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n   UserID <span class=\"token builtin\">int64</span>\n   Name <span class=\"token builtin\">string</span>\n   Role <span class=\"token builtin\">int32</span>\n   Status <span class=\"token builtin\">int32</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>把 UserInfo 作为入参传给 GetUserInfo 方法，于是 GetUserInfo 方法变成了这样：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">GetUserInfo</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> info <span class=\"token operator\">*</span>UserInfo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>resource<span class=\"token punctuation\">.</span>UserInfo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   db <span class=\"token operator\">:=</span> <span class=\"token function\">GetDB</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span>\n   db <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">Table</span><span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">.</span>UserInfo<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">.</span><span class=\"token function\">TableName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">var</span> infos <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>resource<span class=\"token punctuation\">.</span>UserInfo\n   <span class=\"token keyword\">if</span> info<span class=\"token punctuation\">.</span>UserID <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span>\n      db <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user_id = ?\"</span><span class=\"token punctuation\">,</span> info<span class=\"token punctuation\">.</span>UserID<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token keyword\">if</span> info<span class=\"token punctuation\">.</span>Name <span class=\"token operator\">!=</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">&#123;</span>\n      db <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user_name = ?\"</span><span class=\"token punctuation\">,</span> info<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token keyword\">if</span> info<span class=\"token punctuation\">.</span>Role <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span>\n      db <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"role = ?\"</span><span class=\"token punctuation\">,</span> info<span class=\"token punctuation\">.</span>Role<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token keyword\">if</span> info<span class=\"token punctuation\">.</span>Status <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span>\n      db <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"status = ?\"</span><span class=\"token punctuation\">,</span> info<span class=\"token punctuation\">.</span>Status<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n   db<span class=\"token punctuation\">.</span><span class=\"token function\">Find</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>infos<span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">return</span> infos\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>相应地，调用该方法的代码也需要变动：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//只根据userD查询</span>\ninfo <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>UserInfo<span class=\"token punctuation\">&#123;</span>\n   UserID<span class=\"token punctuation\">:</span> userID<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span>\ninfos <span class=\"token operator\">:=</span> <span class=\"token function\">GetUserInfo</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> info<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//只根据name查询</span>\ninfo <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>UserInfo<span class=\"token punctuation\">&#123;</span>\n   Name<span class=\"token punctuation\">:</span> name<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span>\ninfos <span class=\"token operator\">:=</span> <span class=\"token function\">GetUserInfo</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> info<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这个代码写到这里，相比最开始的方法其实已经好了不少，至少 dao 层的方法从很多个入参变成了一个，调用方的代码也可以根据自己的需要构建参数，不需要很多空占位符。但是存在的问题也比较明显：仍然有很多判空不说，还引入了一个多余的结构体。如果我们就到此结束的话，多少有点遗憾。</p>\n<p>另外，如果我们再扩展一下业务场景，我们使用的不是等值查询，而是多值查询或者区间查询，比如查询 status in (a, b)，那上面的代码又怎么扩展呢？是不是又要引入一个方法，方法繁琐暂且不说，方法名叫啥都会让我们纠结很久；或许可以尝试把每个参数都从单值扩展成数组，然后赋值的地方从 &#x3D; 改为 in()的方式，所有参数查询都使用 in 显然对性能不是那么友好。</p>\n<p>黄金<br>接下来我们看看黄金的解法。在上面的方法中，我们引入了一个多余的结构体，并且无法避免在 dao 层的方法中做了很多判空赋值。那么我们能不能不引入 UserInfo 这个多余的结构体，并且也避免这些丑陋的判空？答案是可以的，函数式编程可以很好地解决这个问题，首先我们需要定义一个函数类型：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Option <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>gorm<span class=\"token punctuation\">.</span>DB<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>定义 Option 是一个函数，这个函数的入参类型是*gorm.DB，返回值为空。</p>\n<p>然后针对 DB 表中每个需要筛选查询的字段定义一个函数，为这个字段赋值，像下面这样：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">UserID</span><span class=\"token punctuation\">(</span>userID <span class=\"token builtin\">int64</span><span class=\"token punctuation\">)</span> Option <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">return</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>db <span class=\"token operator\">*</span>gorm<span class=\"token punctuation\">.</span>DB<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      db<span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"`user_id` = ?\"</span><span class=\"token punctuation\">,</span> userID<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">UserName</span><span class=\"token punctuation\">(</span>name <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> Option <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">return</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>db <span class=\"token operator\">*</span>gorm<span class=\"token punctuation\">.</span>DB<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      db<span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"`user_name` = ?\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">Role</span><span class=\"token punctuation\">(</span>role <span class=\"token builtin\">int32</span><span class=\"token punctuation\">)</span> Option <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">return</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>db <span class=\"token operator\">*</span>gorm<span class=\"token punctuation\">.</span>DB<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      db<span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"`role` = ?\"</span><span class=\"token punctuation\">,</span> role<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">Status</span><span class=\"token punctuation\">(</span>status <span class=\"token builtin\">int32</span><span class=\"token punctuation\">)</span> Option <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">return</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>db <span class=\"token operator\">*</span>gorm<span class=\"token punctuation\">.</span>DB<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      db<span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"`status` = ?\"</span><span class=\"token punctuation\">,</span> status<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>上面这组代码中，入参是一个字段的筛选值，返回的是一个 Option 函数，而这个函数的功能是把入参赋值给当前的【db *gorm.DB】对象。这也就是我们在文章一开始就提到的高阶函数，跟我们普通的函数不太一样，普通的函数返回的是一个简单类型的值或者一个封装类型的结构体，而这种高阶函数返回的是一个具备某种功能的函数。这里多说一句，虽然 go 语言很好地支持了函数式编程，但是由于其目前缺少对泛型的支持，导致高阶函数编程的使用并没有给开发者带来更多的便利，因此在平时业务代码中写高阶函数还是略为少见。而熟悉 JAVA 的同学都知道，JAVA 中的 Map、Reduce、Filter 等高阶函数使用起来非常的舒服。</p>\n<p>好，有了这一组函数之后，我们来看看 dao 层的查询方法怎么写：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">GetUserInfo</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> options <span class=\"token operator\">...</span><span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>option <span class=\"token operator\">*</span>gorm<span class=\"token punctuation\">.</span>DB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>resource<span class=\"token punctuation\">.</span>UserInfo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   db <span class=\"token operator\">:=</span> <span class=\"token function\">GetDB</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span>\n   db <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">Table</span><span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">.</span>UserInfo<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">.</span><span class=\"token function\">TableName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> option <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> options <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">option</span><span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token keyword\">var</span> infos <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>resource<span class=\"token punctuation\">.</span>UserInfo\n   db<span class=\"token punctuation\">.</span><span class=\"token function\">Find</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>infos<span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">return</span> infos\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>没有对比就没有伤害，通过和最开始的方法比较，可以看到方法的入参由多个不同类型的参数变成了一组相同类型的函数，因此在处理这些参数的时候，也无需一个一个的判空，而是直接使用一个 for 循环就搞定，相比之前已经简洁了很多。</p>\n<p>那么调用该方法的代码怎么写呢，这里直接给出来：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//只使用userID查询</span>\ninfos <span class=\"token operator\">:=</span> <span class=\"token function\">GetUserInfo</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token function\">UserID</span><span class=\"token punctuation\">(</span>userID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//只使用userName查询</span>\ninfos <span class=\"token operator\">:=</span> <span class=\"token function\">GetUserInfo</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token function\">UserName</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//使用role和status同时查询</span>\ninfos <span class=\"token operator\">:=</span> <span class=\"token function\">GetUserInfo</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token function\">Role</span><span class=\"token punctuation\">(</span>role<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Status</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>无论是使用任意的单个参数还是使用多个参数组合查询，我们都随便写，不用关注参数顺序，简洁又清晰，可读性也是非常好。</p>\n<p>再来考虑上面提到的扩展场景，如果我们需要多值查询，比如查询多个 status，那么我们只需要在 Option 中增加一个小小的函数即可：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">StatusIn</span><span class=\"token punctuation\">(</span>status <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int32</span><span class=\"token punctuation\">)</span> Option <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">return</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>db <span class=\"token operator\">*</span>gorm<span class=\"token punctuation\">.</span>DB<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      db<span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"`status` in ?\"</span><span class=\"token punctuation\">,</span> status<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>对于其他字段或者等值查询也是同理，代码的简洁不言而喻。</p>\n<p>王者<br>能优化到上面黄金的阶段，其实已经很简洁了，如果止步于此的话，也是完全可以的。但是如果还想进一步追求极致，那么请继续往下看！</p>\n<p>在上面方法中，我们通过高阶函数已经很好地解决了对于一张表中多字段组合查询的代码繁琐问题，但是对于不同的表查询，仍然要针对每个表都写一个查询方法，那么还有没有进一步优化的空间呢？我们发现，在 Option 中定义的这一组高阶函数，压根与某张表没关系，他只是简单地给 gorm.DB 赋值。因此，如果我们有多张表，每个表里都有 user_id、is_deleted、create_time、update_time 这些公共的字段，那么我们完全不用再重复定义一次，只需要在 Option 中定义一个就够了，每张表的查询都可以复用这些函数。进一步思考，我们发现，Option 中维护的是一些傻瓜式的代码，根本不需要我们每次手动去写，可以使用脚本生成，扫描一遍 DB 的表，为每个不重复的字段生成一个 Equal 方法、In 方法、Greater 方法、Less 方法，就可以解决所有表中按照不同字段做等值查询、多值查询、区间查询。</p>\n<p>解决了 Option 的问题之后，对于每个表的各种组合查询，就只需要写一个很简单的 Get 方法了，为了方便看，我们在这里再贴一次：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">GetUserInfo</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> options <span class=\"token operator\">...</span><span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>option <span class=\"token operator\">*</span>gorm<span class=\"token punctuation\">.</span>DB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>resource<span class=\"token punctuation\">.</span>UserInfo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   db <span class=\"token operator\">:=</span> <span class=\"token function\">GetDB</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span>\n   db <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">Table</span><span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">.</span>UserInfo<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">.</span><span class=\"token function\">TableName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> option <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> options <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">option</span><span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token keyword\">var</span> infos <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>resource<span class=\"token punctuation\">.</span>UserInfo\n   db<span class=\"token punctuation\">.</span><span class=\"token function\">Find</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>infos<span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">return</span> infos\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>上面这个查询方法是针对 user_info 这个表写的，如果还有其他表，我们还需要为每个表都写一个和这个类似的 Get 方法。如果我们仔细观察每个表的 Get 方法，会发现这些方法其实就有两点不同：</p>\n<p>返回值类型不一样；<br>TableName 不一样。<br>如果我们能解决这两个问题，那我们就能够使用一个方法解决所有表的查询。首先对于第一点返回值不一致的问题，可以参考 json.unmarshal 的做法，把返回类型以一个参数的形式传进来，因为传入的是指针类型，所以就不用再给返回值了；而对于 tableName 不一致的问题，其实可以和上面处理不同参数的方式一样，增加一个 Option 方法来解决：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">TableName</span><span class=\"token punctuation\">(</span>tableName <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> Option <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">return</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>db <span class=\"token operator\">*</span>gorm<span class=\"token punctuation\">.</span>DB<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      db<span class=\"token punctuation\">.</span><span class=\"token function\">Table</span><span class=\"token punctuation\">(</span>tableName<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这样改造之后，我们的 dao 层查询方法就变成了这样：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">GetRecord</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> in <span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> options <span class=\"token operator\">...</span><span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>option <span class=\"token operator\">*</span>gorm<span class=\"token punctuation\">.</span>DB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   db <span class=\"token operator\">:=</span> <span class=\"token function\">GetDB</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> option <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> options <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">option</span><span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n   db<span class=\"token punctuation\">.</span><span class=\"token function\">Find</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">return</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>注意，我们把方法名从之前的 GetUserInfo 变成了GetRecord，因为这个方法不仅能支持对于 user_info 表的查询，而且能够支持对一个库中所有表的查询。也就是说从最开始为每个表建一个类，每个类下面又写很多个查询方法，现在变成了所有表所有查询适用一个方法。</p>\n<p>然后我们看看调用这个方法的代码怎么写：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//根据userID和userName查询</span>\n<span class=\"token keyword\">var</span> infos <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>resource<span class=\"token punctuation\">.</span>UserInfo\n<span class=\"token function\">GetRecord</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>infos<span class=\"token punctuation\">,</span> <span class=\"token function\">TableName</span><span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">.</span>UserInfo<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">.</span><span class=\"token function\">TableName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">UserID</span><span class=\"token punctuation\">(</span>userID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">UserName</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>这里还是给出了查询 user_info 表的示例，在调用的地方指定 tableName 和返回类型。</p>\n<p>经过这样的改造之后，我们最终实现了用一个简单的方法【GetRecord】 + 一个可自动生成的配置类【Option】对一个库中所有表的多种组合查询。代码的简洁和优雅又有了一些提升。美中不足的是，在调用查询方法的地方多传了两个参数，一个是返回值变量，一个是 tableName，多少显得有点不那么美观。</p>\n<p>总结<br>这里通过对 grom 查询条件的抽象，大大简化了对 DB 组合查询的写法，提升了代码的简洁。对于其他 update、insert、delete 三种操作，也可以借用这种思想做一定程度的简化，因为篇幅关系我们不在这里赘述。如果大家还有其他想法，欢迎留言讨论！</p>\n<p>参考文献<br><a href=\"https://commandcenter.blogspot.com/2014/01/self-referential-functions-and-design.html\">https://commandcenter.blogspot.com/2014/01/self-referential-functions-and-design.html</a><br><a href=\"https://coolshell.cn/articles/21146.html\">https://coolshell.cn/articles/21146.html</a></p>\n<p>原文地址：<a href=\"https://mp.weixin.qq.com/s/w1ebAgnzfDzoGG0sn6KGlQ\">https://mp.weixin.qq.com/s/w1ebAgnzfDzoGG0sn6KGlQ</a></p>\n","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}},"cover":false,"excerpt":"<p>摘要<br>函数是 Go 语言的一等公民，本文采用一种高阶函数的方式，抽象了使用 gorm 查询 DB 的查询条件，将多个表的各种复杂的组合查询抽象成了一个统一的方法和一个配置类，提升了代码的简洁和优雅，同时可以提升开发人员的效率。</p>","more":"<p>背景<br>有一张 DB 表，业务上需要按照这个表里的不同字段做筛选查询，这是一个非常普遍的需求，我相信这种需求对于每个做业务开发的人都是绕不开的。比如我们有一张存储用户信息的表，简化之后的表结构如下：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">CREATE TABLE &#96;user_info&#96; (\n  &#96;id&#96; bigint unsigned NOT NULL AUTO_INCREMENT COMMENT &#39;自增主键&#39;,\n  &#96;user_id&#96; bigint NOT NULL COMMENT &#39;用户id&#39;,\n  &#96;user_name&#96; varchar NOT NULL COMMENT &#39;用户姓名&#39;,\n  &#96;role&#96; int NOT NULL DEFAULT &#39;0&#39; COMMENT &#39;角色&#39;,\n  &#96;status&#96; int NOT NULL DEFAULT &#39;0&#39; COMMENT &#39;状态&#39;,\n  PRIMARY KEY (&#96;id&#96;),\n) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8mb4 COMMENT&#x3D;&#39;用户信息表&#39;;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这个表里有几个关键字段，user_id、user_name 、 role、status。如果我们想按照 user_id 来做筛选，那我们一般是在 dao 层写一个这样的方法(为了示例代码的简洁，这里所有示例代码都省去了错误处理部分)：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">GetUserInfoByUid</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> userID <span class=\"token builtin\">int64</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>resource<span class=\"token punctuation\">.</span>UserInfo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   db <span class=\"token operator\">:=</span> <span class=\"token function\">GetDB</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span>\n   db <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">Table</span><span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">.</span>UserInfo<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">.</span><span class=\"token function\">TableName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">var</span> infos <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>resource<span class=\"token punctuation\">.</span>UserInfo\n   db <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user_id = ?\"</span><span class=\"token punctuation\">,</span> userID<span class=\"token punctuation\">)</span>\n   db<span class=\"token punctuation\">.</span><span class=\"token function\">Find</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>infos<span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">return</span> infos\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>如果业务上又需要按照 user_name 来查询，那我们就需要再写一个类似的方法按照 user_name 来查询：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">GetUserInfoByName</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> name <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>resource<span class=\"token punctuation\">.</span>UserInfo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   db <span class=\"token operator\">:=</span> <span class=\"token function\">GetDB</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span>\n   db <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">Table</span><span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">.</span>UserInfo<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">.</span><span class=\"token function\">TableName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">var</span> infos <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>resource<span class=\"token punctuation\">.</span>UserInfo\n   db <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user_name = ?\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span>\n   db<span class=\"token punctuation\">.</span><span class=\"token function\">Find</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>infos<span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">return</span> infos\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>可以看到，两个方法的代码极度相似，如果再需要按照 role 或者 status 查询，那不得不再来几个方法，导致相似的方法非常多。当然很容易想到，我们可以用一个方法，多几个入参的形式来解决这个问题，于是，我们把上面两个方法合并成下面这种方法，能够支持按照多个字段筛选查询：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">GetUserInfo</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> userID <span class=\"token builtin\">int64</span><span class=\"token punctuation\">,</span> name <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> role <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> status <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>resource<span class=\"token punctuation\">.</span>UserInfo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   db <span class=\"token operator\">:=</span> <span class=\"token function\">GetDB</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span>\n   db <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">Table</span><span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">.</span>UserInfo<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">.</span><span class=\"token function\">TableName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">var</span> infos <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>resource<span class=\"token punctuation\">.</span>UserInfo\n   <span class=\"token keyword\">if</span> userID <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span>\n      db <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user_id = ?\"</span><span class=\"token punctuation\">,</span> userID<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token keyword\">if</span> name <span class=\"token operator\">!=</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">&#123;</span>\n      db <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user_name = ?\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token keyword\">if</span> role <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span>\n      db <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"role = ?\"</span><span class=\"token punctuation\">,</span> role<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token keyword\">if</span> status <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span>\n      db <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"status = ?\"</span><span class=\"token punctuation\">,</span> status<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n   db<span class=\"token punctuation\">.</span><span class=\"token function\">Find</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>infos<span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">return</span> infos\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>相应地，调用该方法的代码也需要做出改变：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//只根据UserID查询</span>\ninfos <span class=\"token operator\">:=</span> <span class=\"token function\">GetUserInfo</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> userID<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//只根据UserName查询</span>\ninfos <span class=\"token operator\">:=</span> <span class=\"token function\">GetUserInfo</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//只根据Role查询</span>\ninfos <span class=\"token operator\">:=</span> <span class=\"token function\">GetUserInfo</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> role<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//只根据Status查询</span>\ninfos <span class=\"token operator\">:=</span> <span class=\"token function\">GetUserInfo</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> status<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这种代码无论是写代码的人还是读代码的人，都会感觉非常难受。我们这里只列举了四个参数，可以想想这个表里如果有十几个到二十个字段都需要做筛选查询，这种代码看上去是一种什么样的感觉。首先，GetUserInfo 方法本身入参非常多，里面充斥着各种 !&#x3D; 0 和 !&#x3D; “”的判断，并且需要注意的是，0 一定不能作为字段的有效值，否则 !&#x3D; 0 这种判断就会有问题。其次，作为调用方，明明只是根据一个字段筛选查询，却不得不为其他参数填充一个 0 或者””来占位，而且调用者要特别谨慎，因为一不小心，就可能会把 role 填到了 status 的位置上去，因为他们的类型都一样，编译器不会检查出任何错误，很容易搞出业务 bug。</p>\n<p>解决方案<br>如果说解决这种问题有段位，那么以上的写法只能算是青铜，接下来我们看看白银、黄金和王者。</p>\n<p>白银<br>解决这种问题，一种比较常见的方案是，新建一个结构体，把各种查询的字段都放在这个结构体中，然后把这个结构体作为入参传入到 dao 层的查询方法中。而在调用 dao 方法的地方，根据各自的需要，构建包含不同字段的结构体。在这个例子中，我们可以构建一个 UserInfo 的结构体如下：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> UserInfo <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n   UserID <span class=\"token builtin\">int64</span>\n   Name <span class=\"token builtin\">string</span>\n   Role <span class=\"token builtin\">int32</span>\n   Status <span class=\"token builtin\">int32</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>把 UserInfo 作为入参传给 GetUserInfo 方法，于是 GetUserInfo 方法变成了这样：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">GetUserInfo</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> info <span class=\"token operator\">*</span>UserInfo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>resource<span class=\"token punctuation\">.</span>UserInfo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   db <span class=\"token operator\">:=</span> <span class=\"token function\">GetDB</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span>\n   db <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">Table</span><span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">.</span>UserInfo<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">.</span><span class=\"token function\">TableName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">var</span> infos <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>resource<span class=\"token punctuation\">.</span>UserInfo\n   <span class=\"token keyword\">if</span> info<span class=\"token punctuation\">.</span>UserID <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span>\n      db <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user_id = ?\"</span><span class=\"token punctuation\">,</span> info<span class=\"token punctuation\">.</span>UserID<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token keyword\">if</span> info<span class=\"token punctuation\">.</span>Name <span class=\"token operator\">!=</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">&#123;</span>\n      db <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user_name = ?\"</span><span class=\"token punctuation\">,</span> info<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token keyword\">if</span> info<span class=\"token punctuation\">.</span>Role <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span>\n      db <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"role = ?\"</span><span class=\"token punctuation\">,</span> info<span class=\"token punctuation\">.</span>Role<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token keyword\">if</span> info<span class=\"token punctuation\">.</span>Status <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span>\n      db <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"status = ?\"</span><span class=\"token punctuation\">,</span> info<span class=\"token punctuation\">.</span>Status<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n   db<span class=\"token punctuation\">.</span><span class=\"token function\">Find</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>infos<span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">return</span> infos\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>相应地，调用该方法的代码也需要变动：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//只根据userD查询</span>\ninfo <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>UserInfo<span class=\"token punctuation\">&#123;</span>\n   UserID<span class=\"token punctuation\">:</span> userID<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span>\ninfos <span class=\"token operator\">:=</span> <span class=\"token function\">GetUserInfo</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> info<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//只根据name查询</span>\ninfo <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>UserInfo<span class=\"token punctuation\">&#123;</span>\n   Name<span class=\"token punctuation\">:</span> name<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span>\ninfos <span class=\"token operator\">:=</span> <span class=\"token function\">GetUserInfo</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> info<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这个代码写到这里，相比最开始的方法其实已经好了不少，至少 dao 层的方法从很多个入参变成了一个，调用方的代码也可以根据自己的需要构建参数，不需要很多空占位符。但是存在的问题也比较明显：仍然有很多判空不说，还引入了一个多余的结构体。如果我们就到此结束的话，多少有点遗憾。</p>\n<p>另外，如果我们再扩展一下业务场景，我们使用的不是等值查询，而是多值查询或者区间查询，比如查询 status in (a, b)，那上面的代码又怎么扩展呢？是不是又要引入一个方法，方法繁琐暂且不说，方法名叫啥都会让我们纠结很久；或许可以尝试把每个参数都从单值扩展成数组，然后赋值的地方从 &#x3D; 改为 in()的方式，所有参数查询都使用 in 显然对性能不是那么友好。</p>\n<p>黄金<br>接下来我们看看黄金的解法。在上面的方法中，我们引入了一个多余的结构体，并且无法避免在 dao 层的方法中做了很多判空赋值。那么我们能不能不引入 UserInfo 这个多余的结构体，并且也避免这些丑陋的判空？答案是可以的，函数式编程可以很好地解决这个问题，首先我们需要定义一个函数类型：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Option <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>gorm<span class=\"token punctuation\">.</span>DB<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>定义 Option 是一个函数，这个函数的入参类型是*gorm.DB，返回值为空。</p>\n<p>然后针对 DB 表中每个需要筛选查询的字段定义一个函数，为这个字段赋值，像下面这样：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">UserID</span><span class=\"token punctuation\">(</span>userID <span class=\"token builtin\">int64</span><span class=\"token punctuation\">)</span> Option <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">return</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>db <span class=\"token operator\">*</span>gorm<span class=\"token punctuation\">.</span>DB<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      db<span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"`user_id` = ?\"</span><span class=\"token punctuation\">,</span> userID<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">UserName</span><span class=\"token punctuation\">(</span>name <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> Option <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">return</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>db <span class=\"token operator\">*</span>gorm<span class=\"token punctuation\">.</span>DB<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      db<span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"`user_name` = ?\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">Role</span><span class=\"token punctuation\">(</span>role <span class=\"token builtin\">int32</span><span class=\"token punctuation\">)</span> Option <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">return</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>db <span class=\"token operator\">*</span>gorm<span class=\"token punctuation\">.</span>DB<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      db<span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"`role` = ?\"</span><span class=\"token punctuation\">,</span> role<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">Status</span><span class=\"token punctuation\">(</span>status <span class=\"token builtin\">int32</span><span class=\"token punctuation\">)</span> Option <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">return</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>db <span class=\"token operator\">*</span>gorm<span class=\"token punctuation\">.</span>DB<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      db<span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"`status` = ?\"</span><span class=\"token punctuation\">,</span> status<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>上面这组代码中，入参是一个字段的筛选值，返回的是一个 Option 函数，而这个函数的功能是把入参赋值给当前的【db *gorm.DB】对象。这也就是我们在文章一开始就提到的高阶函数，跟我们普通的函数不太一样，普通的函数返回的是一个简单类型的值或者一个封装类型的结构体，而这种高阶函数返回的是一个具备某种功能的函数。这里多说一句，虽然 go 语言很好地支持了函数式编程，但是由于其目前缺少对泛型的支持，导致高阶函数编程的使用并没有给开发者带来更多的便利，因此在平时业务代码中写高阶函数还是略为少见。而熟悉 JAVA 的同学都知道，JAVA 中的 Map、Reduce、Filter 等高阶函数使用起来非常的舒服。</p>\n<p>好，有了这一组函数之后，我们来看看 dao 层的查询方法怎么写：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">GetUserInfo</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> options <span class=\"token operator\">...</span><span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>option <span class=\"token operator\">*</span>gorm<span class=\"token punctuation\">.</span>DB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>resource<span class=\"token punctuation\">.</span>UserInfo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   db <span class=\"token operator\">:=</span> <span class=\"token function\">GetDB</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span>\n   db <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">Table</span><span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">.</span>UserInfo<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">.</span><span class=\"token function\">TableName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> option <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> options <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">option</span><span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token keyword\">var</span> infos <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>resource<span class=\"token punctuation\">.</span>UserInfo\n   db<span class=\"token punctuation\">.</span><span class=\"token function\">Find</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>infos<span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">return</span> infos\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>没有对比就没有伤害，通过和最开始的方法比较，可以看到方法的入参由多个不同类型的参数变成了一组相同类型的函数，因此在处理这些参数的时候，也无需一个一个的判空，而是直接使用一个 for 循环就搞定，相比之前已经简洁了很多。</p>\n<p>那么调用该方法的代码怎么写呢，这里直接给出来：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//只使用userID查询</span>\ninfos <span class=\"token operator\">:=</span> <span class=\"token function\">GetUserInfo</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token function\">UserID</span><span class=\"token punctuation\">(</span>userID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//只使用userName查询</span>\ninfos <span class=\"token operator\">:=</span> <span class=\"token function\">GetUserInfo</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token function\">UserName</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//使用role和status同时查询</span>\ninfos <span class=\"token operator\">:=</span> <span class=\"token function\">GetUserInfo</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token function\">Role</span><span class=\"token punctuation\">(</span>role<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Status</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>无论是使用任意的单个参数还是使用多个参数组合查询，我们都随便写，不用关注参数顺序，简洁又清晰，可读性也是非常好。</p>\n<p>再来考虑上面提到的扩展场景，如果我们需要多值查询，比如查询多个 status，那么我们只需要在 Option 中增加一个小小的函数即可：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">StatusIn</span><span class=\"token punctuation\">(</span>status <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int32</span><span class=\"token punctuation\">)</span> Option <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">return</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>db <span class=\"token operator\">*</span>gorm<span class=\"token punctuation\">.</span>DB<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      db<span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"`status` in ?\"</span><span class=\"token punctuation\">,</span> status<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>对于其他字段或者等值查询也是同理，代码的简洁不言而喻。</p>\n<p>王者<br>能优化到上面黄金的阶段，其实已经很简洁了，如果止步于此的话，也是完全可以的。但是如果还想进一步追求极致，那么请继续往下看！</p>\n<p>在上面方法中，我们通过高阶函数已经很好地解决了对于一张表中多字段组合查询的代码繁琐问题，但是对于不同的表查询，仍然要针对每个表都写一个查询方法，那么还有没有进一步优化的空间呢？我们发现，在 Option 中定义的这一组高阶函数，压根与某张表没关系，他只是简单地给 gorm.DB 赋值。因此，如果我们有多张表，每个表里都有 user_id、is_deleted、create_time、update_time 这些公共的字段，那么我们完全不用再重复定义一次，只需要在 Option 中定义一个就够了，每张表的查询都可以复用这些函数。进一步思考，我们发现，Option 中维护的是一些傻瓜式的代码，根本不需要我们每次手动去写，可以使用脚本生成，扫描一遍 DB 的表，为每个不重复的字段生成一个 Equal 方法、In 方法、Greater 方法、Less 方法，就可以解决所有表中按照不同字段做等值查询、多值查询、区间查询。</p>\n<p>解决了 Option 的问题之后，对于每个表的各种组合查询，就只需要写一个很简单的 Get 方法了，为了方便看，我们在这里再贴一次：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">GetUserInfo</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> options <span class=\"token operator\">...</span><span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>option <span class=\"token operator\">*</span>gorm<span class=\"token punctuation\">.</span>DB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>resource<span class=\"token punctuation\">.</span>UserInfo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   db <span class=\"token operator\">:=</span> <span class=\"token function\">GetDB</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span>\n   db <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">Table</span><span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">.</span>UserInfo<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">.</span><span class=\"token function\">TableName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> option <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> options <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">option</span><span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token keyword\">var</span> infos <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>resource<span class=\"token punctuation\">.</span>UserInfo\n   db<span class=\"token punctuation\">.</span><span class=\"token function\">Find</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>infos<span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">return</span> infos\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>上面这个查询方法是针对 user_info 这个表写的，如果还有其他表，我们还需要为每个表都写一个和这个类似的 Get 方法。如果我们仔细观察每个表的 Get 方法，会发现这些方法其实就有两点不同：</p>\n<p>返回值类型不一样；<br>TableName 不一样。<br>如果我们能解决这两个问题，那我们就能够使用一个方法解决所有表的查询。首先对于第一点返回值不一致的问题，可以参考 json.unmarshal 的做法，把返回类型以一个参数的形式传进来，因为传入的是指针类型，所以就不用再给返回值了；而对于 tableName 不一致的问题，其实可以和上面处理不同参数的方式一样，增加一个 Option 方法来解决：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">TableName</span><span class=\"token punctuation\">(</span>tableName <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> Option <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">return</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>db <span class=\"token operator\">*</span>gorm<span class=\"token punctuation\">.</span>DB<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      db<span class=\"token punctuation\">.</span><span class=\"token function\">Table</span><span class=\"token punctuation\">(</span>tableName<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这样改造之后，我们的 dao 层查询方法就变成了这样：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">GetRecord</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> in <span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> options <span class=\"token operator\">...</span><span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>option <span class=\"token operator\">*</span>gorm<span class=\"token punctuation\">.</span>DB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   db <span class=\"token operator\">:=</span> <span class=\"token function\">GetDB</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> option <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> options <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">option</span><span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n   db<span class=\"token punctuation\">.</span><span class=\"token function\">Find</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">return</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>注意，我们把方法名从之前的 GetUserInfo 变成了GetRecord，因为这个方法不仅能支持对于 user_info 表的查询，而且能够支持对一个库中所有表的查询。也就是说从最开始为每个表建一个类，每个类下面又写很多个查询方法，现在变成了所有表所有查询适用一个方法。</p>\n<p>然后我们看看调用这个方法的代码怎么写：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//根据userID和userName查询</span>\n<span class=\"token keyword\">var</span> infos <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>resource<span class=\"token punctuation\">.</span>UserInfo\n<span class=\"token function\">GetRecord</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>infos<span class=\"token punctuation\">,</span> <span class=\"token function\">TableName</span><span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">.</span>UserInfo<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">.</span><span class=\"token function\">TableName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">UserID</span><span class=\"token punctuation\">(</span>userID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">UserName</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>这里还是给出了查询 user_info 表的示例，在调用的地方指定 tableName 和返回类型。</p>\n<p>经过这样的改造之后，我们最终实现了用一个简单的方法【GetRecord】 + 一个可自动生成的配置类【Option】对一个库中所有表的多种组合查询。代码的简洁和优雅又有了一些提升。美中不足的是，在调用查询方法的地方多传了两个参数，一个是返回值变量，一个是 tableName，多少显得有点不那么美观。</p>\n<p>总结<br>这里通过对 grom 查询条件的抽象，大大简化了对 DB 组合查询的写法，提升了代码的简洁。对于其他 update、insert、delete 三种操作，也可以借用这种思想做一定程度的简化，因为篇幅关系我们不在这里赘述。如果大家还有其他想法，欢迎留言讨论！</p>\n<p>参考文献<br><a href=\"https://commandcenter.blogspot.com/2014/01/self-referential-functions-and-design.html\">https://commandcenter.blogspot.com/2014/01/self-referential-functions-and-design.html</a><br><a href=\"https://coolshell.cn/articles/21146.html\">https://coolshell.cn/articles/21146.html</a></p>\n<p>原文地址：<a href=\"https://mp.weixin.qq.com/s/w1ebAgnzfDzoGG0sn6KGlQ\">https://mp.weixin.qq.com/s/w1ebAgnzfDzoGG0sn6KGlQ</a></p>"},{"title":"获取项目中 golang 代码行数","url":"/archives/huo-qu-xiang-mu-zhong-golangdai-ma-xing-shu","abbrlink":"7182060a","date":"2022-03-10T08:53:10.000Z","updated":"2022-03-10T08:53:10.000Z","_content":"\n获取包\n```bash\ngo get -u github.com/hhatto/gocloc/cmd/gocloc\n```\n在项目下执行命令\n```bash\ngocloc  ./\n```\n![image.png](/upload/2022/03/image-8779d8ceda504a4e96579fa4fcb26844.png)","source":"_posts/获取项目中 golang 代码行数.md","raw":"---\ntitle: 获取项目中 golang 代码行数\nurl: /archives/huo-qu-xiang-mu-zhong-golangdai-ma-xing-shu\ncategories:\n  - golang\ntags:\n  - golang\nabbrlink: 7182060a\ndate: 2022-03-10 16:53:10\nupdated: 2022-03-10 16:53:10\n---\n\n获取包\n```bash\ngo get -u github.com/hhatto/gocloc/cmd/gocloc\n```\n在项目下执行命令\n```bash\ngocloc  ./\n```\n![image.png](/upload/2022/03/image-8779d8ceda504a4e96579fa4fcb26844.png)","slug":"获取项目中 golang 代码行数","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clh95h7l20044gwuvh5s6cb62","content":"<p>获取包</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">go get -u github.com/hhatto/gocloc/cmd/gocloc<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>在项目下执行命令</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">gocloc  ./<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"/upload/2022/03/image-8779d8ceda504a4e96579fa4fcb26844.png\" alt=\"image.png\"></p>\n","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"/js/canvas-nest.js\"></script>\n"}},"cover":false,"excerpt":"","more":"<p>获取包</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">go get -u github.com/hhatto/gocloc/cmd/gocloc<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>在项目下执行命令</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">gocloc  ./<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"/upload/2022/03/image-8779d8ceda504a4e96579fa4fcb26844.png\" alt=\"image.png\"></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clh95h7j20001gwuv8z62codl","category_id":"clh95h7j70004gwuvaaeuaj34","_id":"clh95h7jf000egwuveamm7ldr"},{"post_id":"clh95h7j50003gwuv5g0n4kdz","category_id":"clh95h7jd000agwuv18ve55dd","_id":"clh95h7jj000lgwuvdmx49z5e"},{"post_id":"clh95h7j90007gwuv36k0bhk1","category_id":"clh95h7jf000fgwuvfkfognvd","_id":"clh95h7jo000sgwuvgmgeg6t0"},{"post_id":"clh95h7jb0008gwuvd343ak39","category_id":"clh95h7jd000agwuv18ve55dd","_id":"clh95h7jq000wgwuv2jlk8ul0"},{"post_id":"clh95h7jc0009gwuv80nh9sj4","category_id":"clh95h7jn000rgwuv1v9xf6la","_id":"clh95h7jt0013gwuv6vyy61oq"},{"post_id":"clh95h7je000cgwuvg3e9h9dr","category_id":"clh95h7jn000rgwuv1v9xf6la","_id":"clh95h7k0001cgwuvg8lg12as"},{"post_id":"clh95h7jf000dgwuv6dew24x0","category_id":"clh95h7jn000rgwuv1v9xf6la","_id":"clh95h7k2001igwuvh5aa032z"},{"post_id":"clh95h7k0001dgwuv4sus2kvm","category_id":"clh95h7jd000agwuv18ve55dd","_id":"clh95h7k4001ngwuvcv9c92x9"},{"post_id":"clh95h7jh000hgwuv2qtjhdr8","category_id":"clh95h7jw0019gwuv77bq3le0","_id":"clh95h7k8001rgwuv9to5el1l"},{"post_id":"clh95h7k1001fgwuvg1wn4nyc","category_id":"clh95h7jd000agwuv18ve55dd","_id":"clh95h7k9001ugwuvhobqgagt"},{"post_id":"clh95h7k3001kgwuvbcqc8lrd","category_id":"clh95h7jd000agwuv18ve55dd","_id":"clh95h7ka001zgwuvaazk7xsr"},{"post_id":"clh95h7ji000jgwuv170o0hiy","category_id":"clh95h7jw0019gwuv77bq3le0","_id":"clh95h7kb0022gwuv121g6zfj"},{"post_id":"clh95h7k4001mgwuv3xskbitw","category_id":"clh95h7jd000agwuv18ve55dd","_id":"clh95h7kc0026gwuvbngyg4vu"},{"post_id":"clh95h7k5001qgwuv3gn17tsc","category_id":"clh95h7jd000agwuv18ve55dd","_id":"clh95h7ke0029gwuv7a2l0tcu"},{"post_id":"clh95h7jk000ogwuvcvb058r4","category_id":"clh95h7jw0019gwuv77bq3le0","_id":"clh95h7kh002egwuv091vet9o"},{"post_id":"clh95h7k8001tgwuv4w2kcviz","category_id":"clh95h7jd000agwuv18ve55dd","_id":"clh95h7ki002hgwuv3jp1eoes"},{"post_id":"clh95h7k9001ygwuv7uyk6cff","category_id":"clh95h7jd000agwuv18ve55dd","_id":"clh95h7kk002lgwuv5si6b3pp"},{"post_id":"clh95h7jl000qgwuv7vph1hns","category_id":"clh95h7k9001vgwuv4b9t4wtx","_id":"clh95h7kl002pgwuvdqst1xc6"},{"post_id":"clh95h7ka0021gwuv6wd8gh85","category_id":"clh95h7jd000agwuv18ve55dd","_id":"clh95h7km002tgwuv2grv0mcv"},{"post_id":"clh95h7kc0025gwuv2mou02u7","category_id":"clh95h7jd000agwuv18ve55dd","_id":"clh95h7kn002xgwuv5qklbitp"},{"post_id":"clh95h7jo000ugwuvhf9w6qij","category_id":"clh95h7k9001vgwuv4b9t4wtx","_id":"clh95h7ko0031gwuv9yvmhxw5"},{"post_id":"clh95h7kd0028gwuv7i62hyu1","category_id":"clh95h7jd000agwuv18ve55dd","_id":"clh95h7kp0035gwuve4mo5khe"},{"post_id":"clh95h7kg002dgwuvdjy7g763","category_id":"clh95h7jd000agwuv18ve55dd","_id":"clh95h7kq0039gwuvdqnsafoj"},{"post_id":"clh95h7jp000vgwuv8d26gzao","category_id":"clh95h7k9001vgwuv4b9t4wtx","_id":"clh95h7ks003cgwuv3pfqempe"},{"post_id":"clh95h7kh002ggwuva2ok7tgg","category_id":"clh95h7jd000agwuv18ve55dd","_id":"clh95h7kt003fgwuvee8bbw2q"},{"post_id":"clh95h7kj002kgwuv05fcas7v","category_id":"clh95h7jd000agwuv18ve55dd","_id":"clh95h7ku003igwuvfd7y3wfq"},{"post_id":"clh95h7jq000ygwuvf0yg330g","category_id":"clh95h7k9001vgwuv4b9t4wtx","_id":"clh95h7kx003mgwuv0g2pauxt"},{"post_id":"clh95h7kk002ogwuvaocg2gc4","category_id":"clh95h7jd000agwuv18ve55dd","_id":"clh95h7ky003qgwuvfx3f2phv"},{"post_id":"clh95h7jr0011gwuv87aua8t6","category_id":"clh95h7k9001vgwuv4b9t4wtx","_id":"clh95h7kz003ugwuv1g90bb4y"},{"post_id":"clh95h7jt0015gwuv1yho5el4","category_id":"clh95h7k9001vgwuv4b9t4wtx","_id":"clh95h7l0003ygwuvfgiw8icu"},{"post_id":"clh95h7jv0018gwuvaqu373mi","category_id":"clh95h7k9001vgwuv4b9t4wtx","_id":"clh95h7l10042gwuv639j51sj"},{"post_id":"clh95h7jx001agwuvg1rxcs95","category_id":"clh95h7k9001vgwuv4b9t4wtx","_id":"clh95h7l20045gwuvge3h8vpn"},{"post_id":"clh95h7kw003lgwuv7anv4ozo","category_id":"clh95h7jw0019gwuv77bq3le0","_id":"clh95h7l30049gwuv3599fab2"},{"post_id":"clh95h7kl002sgwuvbzjyfomo","category_id":"clh95h7kv003jgwuv29ng0qxi","_id":"clh95h7l3004bgwuve4xi2r5s"},{"post_id":"clh95h7kx003pgwuvdnvx51wt","category_id":"clh95h7kv003jgwuv29ng0qxi","_id":"clh95h7l4004egwuvbjcd09el"},{"post_id":"clh95h7ky003tgwuv5rt5eoek","category_id":"clh95h7kv003jgwuv29ng0qxi","_id":"clh95h7l4004ggwuv8xbm6wlo"},{"post_id":"clh95h7l0003xgwuvho0naoqm","category_id":"clh95h7jw0019gwuv77bq3le0","_id":"clh95h7l4004jgwuvgm9vght1"},{"post_id":"clh95h7kn002wgwuvh1v13136","category_id":"clh95h7kv003jgwuv29ng0qxi","_id":"clh95h7l5004mgwuv50bea0k0"},{"post_id":"clh95h7l10041gwuv7jq11xi8","category_id":"clh95h7jd000agwuv18ve55dd","_id":"clh95h7l5004ogwuvg81n9wr9"},{"post_id":"clh95h7l20044gwuvh5s6cb62","category_id":"clh95h7jd000agwuv18ve55dd","_id":"clh95h7l6004qgwuveksu9iws"},{"post_id":"clh95h7ko0030gwuv34tkbhf1","category_id":"clh95h7kv003jgwuv29ng0qxi","_id":"clh95h7l6004sgwuv1e3e6123"},{"post_id":"clh95h7kp0034gwuv9sovet95","category_id":"clh95h7l30047gwuvbzto6kbo","_id":"clh95h7l6004vgwuv5mrt4qp8"},{"post_id":"clh95h7kq0038gwuvg8lsfh0b","category_id":"clh95h7l4004dgwuv9huvd2te","_id":"clh95h7l7004ygwuvarq98f6v"},{"post_id":"clh95h7kr003bgwuvfusgcnwa","category_id":"clh95h7l4004dgwuv9huvd2te","_id":"clh95h7l70050gwuvgnwt9jy3"},{"post_id":"clh95h7ks003egwuv8son1ptc","category_id":"clh95h7l4004dgwuv9huvd2te","_id":"clh95h7l70051gwuv6wytha6j"},{"post_id":"clh95h7kt003hgwuvhtvc7xtq","category_id":"clh95h7l6004tgwuv74li6jkw","_id":"clh95h7l80054gwuv48l251fj"}],"PostTag":[{"post_id":"clh95h7j20001gwuv8z62codl","tag_id":"clh95h7j80005gwuv3an5eau4","_id":"clh95h7ji000igwuvdddiejb6"},{"post_id":"clh95h7j20001gwuv8z62codl","tag_id":"clh95h7jd000bgwuv1tgmb3h7","_id":"clh95h7jj000kgwuv1sxjalcf"},{"post_id":"clh95h7j50003gwuv5g0n4kdz","tag_id":"clh95h7jg000ggwuveese74jb","_id":"clh95h7jl000pgwuvdsgp3g35"},{"post_id":"clh95h7j90007gwuv36k0bhk1","tag_id":"clh95h7jj000ngwuv65jqa22r","_id":"clh95h7jr0010gwuv5ajk4b70"},{"post_id":"clh95h7j90007gwuv36k0bhk1","tag_id":"clh95h7jo000tgwuv25u98a77","_id":"clh95h7jt0014gwuv1i1z81pf"},{"post_id":"clh95h7jb0008gwuvd343ak39","tag_id":"clh95h7jg000ggwuveese74jb","_id":"clh95h7ju0017gwuv1482bego"},{"post_id":"clh95h7jc0009gwuv80nh9sj4","tag_id":"clh95h7ju0016gwuv06mb98w5","_id":"clh95h7k1001egwuv9xp95h5x"},{"post_id":"clh95h7k0001dgwuv4sus2kvm","tag_id":"clh95h7jg000ggwuveese74jb","_id":"clh95h7k3001jgwuv2kxohaej"},{"post_id":"clh95h7je000cgwuvg3e9h9dr","tag_id":"clh95h7ju0016gwuv06mb98w5","_id":"clh95h7k4001lgwuv3w7j5tph"},{"post_id":"clh95h7jf000dgwuv6dew24x0","tag_id":"clh95h7ju0016gwuv06mb98w5","_id":"clh95h7k8001sgwuvbv9aawiv"},{"post_id":"clh95h7k4001mgwuv3xskbitw","tag_id":"clh95h7jg000ggwuveese74jb","_id":"clh95h7k9001wgwuvhk1afnvt"},{"post_id":"clh95h7jh000hgwuv2qtjhdr8","tag_id":"clh95h7k5001pgwuv5agph8i1","_id":"clh95h7ka0020gwuvfzff5jil"},{"post_id":"clh95h7ji000jgwuv170o0hiy","tag_id":"clh95h7k9001xgwuv8ime153w","_id":"clh95h7kd0027gwuv6erl847u"},{"post_id":"clh95h7ka0021gwuv6wd8gh85","tag_id":"clh95h7jg000ggwuveese74jb","_id":"clh95h7kf002bgwuvg8033fc8"},{"post_id":"clh95h7jk000ogwuvcvb058r4","tag_id":"clh95h7k9001xgwuv8ime153w","_id":"clh95h7kh002fgwuvfjyj32yg"},{"post_id":"clh95h7kd0028gwuv7i62hyu1","tag_id":"clh95h7jg000ggwuveese74jb","_id":"clh95h7kj002jgwuv2n75gho0"},{"post_id":"clh95h7kg002dgwuvdjy7g763","tag_id":"clh95h7jg000ggwuveese74jb","_id":"clh95h7kk002ngwuv80j151k1"},{"post_id":"clh95h7kh002ggwuva2ok7tgg","tag_id":"clh95h7jg000ggwuveese74jb","_id":"clh95h7kl002rgwuv2ob7fdgr"},{"post_id":"clh95h7kj002kgwuv05fcas7v","tag_id":"clh95h7jg000ggwuveese74jb","_id":"clh95h7km002vgwuvbhzjdc37"},{"post_id":"clh95h7kk002ogwuvaocg2gc4","tag_id":"clh95h7jg000ggwuveese74jb","_id":"clh95h7ko002zgwuvfivma5x9"},{"post_id":"clh95h7jl000qgwuv7vph1hns","tag_id":"clh95h7kg002cgwuvc7axdjxv","_id":"clh95h7kp0033gwuvgk9d7u9j"},{"post_id":"clh95h7jl000qgwuv7vph1hns","tag_id":"clh95h7kk002mgwuv4dpaccy2","_id":"clh95h7kq0037gwuv67qq3y2y"},{"post_id":"clh95h7jo000ugwuvhf9w6qij","tag_id":"clh95h7kg002cgwuvc7axdjxv","_id":"clh95h7kw003kgwuvf9kt40ex"},{"post_id":"clh95h7jo000ugwuvhf9w6qij","tag_id":"clh95h7ko0032gwuv3r4l4i0s","_id":"clh95h7kx003ngwuva3uude0f"},{"post_id":"clh95h7jo000ugwuvhf9w6qij","tag_id":"clh95h7kr003agwuv2m8n1y2y","_id":"clh95h7ky003sgwuv1iv2be77"},{"post_id":"clh95h7jp000vgwuv8d26gzao","tag_id":"clh95h7kg002cgwuvc7axdjxv","_id":"clh95h7kz003vgwuvazf99ob1"},{"post_id":"clh95h7kw003lgwuv7anv4ozo","tag_id":"clh95h7k9001xgwuv8ime153w","_id":"clh95h7l10040gwuv6boq57c2"},{"post_id":"clh95h7l0003xgwuvho0naoqm","tag_id":"clh95h7k9001xgwuv8ime153w","_id":"clh95h7l20043gwuv12z8cey7"},{"post_id":"clh95h7l10041gwuv7jq11xi8","tag_id":"clh95h7jg000ggwuveese74jb","_id":"clh95h7l30048gwuva1y7214e"},{"post_id":"clh95h7l20044gwuvh5s6cb62","tag_id":"clh95h7jg000ggwuveese74jb","_id":"clh95h7l3004agwuv9oay1i3i"},{"post_id":"clh95h7jq000ygwuvf0yg330g","tag_id":"clh95h7kg002cgwuvc7axdjxv","_id":"clh95h7l4004fgwuv2jifg69n"},{"post_id":"clh95h7jq000ygwuvf0yg330g","tag_id":"clh95h7kz003wgwuv2159435g","_id":"clh95h7l4004hgwuv9b7met6m"},{"post_id":"clh95h7jq000ygwuvf0yg330g","tag_id":"clh95h7l20046gwuvbyry5ajx","_id":"clh95h7l5004lgwuv7q5l2yc5"},{"post_id":"clh95h7jr0011gwuv87aua8t6","tag_id":"clh95h7kg002cgwuvc7axdjxv","_id":"clh95h7l6004ugwuvdsol2nqi"},{"post_id":"clh95h7jr0011gwuv87aua8t6","tag_id":"clh95h7l4004igwuv70bj77f6","_id":"clh95h7l7004wgwuvarbd1xxg"},{"post_id":"clh95h7jr0011gwuv87aua8t6","tag_id":"clh95h7l5004ngwuvbdnt8lt2","_id":"clh95h7l7004zgwuvecwmcxtd"},{"post_id":"clh95h7jt0015gwuv1yho5el4","tag_id":"clh95h7kg002cgwuvc7axdjxv","_id":"clh95h7l80053gwuv890s86yo"},{"post_id":"clh95h7jt0015gwuv1yho5el4","tag_id":"clh95h7l7004xgwuvfgqw8qnw","_id":"clh95h7l80055gwuv0nrbbtux"},{"post_id":"clh95h7jv0018gwuvaqu373mi","tag_id":"clh95h7kg002cgwuvc7axdjxv","_id":"clh95h7l80058gwuv4a8j3fd9"},{"post_id":"clh95h7jv0018gwuvaqu373mi","tag_id":"clh95h7l7004xgwuvfgqw8qnw","_id":"clh95h7l80059gwuv8prg1ydg"},{"post_id":"clh95h7jx001agwuvg1rxcs95","tag_id":"clh95h7kg002cgwuvc7axdjxv","_id":"clh95h7l9005bgwuv8z92fy9d"},{"post_id":"clh95h7k1001fgwuvg1wn4nyc","tag_id":"clh95h7jg000ggwuveese74jb","_id":"clh95h7l9005egwuvh2xzdddh"},{"post_id":"clh95h7k1001fgwuvg1wn4nyc","tag_id":"clh95h7l9005agwuve3wn3hsn","_id":"clh95h7la005fgwuv2dvk01yt"},{"post_id":"clh95h7k1001fgwuvg1wn4nyc","tag_id":"clh95h7l9005cgwuvbmlwebtn","_id":"clh95h7la005hgwuv87hl5oyc"},{"post_id":"clh95h7k3001kgwuvbcqc8lrd","tag_id":"clh95h7jg000ggwuveese74jb","_id":"clh95h7lb005jgwuv5zy790ti"},{"post_id":"clh95h7k3001kgwuvbcqc8lrd","tag_id":"clh95h7l9005agwuve3wn3hsn","_id":"clh95h7lb005kgwuvgvolajzw"},{"post_id":"clh95h7k3001kgwuvbcqc8lrd","tag_id":"clh95h7la005ggwuv2v4naa0y","_id":"clh95h7lc005mgwuvgl9uf57u"},{"post_id":"clh95h7k5001qgwuv3gn17tsc","tag_id":"clh95h7la005igwuv557b1fjc","_id":"clh95h7lc005ngwuve10jabiz"},{"post_id":"clh95h7k5001qgwuv3gn17tsc","tag_id":"clh95h7jg000ggwuveese74jb","_id":"clh95h7lc005pgwuv9sbucluq"},{"post_id":"clh95h7k8001tgwuv4w2kcviz","tag_id":"clh95h7lb005lgwuv855y37ub","_id":"clh95h7lf005sgwuv5zmtfyyg"},{"post_id":"clh95h7k8001tgwuv4w2kcviz","tag_id":"clh95h7lc005ogwuvee3ge5a9","_id":"clh95h7lf005tgwuva4gb9uy3"},{"post_id":"clh95h7k8001tgwuv4w2kcviz","tag_id":"clh95h7ld005qgwuvfumd4efa","_id":"clh95h7lf005vgwuvczoh343k"},{"post_id":"clh95h7k9001ygwuv7uyk6cff","tag_id":"clh95h7jg000ggwuveese74jb","_id":"clh95h7lf005wgwuv2ytfa5m5"},{"post_id":"clh95h7k9001ygwuv7uyk6cff","tag_id":"clh95h7le005rgwuvdf19bltn","_id":"clh95h7lg005ygwuvfi47662d"},{"post_id":"clh95h7kc0025gwuv2mou02u7","tag_id":"clh95h7jg000ggwuveese74jb","_id":"clh95h7lg005zgwuv4s9x6dyo"},{"post_id":"clh95h7kc0025gwuv2mou02u7","tag_id":"clh95h7lf005ugwuvd1061e2y","_id":"clh95h7lg0061gwuvd52070q7"},{"post_id":"clh95h7kl002sgwuvbzjyfomo","tag_id":"clh95h7l7004xgwuvfgqw8qnw","_id":"clh95h7lh0064gwuv4niccw76"},{"post_id":"clh95h7kl002sgwuvbzjyfomo","tag_id":"clh95h7lg0060gwuvf5cl90gy","_id":"clh95h7lh0065gwuv41fwfuno"},{"post_id":"clh95h7kl002sgwuvbzjyfomo","tag_id":"clh95h7lg0062gwuv6k4efrbn","_id":"clh95h7lh0067gwuvbhjeb3zd"},{"post_id":"clh95h7kn002wgwuvh1v13136","tag_id":"clh95h7lg0060gwuvf5cl90gy","_id":"clh95h7lh0068gwuv0juwbwvp"},{"post_id":"clh95h7ko0030gwuv34tkbhf1","tag_id":"clh95h7lg0060gwuvf5cl90gy","_id":"clh95h7li006agwuv97n7h76e"},{"post_id":"clh95h7kp0034gwuv9sovet95","tag_id":"clh95h7jj000ngwuv65jqa22r","_id":"clh95h7li006cgwuvafxeegqe"},{"post_id":"clh95h7kp0034gwuv9sovet95","tag_id":"clh95h7jo000tgwuv25u98a77","_id":"clh95h7li006dgwuv730g00zi"},{"post_id":"clh95h7kp0034gwuv9sovet95","tag_id":"clh95h7lh0069gwuv7ommeneg","_id":"clh95h7lj006fgwuv1ggvfnbc"},{"post_id":"clh95h7kq0038gwuvg8lsfh0b","tag_id":"clh95h7li006bgwuv67kl6vaj","_id":"clh95h7lj006ggwuv3hsn5j46"},{"post_id":"clh95h7kr003bgwuvfusgcnwa","tag_id":"clh95h7li006bgwuv67kl6vaj","_id":"clh95h7lj006igwuv7om5c26b"},{"post_id":"clh95h7ks003egwuv8son1ptc","tag_id":"clh95h7li006bgwuv67kl6vaj","_id":"clh95h7lj006kgwuvf4567e7d"},{"post_id":"clh95h7kt003hgwuvhtvc7xtq","tag_id":"clh95h7lj006jgwuvhp39gb5t","_id":"clh95h7lk006mgwuvdt3rgrdk"},{"post_id":"clh95h7kx003pgwuvdnvx51wt","tag_id":"clh95h7lg0060gwuvf5cl90gy","_id":"clh95h7lk006pgwuvcxoi711t"},{"post_id":"clh95h7kx003pgwuvdnvx51wt","tag_id":"clh95h7lk006ngwuvdsmzbpxc","_id":"clh95h7ll006qgwuvd3vw3zvn"},{"post_id":"clh95h7ky003tgwuv5rt5eoek","tag_id":"clh95h7lk006ogwuv13qb220h","_id":"clh95h7ll006sgwuvack5aeg9"},{"post_id":"clh95h7ky003tgwuv5rt5eoek","tag_id":"clh95h7kz003wgwuv2159435g","_id":"clh95h7ll006tgwuv7fm48dx5"}],"Tag":[{"name":"gpg","_id":"clh95h7j80005gwuv3an5eau4"},{"name":"rsa","_id":"clh95h7jd000bgwuv1tgmb3h7"},{"name":"golang","_id":"clh95h7jg000ggwuveese74jb"},{"name":"备份","_id":"clh95h7jj000ngwuv65jqa22r"},{"name":"恢复","_id":"clh95h7jo000tgwuv25u98a77"},{"name":"clickhouse","_id":"clh95h7ju0016gwuv06mb98w5"},{"name":"docker-compose","_id":"clh95h7k5001pgwuv5agph8i1"},{"name":"docker","_id":"clh95h7k9001xgwuv8ime153w"},{"name":"git","_id":"clh95h7kg002cgwuvc7axdjxv"},{"name":"add","_id":"clh95h7kk002mgwuv4dpaccy2"},{"name":"tag","_id":"clh95h7ko0032gwuv3r4l4i0s"},{"name":"标签","_id":"clh95h7kr003agwuv2m8n1y2y"},{"name":"文件","_id":"clh95h7kz003wgwuv2159435g"},{"name":"status","_id":"clh95h7l20046gwuvbyry5ajx"},{"name":"history","_id":"clh95h7l4004igwuv70bj77f6"},{"name":"log","_id":"clh95h7l5004ngwuvbdnt8lt2"},{"name":"代理","_id":"clh95h7l7004xgwuvfgqw8qnw"},{"name":"aes","_id":"clh95h7l9005agwuve3wn3hsn"},{"name":"cbc","_id":"clh95h7l9005cgwuvbmlwebtn"},{"name":"ecb","_id":"clh95h7la005ggwuv2v4naa0y"},{"name":"pprof","_id":"clh95h7la005igwuv557b1fjc"},{"name":"字符串","_id":"clh95h7lb005lgwuv855y37ub"},{"name":"json","_id":"clh95h7lc005ogwuvee3ge5a9"},{"name":"map","_id":"clh95h7ld005qgwuvfumd4efa"},{"name":"cmd","_id":"clh95h7le005rgwuvdf19bltn"},{"name":"redis","_id":"clh95h7lf005ugwuvd1061e2y"},{"name":"linux","_id":"clh95h7lg0060gwuvf5cl90gy"},{"name":"bash","_id":"clh95h7lg0062gwuv6k4efrbn"},{"name":"mysql","_id":"clh95h7lh0069gwuv7ommeneg"},{"name":"nginx","_id":"clh95h7li006bgwuv67kl6vaj"},{"name":"ssh","_id":"clh95h7lj006jgwuvhp39gb5t"},{"name":"rsync","_id":"clh95h7lk006ngwuvdsmzbpxc"},{"name":"scp","_id":"clh95h7lk006ogwuv13qb220h"}]}}